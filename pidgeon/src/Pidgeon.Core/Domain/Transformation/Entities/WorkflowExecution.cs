// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

using System.Text.Json.Serialization;

namespace Pidgeon.Core.Domain.Transformation.Entities;

/// <summary>
/// Represents the execution state and results of a workflow scenario.
/// Tracks progress, results, and execution history for workflow runs.
/// </summary>
public record WorkflowExecution
{
    /// <summary>
    /// Unique identifier for this workflow execution.
    /// </summary>
    [JsonPropertyName("id")]
    public string Id { get; init; } = Guid.NewGuid().ToString();
    
    /// <summary>
    /// Identifier of the workflow scenario being executed.
    /// </summary>
    [JsonPropertyName("scenarioId")]
    public string ScenarioId { get; init; } = string.Empty;
    
    /// <summary>
    /// Current execution status of the workflow.
    /// </summary>
    [JsonPropertyName("status")]
    public WorkflowExecutionStatus Status { get; init; }
    
    /// <summary>
    /// When this workflow execution was started.
    /// </summary>
    [JsonPropertyName("startTime")]
    public DateTime StartTime { get; init; } = DateTime.UtcNow;
    
    /// <summary>
    /// When this workflow execution completed (if finished).
    /// </summary>
    [JsonPropertyName("endTime")]
    public DateTime? EndTime { get; init; }
    
    /// <summary>
    /// Total execution time for this workflow.
    /// </summary>
    [JsonPropertyName("duration")]
    public TimeSpan Duration => EndTime.HasValue ? EndTime.Value - StartTime : DateTime.UtcNow - StartTime;
    
    /// <summary>
    /// Results from each executed workflow step.
    /// </summary>
    [JsonPropertyName("stepResults")]
    public List<WorkflowStepResult> StepResults { get; init; } = new();
    
    /// <summary>
    /// Overall success rate of the workflow execution.
    /// </summary>
    [JsonPropertyName("successRate")]
    public double SuccessRate { get; init; }
    
    /// <summary>
    /// Error messages from failed steps (if any).
    /// </summary>
    [JsonPropertyName("errors")]
    public List<string> Errors { get; init; } = new();
    
    /// <summary>
    /// Warning messages from step execution.
    /// </summary>
    [JsonPropertyName("warnings")]
    public List<string> Warnings { get; init; } = new();
    
    /// <summary>
    /// Output artifacts generated by this workflow execution.
    /// </summary>
    [JsonPropertyName("outputArtifacts")]
    public Dictionary<string, string> OutputArtifacts { get; init; } = new();
    
    /// <summary>
    /// Execution metadata and custom properties.
    /// </summary>
    [JsonPropertyName("metadata")]
    public Dictionary<string, string> Metadata { get; init; } = new();
}

/// <summary>
/// Execution status for workflow runs.
/// </summary>
public enum WorkflowExecutionStatus
{
    /// <summary>
    /// Workflow execution is pending start.
    /// </summary>
    Pending,
    
    /// <summary>
    /// Workflow execution is currently running.
    /// </summary>
    Running,
    
    /// <summary>
    /// Workflow execution completed successfully.
    /// </summary>
    Completed,
    
    /// <summary>
    /// Workflow execution failed with errors.
    /// </summary>
    Failed,
    
    /// <summary>
    /// Workflow execution was cancelled by user.
    /// </summary>
    Cancelled,
    
    /// <summary>
    /// Workflow execution was paused and can be resumed.
    /// </summary>
    Paused
}

/// <summary>
/// Results from executing a single workflow step.
/// </summary>
public record WorkflowStepResult
{
    /// <summary>
    /// Identifier of the executed workflow step.
    /// </summary>
    [JsonPropertyName("stepId")]
    public string StepId { get; init; } = string.Empty;
    
    /// <summary>
    /// Name of the executed workflow step.
    /// </summary>
    [JsonPropertyName("stepName")]
    public string StepName { get; init; } = string.Empty;
    
    /// <summary>
    /// Execution status of this step.
    /// </summary>
    [JsonPropertyName("status")]
    public WorkflowStepStatus Status { get; init; }
    
    /// <summary>
    /// When this step started executing.
    /// </summary>
    [JsonPropertyName("startTime")]
    public DateTime StartTime { get; init; } = DateTime.UtcNow;
    
    /// <summary>
    /// When this step completed execution.
    /// </summary>
    [JsonPropertyName("endTime")]
    public DateTime? EndTime { get; init; }
    
    /// <summary>
    /// Execution time for this step.
    /// </summary>
    [JsonPropertyName("duration")]
    public TimeSpan Duration => EndTime.HasValue ? EndTime.Value - StartTime : DateTime.UtcNow - StartTime;
    
    /// <summary>
    /// Output data produced by this step.
    /// </summary>
    [JsonPropertyName("output")]
    public Dictionary<string, object> Output { get; init; } = new();
    
    /// <summary>
    /// Error message if step execution failed.
    /// </summary>
    [JsonPropertyName("errorMessage")]
    public string? ErrorMessage { get; init; }
    
    /// <summary>
    /// Validation results for this step.
    /// </summary>
    [JsonPropertyName("validationResults")]
    public List<WorkflowValidationResult> ValidationResults { get; init; } = new();
    
    /// <summary>
    /// Step execution metadata.
    /// </summary>
    [JsonPropertyName("metadata")]
    public Dictionary<string, string> Metadata { get; init; } = new();
}

/// <summary>
/// Execution status for individual workflow steps.
/// </summary>
public enum WorkflowStepStatus
{
    /// <summary>
    /// Step execution is pending.
    /// </summary>
    Pending,
    
    /// <summary>
    /// Step is currently executing.
    /// </summary>
    Running,
    
    /// <summary>
    /// Step execution completed successfully.
    /// </summary>
    Success,
    
    /// <summary>
    /// Step execution failed.
    /// </summary>
    Failed,
    
    /// <summary>
    /// Step execution was skipped.
    /// </summary>
    Skipped
}

/// <summary>
/// Results from validating a workflow step execution.
/// </summary>
public record WorkflowValidationResult
{
    /// <summary>
    /// Name of the validation rule.
    /// </summary>
    [JsonPropertyName("ruleName")]
    public string RuleName { get; init; } = string.Empty;
    
    /// <summary>
    /// Whether the validation passed.
    /// </summary>
    [JsonPropertyName("passed")]
    public bool Passed { get; init; }
    
    /// <summary>
    /// Expected value for the validation.
    /// </summary>
    [JsonPropertyName("expectedValue")]
    public string ExpectedValue { get; init; } = string.Empty;
    
    /// <summary>
    /// Actual value found during validation.
    /// </summary>
    [JsonPropertyName("actualValue")]
    public string ActualValue { get; init; } = string.Empty;
    
    /// <summary>
    /// Error or success message from validation.
    /// </summary>
    [JsonPropertyName("message")]
    public string Message { get; init; } = string.Empty;
}