name: Release

on:
  push:
    tags: ['v*.*.*']

env:
  DOTNET_VERSION: '8.0.x'
  PIDGEON_CLI_PROJECT: 'pidgeon/src/Pidgeon.CLI/Pidgeon.CLI.csproj'

jobs:
  build:
    name: Build ${{ matrix.rid }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rid: linux-x64
            archive_cmd: 'tar -czf'
            archive_ext: 'tar.gz'
          - os: ubuntu-latest
            rid: linux-arm64
            archive_cmd: 'tar -czf'
            archive_ext: 'tar.gz'
          - os: macos-latest
            rid: osx-x64
            archive_cmd: 'tar -czf'
            archive_ext: 'tar.gz'
          - os: macos-latest
            rid: osx-arm64
            archive_cmd: 'tar -czf'
            archive_ext: 'tar.gz'
          - os: windows-latest
            rid: win-x64
            archive_cmd: '7z a'
            archive_ext: 'zip'
          - os: windows-latest
            rid: win-arm64
            archive_cmd: '7z a'
            archive_ext: 'zip'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Extract version
      id: version
      shell: bash
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Build self-contained binary
      run: |
        dotnet publish ${{ env.PIDGEON_CLI_PROJECT }} \
          --configuration Release \
          --runtime ${{ matrix.rid }} \
          --output ./dist/${{ matrix.rid }} \
          --self-contained true \
          /p:Version=${{ steps.version.outputs.version }} \
          /p:PublishSingleFile=true \
          /p:EnableCompressionInSingleFile=true \
          /p:DebugType=embedded \
          /p:PublishTrimmed=false \
          /p:PublishReadyToRun=true

    # Phase 0: Code signing (commented out until certificates acquired)
    # - name: Code Sign Windows Binary
    #   if: matrix.rid == 'win-x64' || matrix.rid == 'win-arm64'
    #   run: |
    #     signtool sign /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 \
    #       /f ${{ secrets.WIN_CERT_PATH }} /p ${{ secrets.WIN_CERT_PASS }} \
    #       ./dist/${{ matrix.rid }}/pidgeon.exe

    # - name: Code Sign macOS Binary
    #   if: matrix.rid == 'osx-x64' || matrix.rid == 'osx-arm64'
    #   run: |
    #     codesign --sign "${{ secrets.APPLE_DEVELOPER_ID }}" \
    #       --options runtime \
    #       --timestamp \
    #       ./dist/${{ matrix.rid }}/pidgeon

    # - name: Notarize macOS Binary
    #   if: matrix.rid == 'osx-x64' || matrix.rid == 'osx-arm64'
    #   run: |
    #     ditto -c -k --keepParent ./dist/${{ matrix.rid }}/pidgeon pidgeon-temp.zip
    #     xcrun notarytool submit pidgeon-temp.zip \
    #       --apple-id ${{ secrets.APPLE_ID }} \
    #       --password ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }} \
    #       --team-id ${{ secrets.APPLE_TEAM_ID }} \
    #       --wait
    #     xcrun stapler staple ./dist/${{ matrix.rid }}/pidgeon

    - name: Create completions
      shell: bash
      run: |
        mkdir -p ./dist/${{ matrix.rid }}/completions
        cd ./dist/${{ matrix.rid }}

        # Generate shell completions
        if [[ "${{ matrix.rid }}" == win-* ]]; then
          ./pidgeon.exe completions bash > completions/pidgeon.bash
          ./pidgeon.exe completions zsh > completions/_pidgeon
          ./pidgeon.exe completions fish > completions/pidgeon.fish
          ./pidgeon.exe completions powershell > completions/pidgeon.ps1
        else
          ./pidgeon completions bash > completions/pidgeon.bash
          ./pidgeon completions zsh > completions/_pidgeon
          ./pidgeon completions fish > completions/pidgeon.fish
        fi

    - name: Add install channel marker
      shell: bash
      run: |
        cd ./dist/${{ matrix.rid }}
        echo '{"channel": "direct", "version": "${{ steps.version.outputs.version }}"}' > install.json

    - name: Create archive
      shell: bash
      run: |
        cd ./dist/${{ matrix.rid }}
        ARCHIVE_NAME="pidgeon-${{ matrix.rid }}.${{ matrix.archive_ext }}"

        if [[ "${{ matrix.rid }}" == win-* ]]; then
          # Windows: ZIP archive
          7z a "../../$ARCHIVE_NAME" *
        else
          # Unix: TAR.GZ archive
          tar -czf "../../$ARCHIVE_NAME" *
        fi

        echo "Created: $ARCHIVE_NAME"
        ls -lah "../../$ARCHIVE_NAME"

    - name: Generate checksum
      shell: bash
      run: |
        ARCHIVE_NAME="pidgeon-${{ matrix.rid }}.${{ matrix.archive_ext }}"
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          certutil -hashfile "$ARCHIVE_NAME" SHA256 | find /v ":" | find /v "CertUtil" > "${ARCHIVE_NAME}.sha256"
        else
          shasum -a 256 "$ARCHIVE_NAME" > "${ARCHIVE_NAME}.sha256"
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: pidgeon-${{ matrix.rid }}
        path: |
          pidgeon-${{ matrix.rid }}.${{ matrix.archive_ext }}
          pidgeon-${{ matrix.rid }}.${{ matrix.archive_ext }}.sha256
        retention-days: 90

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find dist -name "pidgeon-*" -type f | while read file; do
          cp "$file" release-assets/
        done
        ls -la release-assets/

    - name: Generate master checksums
      run: |
        cd release-assets
        sha256sum pidgeon-*.tar.gz pidgeon-*.zip > checksums.txt
        echo "Master checksums file:"
        cat checksums.txt

    - name: Generate checksums.json for npm wrapper
      run: |
        cd release-assets
        node <<'EOF'
        const fs = require('fs');
        const version = '${{ steps.version.outputs.version }}';
        const checksums = fs.readFileSync('checksums.txt', 'utf8').trim().split('\n');

        const map = {};
        checksums.forEach(line => {
          const [hash, filename] = line.split(/\s+/);
          if (filename.includes('linux-x64')) map['linux-x64'] = hash;
          if (filename.includes('linux-arm64')) map['linux-arm64'] = hash;
          if (filename.includes('osx-x64')) map['darwin-x64'] = hash;
          if (filename.includes('osx-arm64')) map['darwin-arm64'] = hash;
          if (filename.includes('win-x64')) map['win32-x64'] = hash;
          if (filename.includes('win-arm64')) map['win32-arm64'] = hash;
        });

        const obj = {};
        obj[`v${version}`] = map;
        fs.writeFileSync('checksums.json', JSON.stringify(obj, null, 2));
        console.log('Generated checksums.json:', JSON.stringify(obj, null, 2));
        EOF

    - name: Create release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## Pidgeon CLI v${{ steps.version.outputs.version }}

        **Healthcare message testing and validation CLI**

        ### What's New in this Release
        - Self-contained executables for all major platforms
        - No runtime dependencies - download and run
        - Cross-platform shell completions included
        - SHA256 checksums for integrity verification

        ### Installation

        **Quick Install (Unix):**
        ```bash
        curl -fsSL https://get.pidgeon.health/install.sh | bash
        ```

        **Manual Download:**
        1. Download the appropriate archive for your platform
        2. Extract the archive
        3. Run `pidgeon --help` to get started

        ### Platforms Supported

        | Platform | Architecture | Download |
        |----------|-------------|----------|
        | Windows | x64 | `pidgeon-win-x64.zip` |
        | Windows | ARM64 | `pidgeon-win-arm64.zip` |
        | macOS | x64 (Intel) | `pidgeon-osx-x64.tar.gz` |
        | macOS | ARM64 (Apple Silicon) | `pidgeon-osx-arm64.tar.gz` |
        | Linux | x64 | `pidgeon-linux-x64.tar.gz` |
        | Linux | ARM64 | `pidgeon-linux-arm64.tar.gz` |

        ### Quick Start
        ```bash
        # Generate HL7 messages
        pidgeon generate message --type ADT^A01 --count 5

        # Validate messages
        pidgeon validate --file sample.hl7

        # De-identify PHI
        pidgeon deident --in ./samples --out ./cleaned

        # Analyze vendor patterns
        pidgeon config analyze --samples ./messages
        ```

        ### Verification
        All binaries are provided with SHA256 checksums. Verify downloads:

        ```bash
        # Unix
        shasum -a 256 -c pidgeon-linux-x64.tar.gz.sha256

        # Windows
        certutil -hashfile pidgeon-win-x64.zip SHA256
        ```

        ### Shell Completions
        Each archive includes shell completions for bash, zsh, fish, and PowerShell.

        ### Healthcare Standards
        - **HL7 v2.3/v2.4**: ADT, ORU, ORM, RDE message types
        - **FHIR R4**: Patient, Encounter, Observation resources
        - **NCPDP SCRIPT**: NewRx, Refill, Cancel transactions

        ---

        **Documentation**: https://docs.pidgeon.health
        **Issues**: https://github.com/PidgeonHealth/pidgeon/issues
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Pidgeon CLI v${{ steps.version.outputs.version }}
        body_path: release_notes.md
        files: |
          release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-releases:
    name: Test Release ${{ matrix.rid }}
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rid: linux-x64
            archive_ext: tar.gz
          - os: macos-latest
            rid: osx-x64
            archive_ext: tar.gz
          - os: windows-latest
            rid: win-x64
            archive_ext: zip

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: pidgeon-${{ matrix.rid }}
        path: ./test

    - name: Extract and test
      shell: bash
      run: |
        cd test

        # Extract archive
        if [[ "${{ matrix.archive_ext }}" == "zip" ]]; then
          unzip "pidgeon-${{ matrix.rid }}.zip"
        else
          tar -xzf "pidgeon-${{ matrix.rid }}.tar.gz"
        fi

        # Make executable on Unix
        if [[ "${{ runner.os }}" != "Windows" ]]; then
          chmod +x pidgeon
          BINARY="./pidgeon"
        else
          BINARY="./pidgeon.exe"
        fi

        # Test basic functionality
        echo "Testing version:"
        $BINARY --version

        echo "Testing help:"
        $BINARY --help

        echo "Testing generate:"
        $BINARY generate message --type ADT^A01 --count 1

        echo "✅ All tests passed for ${{ matrix.rid }}"