name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'pidgeon/src/Pidgeon.CLI/Pidgeon.CLI.csproj'

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            runtime: linux-x64
            artifact_name: pidgeon-linux-x64
            executable_name: Pidgeon.CLI
          - os: windows-latest
            runtime: win-x64
            artifact_name: pidgeon-windows-x64
            executable_name: Pidgeon.CLI.exe
          - os: macos-latest
            runtime: osx-x64
            artifact_name: pidgeon-macos-x64
            executable_name: Pidgeon.CLI

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build and publish
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} \
          --configuration Release \
          --runtime ${{ matrix.runtime }} \
          --self-contained true \
          --output ./dist/${{ matrix.runtime }}

    - name: Create distribution package
      shell: bash
      run: |
        cd ./dist/${{ matrix.runtime }}
        
        # Create checksums
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          certutil -hashfile ${{ matrix.executable_name }} SHA256 > ${{ matrix.executable_name }}.sha256
        else
          shasum -a 256 ${{ matrix.executable_name }} > ${{ matrix.executable_name }}.sha256
        fi
        
        # Create archive
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a ../../${{ matrix.artifact_name }}.zip ${{ matrix.executable_name }} ${{ matrix.executable_name }}.sha256
        else
          tar -czf ../../${{ matrix.artifact_name }}.tar.gz ${{ matrix.executable_name }} ${{ matrix.executable_name }}.sha256
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          ${{ matrix.artifact_name }}.*
        retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p ./release-assets
        find ./artifacts -name "pidgeon-*" -type f | while read file; do
          cp "$file" ./release-assets/
        done
        ls -la ./release-assets/

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Create release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## Pidgeon Healthcare Platform v${{ steps.version.outputs.version }}
        
        ### What's New
        - Complete P0 MVP with all 6 core features
        - AI-powered message analysis with local models
        - Cross-platform self-contained executables
        - No runtime dependencies required
        
        ### Installation
        
        **Windows:**
        ```powershell
        # Download and extract pidgeon-windows-x64.zip
        # Run: pidgeon.exe --help
        ```
        
        **macOS:**
        ```bash
        # Download and extract pidgeon-macos-x64.tar.gz
        chmod +x pidgeon
        ./pidgeon --help
        ```
        
        **Linux:**
        ```bash
        # Download and extract pidgeon-linux-x64.tar.gz
        chmod +x pidgeon
        ./pidgeon --help
        ```
        
        ### Quick Start
        ```bash
        # Generate your first HL7 message
        pidgeon generate "ADT^A01"
        
        # Validate a message file
        pidgeon validate --file message.hl7
        
        # Interactive workflow wizard (Pro feature)
        pidgeon workflow wizard
        ```
        
        ### What's Included
        - **Generation Engine**: HL7, FHIR, NCPDP message generation
        - **Validation Engine**: Multi-standard validation with vendor patterns
        - **De-identification**: On-premises PHI removal with referential integrity
        - **Vendor Detection**: Smart pattern inference for Epic, Cerner, AllScripts
        - **Workflow Wizard**: Interactive multi-step scenario creation
        - **AI Diff**: Intelligent message comparison with suggestions
        
        ### Verification
        All binaries include SHA256 checksums for integrity verification.
        
        ### Healthcare Standards Supported
        - **HL7 v2.3/v2.4**: ADT, ORU, ORM, RDE message types
        - **FHIR R4**: Patient, Encounter, Observation, Medication resources
        - **NCPDP SCRIPT**: NewRx, Refill, Cancel transactions
        
        ---
        
        **Full Documentation**: https://docs.pidgeon.dev  
        **Community Support**: https://github.com/pidgeon-health/pidgeon/discussions
        EOF
        
        echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Pidgeon Healthcare Platform v${{ steps.version.outputs.version }}
        body_path: ${{ steps.release_notes.outputs.notes_file }}
        files: |
          ./release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-executables:
    name: Test Executables
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: pidgeon-linux-x64
            executable_name: Pidgeon.CLI
          - os: windows-latest
            artifact_name: pidgeon-windows-x64
            executable_name: Pidgeon.CLI.exe
          - os: macos-latest
            artifact_name: pidgeon-macos-x64
            executable_name: Pidgeon.CLI

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ./test-dist

    - name: Extract and test executable
      shell: bash
      run: |
        cd ./test-dist
        
        # Extract archive
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z x ${{ matrix.artifact_name }}.zip
        else
          tar -xzf ${{ matrix.artifact_name }}.tar.gz
        fi
        
        # Make executable (Unix systems)
        if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
          chmod +x ${{ matrix.executable_name }}
        fi
        
        # Test basic functionality
        echo "Testing version command:"
        ./${{ matrix.executable_name }} --version
        
        echo "Testing help command:"
        ./${{ matrix.executable_name }} --help
        
        echo "Testing generate command:"
        ./${{ matrix.executable_name }} generate "ADT^A01" --count 1
        
        echo "All tests passed for ${{ matrix.os }}"