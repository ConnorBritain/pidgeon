// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Segmint.Core.HL7;
using Segmint.Core.HL7.Messages;
using Segmint.Core.HL7.Segments;

namespace Segmint.Core.HL7.Validation;

/// <summary>
/// Base class for message validators.
/// </summary>
public abstract class BaseMessageValidator : BaseValidator<HL7Message>, IMessageValidator
{
    /// <inheritdoc />
    public abstract IEnumerable<string> SupportedMessageTypes { get; }
    
    /// <inheritdoc />
    public virtual bool CanValidate(HL7Message message)
    {
        return SupportedMessageTypes.Contains(message.MessageType);
    }
    
    /// <inheritdoc />
    public override ValidationResult Validate(HL7Message message)
    {
        if (!CanValidate(message))
        {
            return ValidationResult.Success();
        }
        
        var issues = new List<ValidationIssue>();
        
        // Basic message validation
        var basicIssues = ValidateBasicMessage(message);
        issues.AddRange(basicIssues);
        
        // Message-specific validation
        var messageIssues = ValidateMessageType(message);
        issues.AddRange(messageIssues);
        
        return CreateResult(issues);
    }
    
    /// <summary>
    /// Validates basic message properties.
    /// </summary>
    /// <param name="message">The message to validate.</param>
    /// <returns>A list of validation issues.</returns>
    protected virtual List<ValidationIssue> ValidateBasicMessage(HL7Message message)
    {
        var issues = new List<ValidationIssue>();
        
        // Validate message header
        if (message.MessageHeader == null)
        {
            issues.Add(SyntaxError("MSG001", "Message header is required", "MSH"));
        }
        else
        {
            // Validate required header fields
            if (message.MessageHeader.SendingApplication.IsEmpty)
            {
                issues.Add(SemanticError("MSG002", 
                    "Sending application is required", "MSH.3"));
            }
            
            if (message.MessageHeader.ReceivingApplication.IsEmpty)
            {
                issues.Add(SemanticError("MSG003", 
                    "Receiving application is required", "MSH.5"));
            }
            
            if (message.MessageHeader.MessageControlId.IsEmpty)
            {
                issues.Add(SemanticError("MSG004", 
                    "Message control ID is required", "MSH.10"));
            }
            
            if (message.MessageHeader.ProcessingId.IsEmpty)
            {
                issues.Add(SemanticError("MSG005", 
                    "Processing ID is required", "MSH.11"));
            }
            
            if (message.MessageHeader.VersionId.IsEmpty)
            {
                issues.Add(SemanticError("MSG006", 
                    "Version ID is required", "MSH.12"));
            }
            
            // Validate message type consistency
            if (!message.MessageHeader.MessageType.IsEmpty)
            {
                var messageType = message.MessageHeader.MessageType.MessageType;
                if (messageType != message.MessageType)
                {
                    issues.Add(SemanticError("MSG007", 
                        $"Message type mismatch: header='{messageType}', message='{message.MessageType}'", "MSH.9"));
                }
            }
        }
        
        // Validate minimum segment count
        if (message.SegmentCount < 1)
        {
            issues.Add(SyntaxError("MSG008", 
                "Message must contain at least one segment", "Message"));
        }
        
        // Validate segment order
        var segmentOrder = ValidateSegmentOrder(message);
        issues.AddRange(segmentOrder);
        
        return issues;
    }
    
    /// <summary>
    /// Validates message type-specific properties.
    /// </summary>
    /// <param name="message">The message to validate.</param>
    /// <returns>A list of validation issues.</returns>
    protected abstract List<ValidationIssue> ValidateMessageType(HL7Message message);
    
    /// <summary>
    /// Validates segment order within the message.
    /// </summary>
    /// <param name="message">The message to validate.</param>
    /// <returns>A list of validation issues.</returns>
    protected virtual List<ValidationIssue> ValidateSegmentOrder(HL7Message message)
    {
        var issues = new List<ValidationIssue>();
        
        // First segment must be MSH
        if (message.SegmentCount > 0 && message.GetSegment(0)?.SegmentId != "MSH")
        {
            issues.Add(SyntaxError("MSG009", 
                "First segment must be MSH", "Message"));
        }
        
        return issues;
    }
}

/// <summary>
/// Validator for RDE (Pharmacy/Treatment Encoded Order) messages.
/// </summary>
public class RDEMessageValidator : BaseMessageValidator
{
    /// <inheritdoc />
    public override IEnumerable<ValidationType> SupportedTypes => 
        [ValidationType.Syntax, ValidationType.Semantic, ValidationType.Clinical, ValidationType.Interface];
    
    /// <inheritdoc />
    public override IEnumerable<string> SupportedMessageTypes => ["RDE"];
    
    /// <inheritdoc />
    protected override List<ValidationIssue> ValidateMessageType(HL7Message message)
    {
        var issues = new List<ValidationIssue>();
        
        if (message is RDEMessage rdeMessage)
        {
            // Validate required segments
            if (rdeMessage.PatientIdentification == null)
            {
                issues.Add(SemanticError("RDE001", 
                    "Patient identification (PID) segment is required", "PID"));
            }
            
            if (rdeMessage.CommonOrder == null)
            {
                issues.Add(SemanticError("RDE002", 
                    "Common order (ORC) segment is required", "ORC"));
            }
            
            if (rdeMessage.PharmacyTreatmentEncodedOrder == null)
            {
                issues.Add(SemanticError("RDE003", 
                    "Pharmacy treatment encoded order (RXE) segment is required", "RXE"));
            }
            
            // Validate patient demographics
            if (rdeMessage.PatientIdentification != null)
            {
                if (rdeMessage.PatientIdentification.PatientName.IsEmpty)
                {
                    issues.Add(SemanticError("RDE004", 
                        "Patient name is required", "PID.5"));
                }
                
                if (rdeMessage.PatientIdentification.PatientIdList.IsEmpty)
                {
                    issues.Add(SemanticError("RDE005", 
                        "Patient ID is required", "PID.3"));
                }
            }
            
            // Validate order information
            if (rdeMessage.CommonOrder != null)
            {
                if (rdeMessage.CommonOrder.OrderControl.IsEmpty)
                {
                    issues.Add(SemanticError("RDE006", 
                        "Order control is required", "ORC.1"));
                }
                
                // Validate order control for pharmacy orders
                if (!rdeMessage.CommonOrder.OrderControl.IsEmpty)
                {
                    var validControls = new[] { "NW", "RE", "CA", "DC", "OC", "CR", "UA" };
                    if (!validControls.Contains(rdeMessage.CommonOrder.OrderControl.RawValue))
                    {
                        issues.Add(ClinicalWarning("RDE007", 
                            $"Order control '{rdeMessage.CommonOrder.OrderControl.RawValue}' is unusual for pharmacy orders", "ORC.1")
                            .WithValues(rdeMessage.CommonOrder.OrderControl.RawValue, "Common values: NW, RE, CA, DC"));
                    }
                }
            }
            
            // Validate medication information
            if (rdeMessage.PharmacyTreatmentEncodedOrder != null)
            {
                if (rdeMessage.PharmacyTreatmentEncodedOrder.GiveCode.IsEmpty)
                {
                    issues.Add(SemanticError("RDE008", 
                        "Medication code is required", "RXE.2"));
                }
                
                if (rdeMessage.PharmacyTreatmentEncodedOrder.GiveAmountMinimum.IsEmpty)
                {
                    issues.Add(SemanticError("RDE009", 
                        "Give amount is required", "RXE.3"));
                }
                
                if (rdeMessage.PharmacyTreatmentEncodedOrder.GiveUnits.IsEmpty)
                {
                    issues.Add(SemanticError("RDE010", 
                        "Give units are required", "RXE.5"));
                }
                
                // Validate dosage form
                if (!rdeMessage.PharmacyTreatmentEncodedOrder.DosageForm.IsEmpty)
                {
                    var commonForms = new[] { "TAB", "CAP", "SYR", "INJ", "CRE", "OIN", "SOL", "SUS", "LOZ", "SUP" };
                    if (!commonForms.Contains(rdeMessage.PharmacyTreatmentEncodedOrder.DosageForm.RawValue))
                    {
                        issues.Add(ClinicalWarning("RDE011", 
                            $"Unusual dosage form: {rdeMessage.PharmacyTreatmentEncodedOrder.DosageForm.RawValue}", "RXE.6")
                            .WithValues(rdeMessage.PharmacyTreatmentEncodedOrder.DosageForm.RawValue, "Verify dosage form is correct"));
                    }
                }
            }
            
            // Validate clinical consistency
            if (rdeMessage.CommonOrder != null && rdeMessage.PharmacyTreatmentEncodedOrder != null)
            {
                // Check for conflicting order controls
                if (rdeMessage.CommonOrder.OrderControl.RawValue == "CA" && 
                    !rdeMessage.PharmacyTreatmentEncodedOrder.GiveCode.IsEmpty)
                {
                    issues.Add(ClinicalWarning("RDE012", 
                        "Cancelled order contains medication information", "RXE.2")
                        .WithSuggestion("Cancelled orders typically should not contain medication details"));
                }
                
                // Check for discontinued orders with future dates
                if (rdeMessage.CommonOrder.OrderControl.RawValue == "DC" && 
                    !rdeMessage.PharmacyTreatmentEncodedOrder.DateTimeOfFirstDose.IsEmpty &&
                    rdeMessage.PharmacyTreatmentEncodedOrder.DateTimeOfFirstDose.Value.HasValue &&
                    rdeMessage.PharmacyTreatmentEncodedOrder.DateTimeOfFirstDose.Value.Value > DateTime.Now)
                {
                    issues.Add(ClinicalWarning("RDE013", 
                        "Discontinued order has future start date", "RXE.9")
                        .WithSuggestion("Verify order control and timing are correct"));
                }
            }
        }
        
        return issues;
    }
}

/// <summary>
/// Validator for ADT (Admit/Discharge/Transfer) messages.
/// </summary>
public class ADTMessageValidator : BaseMessageValidator
{
    /// <inheritdoc />
    public override IEnumerable<ValidationType> SupportedTypes => 
        [ValidationType.Syntax, ValidationType.Semantic, ValidationType.Clinical, ValidationType.Interface];
    
    /// <inheritdoc />
    public override IEnumerable<string> SupportedMessageTypes => ["ADT"];
    
    /// <inheritdoc />
    protected override List<ValidationIssue> ValidateMessageType(HL7Message message)
    {
        var issues = new List<ValidationIssue>();
        
        if (message is ADTMessage adtMessage)
        {
            // Validate required segments
            if (adtMessage.PatientIdentification == null)
            {
                issues.Add(SemanticError("ADT001", 
                    "Patient identification (PID) segment is required", "PID"));
            }
            
            if (adtMessage.PatientVisit == null)
            {
                issues.Add(SemanticError("ADT002", 
                    "Patient visit (PV1) segment is required", "PV1"));
            }
            
            // Validate patient demographics
            if (adtMessage.PatientIdentification != null)
            {
                if (adtMessage.PatientIdentification.PatientName.IsEmpty)
                {
                    issues.Add(SemanticError("ADT003", 
                        "Patient name is required", "PID.5"));
                }
                
                if (adtMessage.PatientIdentification.PatientIdList.IsEmpty)
                {
                    issues.Add(SemanticError("ADT004", 
                        "Patient ID is required", "PID.3"));
                }
                
                // Validate medical record number
                if (adtMessage.PatientIdentification.PatientIdList.IdentifierTypeCode != "MR")
                {
                    issues.Add(ClinicalWarning("ADT005", 
                        "Patient ID type is not medical record number", "PID.3")
                        .WithSuggestion("Consider using MR for medical record numbers"));
                }
            }
            
            // Validate visit information
            if (adtMessage.PatientVisit != null)
            {
                if (adtMessage.PatientVisit.PatientClass.IsEmpty)
                {
                    issues.Add(SemanticError("ADT006", 
                        "Patient class is required", "PV1.2"));
                }
                
                // Validate trigger event specific requirements
                var triggerEvent = adtMessage.TriggerEvent;
                
                if (triggerEvent == "A01" || triggerEvent == "A04") // Admit patient
                {
                    if (adtMessage.PatientVisit.AdmitDateTime.IsEmpty)
                    {
                        issues.Add(SemanticError("ADT007", 
                            "Admit date/time is required for admission events", "PV1.44"));
                    }
                    
                    if (adtMessage.PatientVisit.PatientClass.RawValue == "O")
                    {
                        issues.Add(ClinicalWarning("ADT008", 
                            "Outpatient class unusual for admission event", "PV1.2")
                            .WithSuggestion("Verify patient class is correct"));
                    }
                }
                
                if (triggerEvent == "A03" || triggerEvent == "A16") // Discharge patient
                {
                    if (adtMessage.PatientVisit.DischargeDateTime.IsEmpty)
                    {
                        issues.Add(SemanticError("ADT009", 
                            "Discharge date/time is required for discharge events", "PV1.45"));
                    }
                    
                    if (adtMessage.PatientVisit.DischargeDisposition.IsEmpty)
                    {
                        issues.Add(ClinicalWarning("ADT010", 
                            "Discharge disposition is recommended for discharge events", "PV1.36"));
                    }
                }
                
                if (triggerEvent == "A02" || triggerEvent == "A06" || triggerEvent == "A07") // Transfer patient
                {
                    if (adtMessage.PatientVisit.AssignedPatientLocation.IsEmpty)
                    {
                        issues.Add(SemanticError("ADT011", 
                            "Patient location is required for transfer events", "PV1.3"));
                    }
                    
                    if (adtMessage.PatientVisit.PriorPatientLocation.IsEmpty)
                    {
                        issues.Add(ClinicalWarning("ADT012", 
                            "Prior patient location is recommended for transfer events", "PV1.6"));
                    }
                }
                
                // Validate chronological order
                if (!adtMessage.PatientVisit.AdmitDateTime.IsEmpty && 
                    !adtMessage.PatientVisit.DischargeDateTime.IsEmpty &&
                    adtMessage.PatientVisit.AdmitDateTime.Value.HasValue &&
                    adtMessage.PatientVisit.DischargeDateTime.Value.HasValue)
                {
                    if (adtMessage.PatientVisit.DischargeDateTime.Value.Value < adtMessage.PatientVisit.AdmitDateTime.Value.Value)
                    {
                        issues.Add(ClinicalWarning("ADT013", 
                            "Discharge date is before admission date", "PV1.45")
                            .WithSuggestion("Verify chronological order of events"));
                    }
                }
            }
            
            // Validate event type consistency
            if (!string.IsNullOrEmpty(triggerEvent))
            {
                var validEvents = new[] { "A01", "A02", "A03", "A04", "A05", "A06", "A07", "A08", "A09", "A10", "A11", "A12", "A13", "A16", "A17", "A18", "A21", "A22", "A23", "A24", "A25", "A26", "A27", "A28", "A29", "A31", "A32", "A33", "A34", "A35", "A36", "A37", "A38", "A40", "A41", "A42", "A43", "A44", "A45", "A46", "A47", "A48", "A49", "A50", "A51", "A52", "A53", "A54", "A55", "A60", "A61", "A62" };
                if (!validEvents.Contains(triggerEvent))
                {
                    issues.Add(SemanticError("ADT014", 
                        $"Invalid ADT trigger event: {triggerEvent}", "MSH.9")
                        .WithValues(triggerEvent, "See HL7 Table 0003 for valid ADT events"));
                }
            }
        }
        
        return issues;
    }
}

/// <summary>
/// Validator for ACK (Acknowledgment) messages.
/// </summary>
public class ACKMessageValidator : BaseMessageValidator
{
    /// <inheritdoc />
    public override IEnumerable<ValidationType> SupportedTypes => 
        [ValidationType.Syntax, ValidationType.Semantic, ValidationType.Interface];
    
    /// <inheritdoc />
    public override IEnumerable<string> SupportedMessageTypes => ["ACK"];
    
    /// <inheritdoc />
    protected override List<ValidationIssue> ValidateMessageType(HL7Message message)
    {
        var issues = new List<ValidationIssue>();
        
        if (message is ACKMessage ackMessage)
        {
            // Validate required segments
            if (ackMessage.MessageAcknowledgment == null)
            {
                issues.Add(SemanticError("ACK001", 
                    "Message acknowledgment (MSA) segment is required", "MSA"));
            }
            
            // Validate acknowledgment fields
            if (ackMessage.MessageAcknowledgment != null)
            {
                if (ackMessage.MessageAcknowledgment.AcknowledgmentCode.IsEmpty)
                {
                    issues.Add(SemanticError("ACK002", 
                        "Acknowledgment code is required", "MSA.1"));
                }
                
                if (ackMessage.MessageAcknowledgment.MessageControlId.IsEmpty)
                {
                    issues.Add(SemanticError("ACK003", 
                        "Message control ID is required", "MSA.2"));
                }
                
                // Validate acknowledgment code
                if (!ackMessage.MessageAcknowledgment.AcknowledgmentCode.IsEmpty)
                {
                    var validCodes = new[] { "AA", "AE", "AR", "CA", "CE", "CR" };
                    if (!validCodes.Contains(ackMessage.MessageAcknowledgment.AcknowledgmentCode.RawValue))
                    {
                        issues.Add(SemanticError("ACK004", 
                            $"Invalid acknowledgment code: {ackMessage.MessageAcknowledgment.AcknowledgmentCode.RawValue}", "MSA.1")
                            .WithValues(ackMessage.MessageAcknowledgment.AcknowledgmentCode.RawValue, "Valid codes: AA, AE, AR, CA, CE, CR"));
                    }
                }
                
                // Validate error condition for error acknowledgments
                var ackCode = ackMessage.MessageAcknowledgment.AcknowledgmentCode.RawValue;
                if (ackCode == "AE" || ackCode == "AR" || ackCode == "CE" || ackCode == "CR")
                {
                    if (ackMessage.MessageAcknowledgment.ErrorCondition.IsEmpty)
                    {
                        issues.Add(InterfaceError("ACK005", 
                            "Error condition is required for error acknowledgments", "MSA.6")
                            .WithSuggestion("Provide error condition for error acknowledgments"));
                    }
                    
                    if (ackMessage.MessageAcknowledgment.TextMessage.IsEmpty)
                    {
                        issues.Add(ClinicalWarning("ACK006", 
                            "Text message is recommended for error acknowledgments", "MSA.3")
                            .WithSuggestion("Provide descriptive error message"));
                    }
                }
                
                // Validate successful acknowledgments
                if (ackCode == "AA" || ackCode == "CA")
                {
                    if (!ackMessage.MessageAcknowledgment.ErrorCondition.IsEmpty)
                    {
                        issues.Add(InterfaceError("ACK007", 
                            "Error condition should not be present for successful acknowledgments", "MSA.6")
                            .WithSuggestion("Remove error condition for successful acknowledgments"));
                    }
                }
            }
            
            // Validate message structure
            if (ackMessage.SegmentCount < 2)
            {
                issues.Add(SyntaxError("ACK008", 
                    "ACK message must contain at least MSH and MSA segments", "Message"));
            }
            
            // Validate trigger event consistency
            if (ackMessage.MessageHeader != null && !ackMessage.MessageHeader.MessageType.IsEmpty)
            {
                var triggerEvent = ackMessage.MessageHeader.MessageType.TriggerEvent;
                if (string.IsNullOrEmpty(triggerEvent))
                {
                    issues.Add(SemanticError("ACK009", 
                        "Trigger event is required for ACK messages", "MSH.9")
                        .WithSuggestion("Specify the trigger event being acknowledged"));
                }
            }
        }
        
        return issues;
    }
}