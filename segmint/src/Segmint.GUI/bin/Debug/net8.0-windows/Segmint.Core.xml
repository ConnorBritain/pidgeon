<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Segmint.Core</name>
    </assembly>
    <members>
        <member name="T:Segmint.Core.Configuration.ConfigurationManager">
            <summary>
            Manages loading, saving, and validation of Segmint configuration files.
            </summary>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationManager.#ctor(Microsoft.Extensions.Logging.ILogger{Segmint.Core.Configuration.ConfigurationManager})">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.Configuration.ConfigurationManager"/> class.
            </summary>
            <param name="logger">Logger instance.</param>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationManager.LoadAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Loads configuration from a JSON file.
            </summary>
            <param name="filePath">Path to the configuration file.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The loaded configuration.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationManager.SaveAsync(Segmint.Core.Configuration.SegmintConfiguration,System.String,System.Threading.CancellationToken)">
            <summary>
            Saves configuration to a JSON file.
            </summary>
            <param name="configuration">The configuration to save.</param>
            <param name="filePath">Path where to save the configuration file.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationManager.ValidateConfiguration(Segmint.Core.Configuration.SegmintConfiguration)">
            <summary>
            Validates a configuration object.
            </summary>
            <param name="configuration">The configuration to validate.</param>
            <returns>List of validation issues found.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationManager.CreateDefault">
            <summary>
            Creates a default configuration with recommended settings.
            </summary>
            <returns>A new configuration with default values.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationManager.CompareConfigurations(Segmint.Core.Configuration.SegmintConfiguration,Segmint.Core.Configuration.SegmintConfiguration)">
            <summary>
            Compares two configurations and returns the differences.
            </summary>
            <param name="config1">First configuration.</param>
            <param name="config2">Second configuration.</param>
            <returns>List of differences found.</returns>
        </member>
        <member name="T:Segmint.Core.Configuration.ConfigurationService">
            <summary>
            Service for managing Segmint configuration operations.
            </summary>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationService.#ctor(Segmint.Core.Configuration.ConfigurationManager,Microsoft.Extensions.Logging.ILogger{Segmint.Core.Configuration.ConfigurationService})">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.Configuration.ConfigurationService"/> class.
            </summary>
            <param name="configurationManager">The configuration manager.</param>
            <param name="logger">Logger instance.</param>
        </member>
        <member name="P:Segmint.Core.Configuration.ConfigurationService.CurrentConfiguration">
            <summary>
            Gets the current configuration.
            </summary>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationService.LoadConfigurationAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Loads configuration from a file or creates default if file doesn't exist.
            </summary>
            <param name="filePath">Path to configuration file.</param>
            <param name="createIfMissing">Whether to create default config if file doesn't exist.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if configuration was loaded successfully.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationService.SaveConfigurationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Saves the current configuration to a file.
            </summary>
            <param name="filePath">Path where to save the configuration.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if configuration was saved successfully.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationService.CreateFromTemplate(System.String,System.Boolean)">
            <summary>
            Creates a new configuration from a template.
            </summary>
            <param name="templateName">The template name.</param>
            <param name="setAsCurrent">Whether to set as current configuration.</param>
            <returns>The created configuration.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationService.CreateFromTemplateAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a new configuration from a template and saves it to a file.
            </summary>
            <param name="templateName">The template name.</param>
            <param name="filePath">Path where to save the configuration.</param>
            <param name="setAsCurrent">Whether to set as current configuration.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>True if configuration was created and saved successfully.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationService.ValidateCurrentConfiguration">
            <summary>
            Validates the current configuration.
            </summary>
            <returns>List of validation issues.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationService.ValidateConfigurationFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Validates a configuration file.
            </summary>
            <param name="filePath">Path to configuration file.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>List of validation issues.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationService.CompareConfigurationFilesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Compares two configuration files.
            </summary>
            <param name="filePath1">Path to first configuration file.</param>
            <param name="filePath2">Path to second configuration file.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>List of differences.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationService.GetAvailableTemplates">
            <summary>
            Gets available configuration templates.
            </summary>
            <returns>List of available template names.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationService.SetCurrentConfiguration(Segmint.Core.Configuration.SegmintConfiguration)">
            <summary>
            Sets the current configuration.
            </summary>
            <param name="configuration">The configuration to set as current.</param>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationService.ResetToDefault">
            <summary>
            Resets the current configuration to default.
            </summary>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationService.UpdateConfigurationSection(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates a specific configuration section.
            </summary>
            <param name="sectionName">The section name (HL7, Validation, Interface, etc.).</param>
            <param name="updates">Dictionary of property updates.</param>
            <returns>True if updates were applied successfully.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.ConfigurationService.GetConfigurationSummary">
            <summary>
            Gets configuration information as a formatted string.
            </summary>
            <returns>Configuration summary.</returns>
        </member>
        <member name="T:Segmint.Core.Configuration.SegmintConfiguration">
            <summary>
            Represents the main configuration for Segmint.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.SegmintConfiguration.HL7">
            <summary>
            Gets or sets the HL7 configuration.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.SegmintConfiguration.Validation">
            <summary>
            Gets or sets the validation configuration.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.SegmintConfiguration.Interface">
            <summary>
            Gets or sets the interface configuration.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.SegmintConfiguration.Logging">
            <summary>
            Gets or sets the logging configuration.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.SegmintConfiguration.Performance">
            <summary>
            Gets or sets the performance configuration.
            </summary>
        </member>
        <member name="T:Segmint.Core.Configuration.HL7Configuration">
            <summary>
            HL7 specific configuration settings.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.DefaultVersion">
            <summary>
            Gets or sets the default HL7 version.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.FieldSeparator">
            <summary>
            Gets or sets the field separator character.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.ComponentSeparator">
            <summary>
            Gets or sets the component separator character.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.RepetitionSeparator">
            <summary>
            Gets or sets the repetition separator character.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.EscapeCharacter">
            <summary>
            Gets or sets the escape character.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.SubcomponentSeparator">
            <summary>
            Gets or sets the subcomponent separator character.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.SegmentTerminator">
            <summary>
            Gets or sets the segment terminator.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.EncodingCharacters">
            <summary>
            Gets or sets the encoding characters string.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.DefaultSendingApplication">
            <summary>
            Gets or sets the default sending application.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.DefaultSendingFacility">
            <summary>
            Gets or sets the default sending facility.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.DefaultReceivingApplication">
            <summary>
            Gets or sets the default receiving application.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.DefaultReceivingFacility">
            <summary>
            Gets or sets the default receiving facility.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.DefaultProcessingId">
            <summary>
            Gets or sets the default processing ID.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.AutoGenerateControlId">
            <summary>
            Gets or sets whether to generate message control IDs automatically.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.ControlIdFormat">
            <summary>
            Gets or sets the control ID format.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.IncludeTimestamps">
            <summary>
            Gets or sets whether to include timestamps in messages.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.DefaultTimeZone">
            <summary>
            Gets or sets the timezone for timestamps.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.CustomFieldMappings">
            <summary>
            Gets or sets custom field mappings.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.HL7Configuration.CustomSegments">
            <summary>
            Gets or sets custom segment definitions.
            </summary>
        </member>
        <member name="T:Segmint.Core.Configuration.ValidationConfiguration">
            <summary>
            Validation configuration settings.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationConfiguration.EnabledTypes">
            <summary>
            Gets or sets the enabled validation types.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationConfiguration.EnabledValidationTypes">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationConfiguration.MaxIssues">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationConfiguration.StopOnFirstError">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationConfiguration.MinimumSeverity">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationConfiguration.StrictMode">
            <summary>
            Gets or sets whether to perform strict validation.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationConfiguration.ValidateFieldLengths">
            <summary>
            Gets or sets whether to validate field lengths.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationConfiguration.ValidateRequiredFields">
            <summary>
            Gets or sets whether to validate required fields.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationConfiguration.ValidateDataTypes">
            <summary>
            Gets or sets whether to validate data types.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationConfiguration.ValidateCodeTables">
            <summary>
            Gets or sets whether to validate against code tables.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationConfiguration.EnableClinicalValidation">
            <summary>
            Gets or sets whether to perform clinical validation.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationConfiguration.InterfaceRules">
            <summary>
            Gets or sets the interface-specific validation rules.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationConfiguration.ClinicalRules">
            <summary>
            Gets or sets the clinical validation rules.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationConfiguration.CustomRules">
            <summary>
            Gets or sets custom validation rules.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationConfiguration.Segmint#Core#HL7#Validation#IValidationConfiguration#InterfaceRules">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationConfiguration.Segmint#Core#HL7#Validation#IValidationConfiguration#ClinicalRules">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.Configuration.ValidationConfiguration.IsValidationTypeEnabled(Segmint.Core.HL7.Validation.ValidationType)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.Configuration.ValidationConfiguration.ShouldReportSeverity(Segmint.Core.HL7.Validation.ValidationSeverity)">
            <inheritdoc />
        </member>
        <member name="T:Segmint.Core.Configuration.InterfaceConfiguration">
            <summary>
            Interface configuration settings.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.InterfaceConfiguration.Name">
            <summary>
            Gets or sets the interface name.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.InterfaceConfiguration.Description">
            <summary>
            Gets or sets the interface description.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.InterfaceConfiguration.Version">
            <summary>
            Gets or sets the interface version.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.InterfaceConfiguration.SupportedMessageTypes">
            <summary>
            Gets or sets the supported message types.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.InterfaceConfiguration.SupportedTriggerEvents">
            <summary>
            Gets or sets the supported trigger events.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.InterfaceConfiguration.RequiredSegments">
            <summary>
            Gets or sets the required segments by message type.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.InterfaceConfiguration.OptionalSegments">
            <summary>
            Gets or sets the optional segments by message type.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.InterfaceConfiguration.MaxMessageSize">
            <summary>
            Gets or sets the maximum message size in bytes.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.InterfaceConfiguration.MaxSegmentsPerMessage">
            <summary>
            Gets or sets the maximum number of segments per message.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.InterfaceConfiguration.ConnectionTimeoutSeconds">
            <summary>
            Gets or sets the connection timeout in seconds.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.InterfaceConfiguration.Retry">
            <summary>
            Gets or sets the retry configuration.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.InterfaceConfiguration.CustomRules">
            <summary>
            Gets or sets custom interface rules.
            </summary>
        </member>
        <member name="T:Segmint.Core.Configuration.LoggingConfiguration">
            <summary>
            Logging configuration settings.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.LoggingConfiguration.MinimumLevel">
            <summary>
            Gets or sets the minimum log level.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.LoggingConfiguration.LogHL7Messages">
            <summary>
            Gets or sets whether to log HL7 messages.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.LoggingConfiguration.LogValidationResults">
            <summary>
            Gets or sets whether to log validation results.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.LoggingConfiguration.LogPerformanceMetrics">
            <summary>
            Gets or sets whether to log performance metrics.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.LoggingConfiguration.MaskSensitiveData">
            <summary>
            Gets or sets whether to mask sensitive data in logs.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.LoggingConfiguration.SensitiveFieldPatterns">
            <summary>
            Gets or sets the sensitive field patterns to mask.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.LoggingConfiguration.LogFilePath">
            <summary>
            Gets or sets the log file path.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.LoggingConfiguration.MaxLogFileSizeMB">
            <summary>
            Gets or sets the maximum log file size in MB.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.LoggingConfiguration.RetainedLogFileCount">
            <summary>
            Gets or sets the number of log files to retain.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.LoggingConfiguration.StructuredLogging">
            <summary>
            Gets or sets structured logging settings.
            </summary>
        </member>
        <member name="T:Segmint.Core.Configuration.PerformanceConfiguration">
            <summary>
            Performance configuration settings.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.PerformanceConfiguration.EnablePerformanceMonitoring">
            <summary>
            Gets or sets whether to enable performance monitoring.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.PerformanceConfiguration.MaxMemoryUsageMB">
            <summary>
            Gets or sets the maximum memory usage in MB.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.PerformanceConfiguration.ProcessingTimeoutSeconds">
            <summary>
            Gets or sets the message processing timeout in seconds.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.PerformanceConfiguration.MaxConcurrentOperations">
            <summary>
            Gets or sets the maximum concurrent operations.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.PerformanceConfiguration.EnableCaching">
            <summary>
            Gets or sets whether to enable caching.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.PerformanceConfiguration.CacheExpirationMinutes">
            <summary>
            Gets or sets the cache expiration time in minutes.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.PerformanceConfiguration.MaxCacheSizeMB">
            <summary>
            Gets or sets the maximum cache size in MB.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.PerformanceConfiguration.BatchProcessing">
            <summary>
            Gets or sets batch processing settings.
            </summary>
        </member>
        <member name="T:Segmint.Core.Configuration.RetryConfiguration">
            <summary>
            Retry configuration settings.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.RetryConfiguration.MaxAttempts">
            <summary>
            Gets or sets the maximum number of retry attempts.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.RetryConfiguration.InitialDelayMs">
            <summary>
            Gets or sets the initial delay between retries in milliseconds.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.RetryConfiguration.MaxDelayMs">
            <summary>
            Gets or sets the maximum delay between retries in milliseconds.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.RetryConfiguration.BackoffMultiplier">
            <summary>
            Gets or sets the backoff multiplier.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.RetryConfiguration.UseExponentialBackoff">
            <summary>
            Gets or sets whether to use exponential backoff.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.RetryConfiguration.JitterFactor">
            <summary>
            Gets or sets the jitter factor for randomizing delays.
            </summary>
        </member>
        <member name="T:Segmint.Core.Configuration.StructuredLoggingConfiguration">
            <summary>
            Structured logging configuration.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.StructuredLoggingConfiguration.Enabled">
            <summary>
            Gets or sets whether structured logging is enabled.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.StructuredLoggingConfiguration.OutputFormat">
            <summary>
            Gets or sets the output format (JSON, XML, etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.StructuredLoggingConfiguration.IncludeRequestContext">
            <summary>
            Gets or sets whether to include request context.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.StructuredLoggingConfiguration.IncludePerformanceMetrics">
            <summary>
            Gets or sets whether to include performance metrics.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.StructuredLoggingConfiguration.CustomProperties">
            <summary>
            Gets or sets custom properties to include.
            </summary>
        </member>
        <member name="T:Segmint.Core.Configuration.BatchProcessingConfiguration">
            <summary>
            Batch processing configuration.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.BatchProcessingConfiguration.Enabled">
            <summary>
            Gets or sets whether batch processing is enabled.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.BatchProcessingConfiguration.BatchSize">
            <summary>
            Gets or sets the batch size.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.BatchProcessingConfiguration.BatchTimeoutSeconds">
            <summary>
            Gets or sets the batch timeout in seconds.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.BatchProcessingConfiguration.MaxQueueSize">
            <summary>
            Gets or sets the maximum queue size.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.BatchProcessingConfiguration.ParallelProcessing">
            <summary>
            Gets or sets whether to process batches in parallel.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.BatchProcessingConfiguration.DegreeOfParallelism">
            <summary>
            Gets or sets the degree of parallelism.
            </summary>
        </member>
        <member name="T:Segmint.Core.Configuration.SegmentDefinition">
            <summary>
            Custom segment definition.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.SegmentDefinition.SegmentId">
            <summary>
            Gets or sets the segment ID.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.SegmentDefinition.Name">
            <summary>
            Gets or sets the segment name.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.SegmentDefinition.Description">
            <summary>
            Gets or sets the segment description.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.SegmentDefinition.Fields">
            <summary>
            Gets or sets the field definitions.
            </summary>
        </member>
        <member name="T:Segmint.Core.Configuration.FieldDefinition">
            <summary>
            Field definition for custom segments.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.FieldDefinition.FieldNumber">
            <summary>
            Gets or sets the field number.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.FieldDefinition.Name">
            <summary>
            Gets or sets the field name.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.FieldDefinition.DataType">
            <summary>
            Gets or sets the data type.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.FieldDefinition.Required">
            <summary>
            Gets or sets whether the field is required.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.FieldDefinition.MaxLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.FieldDefinition.AllowedValues">
            <summary>
            Gets or sets the allowed values.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.FieldDefinition.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="T:Segmint.Core.Configuration.ValidationRule">
            <summary>
            Custom validation rule definition.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationRule.Name">
            <summary>
            Gets or sets the rule name.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationRule.Description">
            <summary>
            Gets or sets the rule description.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationRule.Expression">
            <summary>
            Gets or sets the validation expression.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationRule.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationRule.Severity">
            <summary>
            Gets or sets the validation severity.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationRule.Type">
            <summary>
            Gets or sets the validation type.
            </summary>
        </member>
        <member name="P:Segmint.Core.Configuration.ValidationRule.Enabled">
            <summary>
            Gets or sets whether the rule is enabled.
            </summary>
        </member>
        <member name="T:Segmint.Core.Configuration.LogLevel">
            <summary>
            Log level enumeration.
            </summary>
        </member>
        <member name="T:Segmint.Core.Configuration.Templates.ConfigurationTemplates">
            <summary>
            Provides pre-configured templates for common Segmint scenarios.
            </summary>
        </member>
        <member name="M:Segmint.Core.Configuration.Templates.ConfigurationTemplates.CreatePharmacyTemplate">
            <summary>
            Creates a configuration template optimized for RDE (pharmacy order) scenarios.
            </summary>
            <returns>A configuration optimized for pharmacy orders.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.Templates.ConfigurationTemplates.CreatePatientManagementTemplate">
            <summary>
            Creates a configuration template optimized for ADT (admission/discharge/transfer) scenarios.
            </summary>
            <returns>A configuration optimized for patient management.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.Templates.ConfigurationTemplates.CreateDevelopmentTemplate">
            <summary>
            Creates a configuration template for development and testing scenarios.
            </summary>
            <returns>A configuration optimized for development.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.Templates.ConfigurationTemplates.CreateProductionTemplate">
            <summary>
            Creates a configuration template for high-volume production scenarios.
            </summary>
            <returns>A configuration optimized for production performance.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.Templates.ConfigurationTemplates.CreateValidationTemplate">
            <summary>
            Creates a configuration template for validation-focused scenarios.
            </summary>
            <returns>A configuration optimized for comprehensive validation.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.Templates.ConfigurationTemplates.GetAvailableTemplates">
            <summary>
            Gets all available template names.
            </summary>
            <returns>List of template names.</returns>
        </member>
        <member name="M:Segmint.Core.Configuration.Templates.ConfigurationTemplates.CreateFromTemplate(System.String)">
            <summary>
            Creates a configuration from the specified template name.
            </summary>
            <param name="templateName">The template name.</param>
            <returns>The configuration for the specified template.</returns>
            <exception cref="T:System.ArgumentException">Thrown when template name is not recognized.</exception>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Clinical.PatientJourney">
            <summary>
            Represents a patient's healthcare journey with clinical events.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientJourney.Patient">
            <summary>
            Patient demographic information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientJourney.Events">
            <summary>
            List of clinical events in chronological order.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientJourney.StartDate">
            <summary>
            Journey start date.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientJourney.EndDate">
            <summary>
            Journey end date (optional).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientJourney.JourneyType">
            <summary>
            Journey type/scenario.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientJourney.PrimaryDiagnosis">
            <summary>
            Primary diagnosis or condition.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientJourney.Facility">
            <summary>
            Healthcare facility where journey takes place.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientJourney.Insurance">
            <summary>
            Insurance information for this journey.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientJourney.Duration">
            <summary>
            Gets the duration of the journey.
            </summary>
        </member>
        <member name="M:Segmint.Core.DataGeneration.Clinical.PatientJourney.AddEvent(Segmint.Core.DataGeneration.Clinical.ClinicalEvent)">
            <summary>
            Adds an event to the journey.
            </summary>
            <param name="clinicalEvent">The clinical event to add.</param>
        </member>
        <member name="M:Segmint.Core.DataGeneration.Clinical.PatientJourney.GetEventsByType(System.String)">
            <summary>
            Gets events of a specific type.
            </summary>
            <param name="eventType">The event type to filter by.</param>
            <returns>Events of the specified type.</returns>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Clinical.ClinicalEvent">
            <summary>
            Represents a clinical event in a patient's journey.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.ClinicalEvent.EventId">
            <summary>
            Event identifier.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.ClinicalEvent.EventType">
            <summary>
            Event type (admission, discharge, transfer, etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.ClinicalEvent.TriggerEvent">
            <summary>
            ADT trigger event code (A01, A02, A03, etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.ClinicalEvent.EventDateTime">
            <summary>
            Date and time when the event occurred.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.ClinicalEvent.PatientClass">
            <summary>
            Patient class (inpatient, outpatient, emergency, etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.ClinicalEvent.Location">
            <summary>
            Patient location information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.ClinicalEvent.AttendingPhysician">
            <summary>
            Attending physician information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.ClinicalEvent.Admission">
            <summary>
            Admission information (if applicable).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.ClinicalEvent.Discharge">
            <summary>
            Discharge information (if applicable).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.ClinicalEvent.VisitNumber">
            <summary>
            Visit number for this encounter.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.ClinicalEvent.AccountNumber">
            <summary>
            Account number for billing.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.ClinicalEvent.Notes">
            <summary>
            Event notes or comments.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.ClinicalEvent.Description">
            <summary>
            Gets a description of the event.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Clinical.PatientLocation">
            <summary>
            Patient location information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientLocation.PointOfCare">
            <summary>
            Point of care (floor, unit).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientLocation.Room">
            <summary>
            Room number.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientLocation.Bed">
            <summary>
            Bed identifier.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientLocation.Facility">
            <summary>
            Facility identifier.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientLocation.LocationStatus">
            <summary>
            Location status (active, inactive, temporarily inactive).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientLocation.PersonLocationType">
            <summary>
            Person location type (nursing unit, department).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientLocation.Building">
            <summary>
            Building identifier.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientLocation.Floor">
            <summary>
            Floor identifier.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PatientLocation.FormattedLocation">
            <summary>
            Gets the formatted location string.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Clinical.PhysicianInfo">
            <summary>
            Physician information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PhysicianInfo.PhysicianId">
            <summary>
            Physician identifier.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PhysicianInfo.Name">
            <summary>
            Physician's name.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PhysicianInfo.Specialty">
            <summary>
            Medical specialty.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PhysicianInfo.Department">
            <summary>
            Department or service.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PhysicianInfo.PhoneNumber">
            <summary>
            Phone number.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.PhysicianInfo.PagerNumber">
            <summary>
            Pager number.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Clinical.AdmissionInfo">
            <summary>
            Admission information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.AdmissionInfo.AdmissionType">
            <summary>
            Admission type (elective, emergency, urgent, etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.AdmissionInfo.AdmissionSource">
            <summary>
            Admission source (physician referral, emergency room, etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.AdmissionInfo.PreAdmissionNumber">
            <summary>
            Pre-admission number.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.AdmissionInfo.AdmittingPhysician">
            <summary>
            Admitting physician.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.AdmissionInfo.ReferringPhysician">
            <summary>
            Referring physician.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.AdmissionInfo.HospitalService">
            <summary>
            Hospital service.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.AdmissionInfo.AdmitReason">
            <summary>
            Admit reason.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Clinical.DischargeInfo">
            <summary>
            Discharge information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.DischargeInfo.DischargeDisposition">
            <summary>
            Discharge disposition (home, skilled nursing facility, etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.DischargeInfo.DischargeLocation">
            <summary>
            Discharge location.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.DischargeInfo.DischargeToLocationType">
            <summary>
            Discharge to location type.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.DischargeInfo.DischargingPhysician">
            <summary>
            Discharging physician.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.DischargeInfo.DischargeInstructions">
            <summary>
            Discharge instructions.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.DischargeInfo.FollowUpInstructions">
            <summary>
            Follow-up instructions.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.DischargeInfo.LengthOfStay">
            <summary>
            Length of stay in days.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Clinical.FacilityInfo">
            <summary>
            Healthcare facility information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.FacilityInfo.FacilityId">
            <summary>
            Facility identifier.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.FacilityInfo.Name">
            <summary>
            Facility name.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.FacilityInfo.FacilityType">
            <summary>
            Facility type (hospital, clinic, etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.FacilityInfo.Address">
            <summary>
            Address information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.FacilityInfo.PhoneNumber">
            <summary>
            Phone number.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.FacilityInfo.OrganizationId">
            <summary>
            Organization identifier.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.FacilityInfo.BedCount">
            <summary>
            Number of beds.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Clinical.FacilityInfo.Services">
            <summary>
            Available services.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Clinical.JourneyTypes">
            <summary>
            Predefined journey types for common healthcare scenarios.
            </summary>
        </member>
        <member name="M:Segmint.Core.DataGeneration.Clinical.JourneyTypes.GetAll">
            <summary>
            Gets all available journey types.
            </summary>
            <returns>Array of journey type names.</returns>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Clinical.PatientJourneyGenerator">
            <summary>
            Generates realistic patient healthcare journeys for ADT message testing.
            </summary>
        </member>
        <member name="M:Segmint.Core.DataGeneration.Clinical.PatientJourneyGenerator.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.DataGeneration.Clinical.PatientJourneyGenerator"/> class.
            </summary>
            <param name="seed">Random seed for reproducible generation.</param>
        </member>
        <member name="M:Segmint.Core.DataGeneration.Clinical.PatientJourneyGenerator.Generate">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.DataGeneration.Clinical.PatientJourneyGenerator.Generate(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.DataGeneration.Clinical.PatientJourneyGenerator.Generate(Segmint.Core.DataGeneration.DataGenerationConstraints)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.DataGeneration.Clinical.PatientJourneyGenerator.Generate(System.Int32,Segmint.Core.DataGeneration.DataGenerationConstraints)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.DataGeneration.Clinical.PatientJourneyGenerator.GenerateJourney(System.String,Segmint.Core.DataGeneration.DataGenerationConstraints)">
            <summary>
            Generates a specific type of patient journey.
            </summary>
            <param name="journeyType">The type of journey to generate.</param>
            <param name="constraints">Generation constraints.</param>
            <returns>Generated patient journey.</returns>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Clinical.ClinicalDataSets">
            <summary>
            Contains clinical data sets for journey generation.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Demographics.DemographicsGenerator">
            <summary>
            Generates realistic patient demographic data for testing.
            </summary>
        </member>
        <member name="M:Segmint.Core.DataGeneration.Demographics.DemographicsGenerator.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.DataGeneration.Demographics.DemographicsGenerator"/> class.
            </summary>
            <param name="seed">Random seed for reproducible generation.</param>
        </member>
        <member name="M:Segmint.Core.DataGeneration.Demographics.DemographicsGenerator.Generate">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.DataGeneration.Demographics.DemographicsGenerator.Generate(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.DataGeneration.Demographics.DemographicsGenerator.Generate(Segmint.Core.DataGeneration.DataGenerationConstraints)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.DataGeneration.Demographics.DemographicsGenerator.Generate(System.Int32,Segmint.Core.DataGeneration.DataGenerationConstraints)">
            <inheritdoc />
        </member>
        <member name="T:Segmint.Core.DataGeneration.Demographics.DemographicsDataSets">
            <summary>
            Contains realistic data sets for demographic generation.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Demographics.PatientDemographics">
            <summary>
            Represents synthetic patient demographic information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.PatientDemographics.PatientId">
            <summary>
            Patient identifier (medical record number).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.PatientDemographics.FirstName">
            <summary>
            Patient's first name.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.PatientDemographics.MiddleName">
            <summary>
            Patient's middle name (optional).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.PatientDemographics.LastName">
            <summary>
            Patient's last name.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.PatientDemographics.DateOfBirth">
            <summary>
            Patient's date of birth.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.PatientDemographics.Gender">
            <summary>
            Patient's gender (M, F, U, O).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.PatientDemographics.SocialSecurityNumber">
            <summary>
            Social security number (if enabled).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.PatientDemographics.Address">
            <summary>
            Patient's address.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.PatientDemographics.Contact">
            <summary>
            Patient's phone numbers.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.PatientDemographics.Race">
            <summary>
            Patient's race/ethnicity.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.PatientDemographics.MaritalStatus">
            <summary>
            Patient's marital status.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.PatientDemographics.PrimaryLanguage">
            <summary>
            Patient's primary language.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.PatientDemographics.AccountNumber">
            <summary>
            Patient account number.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.PatientDemographics.EmergencyContact">
            <summary>
            Emergency contact information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.PatientDemographics.Age">
            <summary>
            Gets the patient's age in years.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.PatientDemographics.FullName">
            <summary>
            Gets the patient's full name.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.PatientDemographics.DisplayName">
            <summary>
            Gets a formatted display name (Last, First Middle).
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Demographics.AddressInfo">
            <summary>
            Address information for a patient.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.AddressInfo.Street">
            <summary>
            Street address line 1.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.AddressInfo.Street2">
            <summary>
            Street address line 2 (apartment, suite, etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.AddressInfo.City">
            <summary>
            City name.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.AddressInfo.State">
            <summary>
            State or province.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.AddressInfo.PostalCode">
            <summary>
            Postal/ZIP code.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.AddressInfo.Country">
            <summary>
            Country code.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.AddressInfo.County">
            <summary>
            County name.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.AddressInfo.FormattedAddress">
            <summary>
            Gets the formatted address.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Demographics.ContactInfo">
            <summary>
            Contact information for a patient.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.ContactInfo.HomePhone">
            <summary>
            Home phone number.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.ContactInfo.WorkPhone">
            <summary>
            Work phone number.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.ContactInfo.MobilePhone">
            <summary>
            Mobile phone number.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.ContactInfo.Email">
            <summary>
            Email address.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.ContactInfo.PreferredContactMethod">
            <summary>
            Preferred contact method.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.ContactInfo.PrimaryPhone">
            <summary>
            Gets the primary phone number (first non-null phone).
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Demographics.EmergencyContact">
            <summary>
            Emergency contact information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.EmergencyContact.Name">
            <summary>
            Emergency contact's name.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.EmergencyContact.Relationship">
            <summary>
            Relationship to patient.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.EmergencyContact.PhoneNumber">
            <summary>
            Emergency contact's phone number.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.EmergencyContact.Address">
            <summary>
            Emergency contact's address (optional).
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Demographics.InsuranceInfo">
            <summary>
            Insurance information for a patient.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.InsuranceInfo.PlanName">
            <summary>
            Insurance plan name.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.InsuranceInfo.MemberId">
            <summary>
            Insurance member ID.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.InsuranceInfo.GroupNumber">
            <summary>
            Insurance group number.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.InsuranceInfo.PolicyHolderName">
            <summary>
            Policy holder name (if different from patient).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.InsuranceInfo.RelationshipToHolder">
            <summary>
            Relationship to policy holder.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.InsuranceInfo.Company">
            <summary>
            Insurance company information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.InsuranceInfo.IsPrimary">
            <summary>
            Whether this is the primary insurance.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Demographics.InsuranceCompany">
            <summary>
            Insurance company information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.InsuranceCompany.Name">
            <summary>
            Company name.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.InsuranceCompany.Id">
            <summary>
            Company identifier.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.InsuranceCompany.Address">
            <summary>
            Company address.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Demographics.InsuranceCompany.PhoneNumber">
            <summary>
            Company phone number.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.IDataGenerator`1">
            <summary>
            Interface for synthetic data generators.
            </summary>
            <typeparam name="T">The type of data to generate.</typeparam>
        </member>
        <member name="M:Segmint.Core.DataGeneration.IDataGenerator`1.Generate">
            <summary>
            Generates a single instance of synthetic data.
            </summary>
            <returns>A single instance of synthetic data.</returns>
        </member>
        <member name="M:Segmint.Core.DataGeneration.IDataGenerator`1.Generate(System.Int32)">
            <summary>
            Generates multiple instances of synthetic data.
            </summary>
            <param name="count">The number of instances to generate.</param>
            <returns>A collection of synthetic data instances.</returns>
        </member>
        <member name="M:Segmint.Core.DataGeneration.IDataGenerator`1.Generate(Segmint.Core.DataGeneration.DataGenerationConstraints)">
            <summary>
            Generates synthetic data with specific constraints.
            </summary>
            <param name="constraints">Constraints to apply during generation.</param>
            <returns>A single instance of synthetic data that meets the constraints.</returns>
        </member>
        <member name="M:Segmint.Core.DataGeneration.IDataGenerator`1.Generate(System.Int32,Segmint.Core.DataGeneration.DataGenerationConstraints)">
            <summary>
            Generates multiple instances of synthetic data with constraints.
            </summary>
            <param name="count">The number of instances to generate.</param>
            <param name="constraints">Constraints to apply during generation.</param>
            <returns>A collection of synthetic data instances that meet the constraints.</returns>
        </member>
        <member name="T:Segmint.Core.DataGeneration.DataGenerationConstraints">
            <summary>
            Constraints for data generation.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.DataGenerationConstraints.Seed">
            <summary>
            Random seed for reproducible generation.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.DataGenerationConstraints.Locale">
            <summary>
            Locale for localized data generation.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.DataGenerationConstraints.DateRange">
            <summary>
            Date range constraints.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.DataGenerationConstraints.NumericRange">
            <summary>
            Numeric range constraints.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.DataGenerationConstraints.StringLengthRange">
            <summary>
            String length constraints.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.DataGenerationConstraints.CustomConstraints">
            <summary>
            Custom constraints as key-value pairs.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.DataGenerationConstraints.IncludeSensitiveData">
            <summary>
            Whether to include sensitive data in generation.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.DataGenerationConstraints.QualityLevel">
            <summary>
            Quality level for generated data (e.g., "realistic", "basic", "test").
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.DateRange">
            <summary>
            Date range constraint.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.DateRange.Start">
            <summary>
            Start date (inclusive).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.DateRange.End">
            <summary>
            End date (inclusive).
            </summary>
        </member>
        <member name="M:Segmint.Core.DataGeneration.DateRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Creates a date range.
            </summary>
            <param name="start">Start date.</param>
            <param name="end">End date.</param>
        </member>
        <member name="M:Segmint.Core.DataGeneration.DateRange.PastYears(System.Int32)">
            <summary>
            Creates a date range for the past N years.
            </summary>
            <param name="years">Number of years in the past.</param>
            <returns>Date range from N years ago to now.</returns>
        </member>
        <member name="M:Segmint.Core.DataGeneration.DateRange.AdultBirthDates">
            <summary>
            Creates a date range for adults (18-80 years old).
            </summary>
            <returns>Date range for adult birth dates.</returns>
        </member>
        <member name="T:Segmint.Core.DataGeneration.NumericRange">
            <summary>
            Numeric range constraint.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.NumericRange.Min">
            <summary>
            Minimum value (inclusive).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.NumericRange.Max">
            <summary>
            Maximum value (inclusive).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.NumericRange.DecimalPlaces">
            <summary>
            Number of decimal places.
            </summary>
        </member>
        <member name="M:Segmint.Core.DataGeneration.NumericRange.#ctor(System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Creates a numeric range.
            </summary>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <param name="decimalPlaces">Number of decimal places.</param>
        </member>
        <member name="T:Segmint.Core.DataGeneration.StringLengthRange">
            <summary>
            String length range constraint.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.StringLengthRange.Min">
            <summary>
            Minimum length (inclusive).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.StringLengthRange.Max">
            <summary>
            Maximum length (inclusive).
            </summary>
        </member>
        <member name="M:Segmint.Core.DataGeneration.StringLengthRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a string length range.
            </summary>
            <param name="min">Minimum length.</param>
            <param name="max">Maximum length.</param>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Pharmacy.MedicationData">
            <summary>
            Represents medication information for synthetic data generation.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.MedicationData.NDC">
            <summary>
            NDC (National Drug Code) number.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.MedicationData.GenericName">
            <summary>
            Generic medication name.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.MedicationData.BrandName">
            <summary>
            Brand/trade name.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.MedicationData.Strength">
            <summary>
            Drug strength (e.g., "250", "10").
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.MedicationData.StrengthUnits">
            <summary>
            Strength units (e.g., "mg", "mcg", "units").
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.MedicationData.DosageForm">
            <summary>
            Dosage form (e.g., "tablet", "capsule", "liquid").
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.MedicationData.Route">
            <summary>
            Route of administration (e.g., "oral", "injection", "topical").
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.MedicationData.TherapeuticCategory">
            <summary>
            Therapeutic category.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.MedicationData.DEASchedule">
            <summary>
            DEA schedule (if controlled substance).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.MedicationData.Manufacturer">
            <summary>
            Manufacturer name.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.MedicationData.PrescribingInfo">
            <summary>
            Typical prescribing information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.MedicationData.IsControlledSubstance">
            <summary>
            Whether this is a controlled substance.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.MedicationData.FullName">
            <summary>
            Gets the full medication name with strength.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Pharmacy.PrescribingInfo">
            <summary>
            Prescribing information for a medication.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescribingInfo.TypicalDose">
            <summary>
            Typical starting dose.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescribingInfo.TypicalFrequency">
            <summary>
            Typical frequency (e.g., "once daily", "twice daily").
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescribingInfo.TypicalQuantity">
            <summary>
            Typical quantity dispensed.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescribingInfo.TypicalDaysSupply">
            <summary>
            Typical days supply.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescribingInfo.TypicalRefills">
            <summary>
            Typical number of refills.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescribingInfo.Indications">
            <summary>
            Common indications for use.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescribingInfo.CommonSigs">
            <summary>
            Common patient instructions (SIG).
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Pharmacy.PrescriptionOrder">
            <summary>
            Represents prescription order information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionOrder.PrescriptionNumber">
            <summary>
            Prescription number.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionOrder.Medication">
            <summary>
            Medication being prescribed.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionOrder.Quantity">
            <summary>
            Quantity to dispense.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionOrder.QuantityUnits">
            <summary>
            Quantity units.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionOrder.Refills">
            <summary>
            Number of refills.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionOrder.DaysSupply">
            <summary>
            Days supply.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionOrder.Directions">
            <summary>
            Patient directions (SIG).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionOrder.Prescriber">
            <summary>
            Prescriber information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionOrder.Pharmacy">
            <summary>
            Pharmacy information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionOrder.OrderDateTime">
            <summary>
            Order date and time.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionOrder.GenericSubstitutionAllowed">
            <summary>
            Whether generic substitution is allowed.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionOrder.Notes">
            <summary>
            Special instructions or notes.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionOrder.PriorAuthNumber">
            <summary>
            Prior authorization number (if required).
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Pharmacy.PrescriberInfo">
            <summary>
            Prescriber information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriberInfo.ProviderId">
            <summary>
            Prescriber ID.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriberInfo.Name">
            <summary>
            Prescriber's name.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriberInfo.DEANumber">
            <summary>
            DEA number.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriberInfo.NPI">
            <summary>
            NPI (National Provider Identifier).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriberInfo.Specialty">
            <summary>
            Specialty.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriberInfo.PhoneNumber">
            <summary>
            Phone number.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriberInfo.Address">
            <summary>
            Address.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Pharmacy.PharmacyInfo">
            <summary>
            Pharmacy information.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PharmacyInfo.PharmacyId">
            <summary>
            Pharmacy ID.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PharmacyInfo.Name">
            <summary>
            Pharmacy name.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PharmacyInfo.NCPDP">
            <summary>
            NCPDP (National Council for Prescription Drug Programs) ID.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PharmacyInfo.DEANumber">
            <summary>
            DEA number.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PharmacyInfo.PhoneNumber">
            <summary>
            Phone number.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PharmacyInfo.Address">
            <summary>
            Address.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PharmacyInfo.PharmacistInCharge">
            <summary>
            Pharmacist in charge.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PharmacyInfo.Is24Hour">
            <summary>
            Whether this is a 24-hour pharmacy.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PharmacyInfo.ChainName">
            <summary>
            Pharmacy chain name (if applicable).
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Pharmacy.PrescriptionInsurance">
            <summary>
            Insurance/coverage information for prescriptions.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionInsurance.PlanName">
            <summary>
            Primary insurance plan.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionInsurance.MemberId">
            <summary>
            Insurance member ID.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionInsurance.GroupNumber">
            <summary>
            Group number.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionInsurance.BIN">
            <summary>
            BIN (Bank Identification Number).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionInsurance.PCN">
            <summary>
            PCN (Processor Control Number).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionInsurance.Copay">
            <summary>
            Copay amount.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.Pharmacy.PrescriptionInsurance.PriorAuthRequired">
            <summary>
            Whether prior authorization is required.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Pharmacy.MedicationGenerator">
            <summary>
            Generates realistic medication and prescription data for testing.
            </summary>
        </member>
        <member name="M:Segmint.Core.DataGeneration.Pharmacy.MedicationGenerator.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.DataGeneration.Pharmacy.MedicationGenerator"/> class.
            </summary>
            <param name="seed">Random seed for reproducible generation.</param>
        </member>
        <member name="M:Segmint.Core.DataGeneration.Pharmacy.MedicationGenerator.Generate">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.DataGeneration.Pharmacy.MedicationGenerator.Generate(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.DataGeneration.Pharmacy.MedicationGenerator.Generate(Segmint.Core.DataGeneration.DataGenerationConstraints)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.DataGeneration.Pharmacy.MedicationGenerator.Generate(System.Int32,Segmint.Core.DataGeneration.DataGenerationConstraints)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.DataGeneration.Pharmacy.MedicationGenerator.GenerateMedication(System.String)">
            <summary>
            Generates a specific type of medication.
            </summary>
            <param name="category">Therapeutic category filter.</param>
            <returns>Generated medication data.</returns>
        </member>
        <member name="T:Segmint.Core.DataGeneration.Pharmacy.MedicationDataSets">
            <summary>
            Contains realistic medication data sets.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.SyntheticDataService">
            <summary>
            Coordinates synthetic data generation for HL7 message testing.
            </summary>
        </member>
        <member name="M:Segmint.Core.DataGeneration.SyntheticDataService.#ctor(Microsoft.Extensions.Logging.ILogger{Segmint.Core.DataGeneration.SyntheticDataService},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.DataGeneration.SyntheticDataService"/> class.
            </summary>
            <param name="logger">Logger instance.</param>
            <param name="seed">Random seed for reproducible generation.</param>
        </member>
        <member name="M:Segmint.Core.DataGeneration.SyntheticDataService.GenerateRDEMessages(System.Int32,Segmint.Core.DataGeneration.DataGenerationConstraints)">
            <summary>
            Generates synthetic RDE (pharmacy order) messages.
            </summary>
            <param name="count">Number of messages to generate.</param>
            <param name="constraints">Generation constraints.</param>
            <returns>Generated RDE messages with synthetic data.</returns>
        </member>
        <member name="M:Segmint.Core.DataGeneration.SyntheticDataService.GenerateADTMessages(System.Int32,Segmint.Core.DataGeneration.DataGenerationConstraints)">
            <summary>
            Generates synthetic ADT (patient administration) messages.
            </summary>
            <param name="count">Number of messages to generate.</param>
            <param name="constraints">Generation constraints.</param>
            <returns>Generated ADT messages with synthetic data.</returns>
        </member>
        <member name="M:Segmint.Core.DataGeneration.SyntheticDataService.GeneratePatientJourneySequence(System.String,Segmint.Core.DataGeneration.DataGenerationConstraints)">
            <summary>
            Generates a complete patient journey as a sequence of ADT messages.
            </summary>
            <param name="journeyType">Type of journey to generate.</param>
            <param name="constraints">Generation constraints.</param>
            <returns>Sequence of ADT messages representing a patient journey.</returns>
        </member>
        <member name="M:Segmint.Core.DataGeneration.SyntheticDataService.GenerateScenario(Segmint.Core.DataGeneration.TestScenario,Segmint.Core.DataGeneration.DataGenerationConstraints)">
            <summary>
            Generates synthetic data for a specific scenario.
            </summary>
            <param name="scenario">The scenario to generate.</param>
            <param name="constraints">Generation constraints.</param>
            <returns>Generated scenario data.</returns>
        </member>
        <member name="M:Segmint.Core.DataGeneration.SyntheticDataService.GenerateTestSuite(Segmint.Core.DataGeneration.ScenarioMix,Segmint.Core.DataGeneration.DataGenerationConstraints)">
            <summary>
            Generates multiple scenarios for comprehensive testing.
            </summary>
            <param name="scenarioMix">Mix of scenarios to generate.</param>
            <param name="constraints">Generation constraints.</param>
            <returns>Collection of generated scenario data.</returns>
        </member>
        <member name="T:Segmint.Core.DataGeneration.PatientJourneySequence">
            <summary>
            Represents a sequence of messages for a patient journey.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.PatientJourneySequence.Journey">
            <summary>
            The patient journey data.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.PatientJourneySequence.Messages">
            <summary>
            Generated ADT messages for the journey.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.PatientJourneySequence.SequenceId">
            <summary>
            Unique identifier for this sequence.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.PatientJourneySequence.GeneratedAt">
            <summary>
            When this sequence was generated.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.PatientJourneySequence.Duration">
            <summary>
            Gets the total duration of the journey.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.PatientJourneySequence.MessageCount">
            <summary>
            Gets the number of messages in the sequence.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.TestScenario">
            <summary>
            Represents a test scenario configuration.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.TestScenario.Type">
            <summary>
            Scenario type.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.TestScenario.Name">
            <summary>
            Scenario name.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.TestScenario.Description">
            <summary>
            Scenario description.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.TestScenario.Parameters">
            <summary>
            Custom parameters for the scenario.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.ScenarioType">
            <summary>
            Types of test scenarios.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.ScenarioData">
            <summary>
            Generated scenario data.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.ScenarioData.Scenario">
            <summary>
            The scenario that was generated.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.ScenarioData.Patient">
            <summary>
            The patient data.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.ScenarioData.Messages">
            <summary>
            Generated HL7 messages.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.ScenarioData.Journey">
            <summary>
            Patient journey (if applicable).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.ScenarioData.Prescription">
            <summary>
            Prescription data (if applicable).
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.ScenarioData.GeneratedAt">
            <summary>
            When this scenario was generated.
            </summary>
        </member>
        <member name="T:Segmint.Core.DataGeneration.ScenarioMix">
            <summary>
            Configuration for generating a mix of scenarios.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.ScenarioMix.Scenarios">
            <summary>
            List of scenario configurations.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.ScenarioMix.TotalScenarios">
            <summary>
            Gets the total number of scenarios to generate.
            </summary>
        </member>
        <member name="M:Segmint.Core.DataGeneration.ScenarioMix.CreateTypicalMix">
            <summary>
            Creates a typical test mix for healthcare scenarios.
            </summary>
            <returns>A balanced mix of healthcare scenarios.</returns>
        </member>
        <member name="T:Segmint.Core.DataGeneration.ScenarioConfiguration">
            <summary>
            Configuration for a single scenario type.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.ScenarioConfiguration.Type">
            <summary>
            Scenario type.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.ScenarioConfiguration.Count">
            <summary>
            Number of scenarios to generate.
            </summary>
        </member>
        <member name="P:Segmint.Core.DataGeneration.ScenarioConfiguration.Description">
            <summary>
            Description of the scenario.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.HL7Field">
            <summary>
            Represents a single HL7 field with type-safe value handling and validation.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.HL7Field.RawValue">
            <summary>
            Gets the raw string value of the field.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.HL7Field.IsRequired">
            <summary>
            Gets a value indicating whether this field is required.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.HL7Field.IsEmpty">
            <summary>
            Gets a value indicating whether this field is empty or null.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.HL7Field.DataType">
            <summary>
            Gets the HL7 data type name for this field.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.HL7Field.MaxLength">
            <summary>
            Gets the maximum length allowed for this field type.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Field.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.HL7Field"/> class.
            </summary>
            <param name="value">The initial value.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Field.SetValue(System.String)">
            <summary>
            Sets the value of this field.
            </summary>
            <param name="value">The new value.</param>
            <exception cref="T:System.ArgumentException">Thrown when the value is invalid for this field type.</exception>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Field.ValidateValue(System.String)">
            <summary>
            Validates the given value for this field type.
            </summary>
            <param name="value">The value to validate.</param>
            <exception cref="T:System.ArgumentException">Thrown when the value is invalid for this field type.</exception>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Field.ToHL7String">
            <summary>
            Gets the formatted HL7 representation of this field.
            </summary>
            <returns>The HL7-formatted string.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Field.Clone">
            <summary>
            Creates a copy of this field.
            </summary>
            <returns>A new instance with the same value and properties.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Field.ToString">
            <summary>
            Returns a string representation of this field.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Field.Equals(System.Object)">
            <summary>
            Determines whether two field instances are equal.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Field.GetHashCode">
            <summary>
            Gets the hash code for this field.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.HL7Segment">
            <summary>
            Represents an HL7 segment containing multiple fields.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.HL7Segment.SegmentId">
            <summary>
            Gets the three-character segment identifier (e.g., "MSH", "PID", "RXE").
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.HL7Segment.FieldCount">
            <summary>
            Gets the number of fields in this segment.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.HL7Segment.Item(System.Int32)">
            <summary>
            Gets or sets the field at the specified index (1-based indexing to match HL7 conventions).
            </summary>
            <param name="index">The 1-based field index.</param>
            <returns>The field at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is out of range.</exception>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Segment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.HL7Segment"/> class.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Segment.InitializeFields">
            <summary>
            Initializes the segment fields with their default types and requirements.
            Derived classes should override this method to set up their specific field structure.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Segment.CreateDefaultField(System.Int32)">
            <summary>
            Creates a default field for the specified position.
            </summary>
            <param name="position">The 1-based field position.</param>
            <returns>A default field instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Segment.AddField(Segmint.Core.HL7.HL7Field)">
            <summary>
            Adds a field to this segment.
            </summary>
            <param name="field">The field to add.</param>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Segment.SetField(System.Int32,System.String)">
            <summary>
            Sets the value of a field at the specified position.
            </summary>
            <param name="position">The 1-based field position.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Segment.GetField(System.Int32)">
            <summary>
            Gets the value of a field at the specified position.
            </summary>
            <param name="position">The 1-based field position.</param>
            <returns>The field value.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Segment.Validate">
            <summary>
            Validates all fields in this segment.
            </summary>
            <returns>A list of validation errors, empty if all fields are valid.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Segment.ToHL7String">
            <summary>
            Converts this segment to its HL7 string representation.
            </summary>
            <returns>The HL7-formatted segment string.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Segment.FromHL7String(System.String)">
            <summary>
            Parses an HL7 segment string into this segment instance.
            </summary>
            <param name="hl7String">The HL7 segment string to parse.</param>
            <exception cref="T:System.ArgumentException">Thrown when the segment string is invalid.</exception>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Segment.Clone">
            <summary>
            Creates a copy of this segment.
            </summary>
            <returns>A new segment instance with the same field values.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Segment.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the fields.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Segment.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the fields.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.HL7Segment.ToString">
            <summary>
            Returns a string representation of this segment.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.Messages.ACKMessage">
            <summary>
            Represents an HL7 ACK (General Acknowledgment) message.
            Used to acknowledge receipt and processing status of other HL7 messages.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.ACKMessage.MessageType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Messages.ACKMessage.TriggerEvent">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Messages.ACKMessage.MessageHeader">
            <summary>
            Gets or sets the message header segment.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.ACKMessage.MessageAcknowledgment">
            <summary>
            Gets or sets the message acknowledgment segment.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.#ctor(Segmint.Core.HL7.Messages.HL7Message,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Messages.ACKMessage"/> class.
            </summary>
            <param name="originalMessage">The original message being acknowledged.</param>
            <param name="acknowledgmentCode">The acknowledgment code (AA, AE, AR, CA, CE, CR).</param>
            <param name="textMessage">Optional text message.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.InitializeSegments(Segmint.Core.HL7.Messages.HL7Message,System.String,System.String)">
            <summary>
            Initializes the required segments for an ACK message.
            </summary>
            <param name="originalMessage">The original message being acknowledged.</param>
            <param name="acknowledgmentCode">The acknowledgment code.</param>
            <param name="textMessage">Optional text message.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.CreateSuccessfulAck(Segmint.Core.HL7.Messages.HL7Message,System.String)">
            <summary>
            Creates a successful acknowledgment message.
            </summary>
            <param name="originalMessage">The original message being acknowledged.</param>
            <param name="textMessage">Optional text message.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Messages.ACKMessage"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.CreateErrorAck(Segmint.Core.HL7.Messages.HL7Message,System.String,System.String)">
            <summary>
            Creates an error acknowledgment message.
            </summary>
            <param name="originalMessage">The original message being acknowledged.</param>
            <param name="errorMessage">The error message.</param>
            <param name="errorCode">The error code (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Messages.ACKMessage"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.CreateRejectionAck(Segmint.Core.HL7.Messages.HL7Message,System.String,System.String)">
            <summary>
            Creates a rejection acknowledgment message.
            </summary>
            <param name="originalMessage">The original message being acknowledged.</param>
            <param name="rejectionMessage">The rejection message.</param>
            <param name="errorCode">The error code (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Messages.ACKMessage"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.CreateCommitAcceptAck(Segmint.Core.HL7.Messages.HL7Message,System.String)">
            <summary>
            Creates a commit accept acknowledgment message.
            </summary>
            <param name="originalMessage">The original message being acknowledged.</param>
            <param name="textMessage">Optional text message.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Messages.ACKMessage"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.CreateCommitErrorAck(Segmint.Core.HL7.Messages.HL7Message,System.String,System.String)">
            <summary>
            Creates a commit error acknowledgment message.
            </summary>
            <param name="originalMessage">The original message being acknowledged.</param>
            <param name="errorMessage">The error message.</param>
            <param name="errorCode">The error code (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Messages.ACKMessage"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.CreateCommitRejectAck(Segmint.Core.HL7.Messages.HL7Message,System.String,System.String)">
            <summary>
            Creates a commit reject acknowledgment message.
            </summary>
            <param name="originalMessage">The original message being acknowledged.</param>
            <param name="rejectionMessage">The rejection message.</param>
            <param name="errorCode">The error code (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Messages.ACKMessage"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.SetAcknowledgmentCode(System.String)">
            <summary>
            Sets the acknowledgment code.
            </summary>
            <param name="acknowledgmentCode">The acknowledgment code (AA, AE, AR, CA, CE, CR).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.SetTextMessage(System.String)">
            <summary>
            Sets the text message.
            </summary>
            <param name="textMessage">The text message.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.SetErrorCondition(System.String,System.String,System.String)">
            <summary>
            Sets the error condition.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="errorDescription">The error description.</param>
            <param name="codingSystem">The coding system (optional).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.SetSendingApplication(System.String,System.String)">
            <summary>
            Sets the sending application information.
            </summary>
            <param name="sendingApplication">The sending application name.</param>
            <param name="sendingFacility">The sending facility name.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.SetReceivingApplication(System.String,System.String)">
            <summary>
            Sets the receiving application information.
            </summary>
            <param name="receivingApplication">The receiving application name.</param>
            <param name="receivingFacility">The receiving facility name.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.IsSuccessful">
            <summary>
            Gets a value indicating whether this acknowledgment indicates success.
            </summary>
            <returns>True if the acknowledgment indicates success, false otherwise.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.GetAcknowledgmentCodeDescription">
            <summary>
            Gets the acknowledgment code description.
            </summary>
            <returns>A human-readable description of the acknowledgment code.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.GetAcknowledgedMessageControlId">
            <summary>
            Gets the acknowledged message control ID.
            </summary>
            <returns>The message control ID that was acknowledged.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.GetTextMessage">
            <summary>
            Gets the text message.
            </summary>
            <returns>The text message or null if not set.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.ToDisplayString">
            <summary>
            Gets a formatted display string for this message.
            </summary>
            <returns>A human-readable representation of the message.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.InitializeMessage">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ACKMessage.Clone">
            <summary>
            Creates a copy of this message.
            </summary>
            <returns>A new instance with the same segment values.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Messages.ADTMessage">
            <summary>
            Represents an HL7 ADT (Admit/Discharge/Transfer) message.
            Used for patient admission, discharge, transfer, and registration events.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.ADTMessage.MessageType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Messages.ADTMessage.TriggerEvent">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Messages.ADTMessage.MessageHeader">
            <summary>
            Gets or sets the message header segment.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.ADTMessage.EventType">
            <summary>
            Gets or sets the event type segment.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.ADTMessage.PatientIdentification">
            <summary>
            Gets or sets the patient identification segment.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.ADTMessage.PatientVisit">
            <summary>
            Gets or sets the patient visit segment.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Messages.ADTMessage"/> class.
            </summary>
            <param name="triggerEvent">The trigger event (default: A01).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.InitializeSegments">
            <summary>
            Initializes the required segments for an ADT message.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.CreateAdmitPatient">
            <summary>
            Creates a new ADT message for patient admission (A01).
            </summary>
            <returns>A new <see cref="T:Segmint.Core.HL7.Messages.ADTMessage"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.CreateTransferPatient">
            <summary>
            Creates a new ADT message for patient transfer (A02).
            </summary>
            <returns>A new <see cref="T:Segmint.Core.HL7.Messages.ADTMessage"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.CreateDischargePatient">
            <summary>
            Creates a new ADT message for patient discharge (A03).
            </summary>
            <returns>A new <see cref="T:Segmint.Core.HL7.Messages.ADTMessage"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.CreateRegisterPatient">
            <summary>
            Creates a new ADT message for patient registration (A04).
            </summary>
            <returns>A new <see cref="T:Segmint.Core.HL7.Messages.ADTMessage"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.CreatePreAdmitPatient">
            <summary>
            Creates a new ADT message for patient pre-admission (A05).
            </summary>
            <returns>A new <see cref="T:Segmint.Core.HL7.Messages.ADTMessage"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.CreateUpdatePatient">
            <summary>
            Creates a new ADT message for patient update (A08).
            </summary>
            <returns>A new <see cref="T:Segmint.Core.HL7.Messages.ADTMessage"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.CreateCancelAdmit">
            <summary>
            Creates a new ADT message for patient cancel admit (A11).
            </summary>
            <returns>A new <see cref="T:Segmint.Core.HL7.Messages.ADTMessage"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.CreateCancelDischarge">
            <summary>
            Creates a new ADT message for patient cancel discharge (A13).
            </summary>
            <returns>A new <see cref="T:Segmint.Core.HL7.Messages.ADTMessage"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.SetPatientDemographics(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Sets the patient demographics information.
            </summary>
            <param name="patientId">The patient ID.</param>
            <param name="lastName">The patient's last name.</param>
            <param name="firstName">The patient's first name.</param>
            <param name="middleName">The patient's middle name (optional).</param>
            <param name="dateOfBirth">The patient's date of birth (optional).</param>
            <param name="gender">The patient's gender (optional).</param>
            <param name="ssn">The patient's social security number (optional).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.SetPatientAddress(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the patient address information.
            </summary>
            <param name="streetAddress">The street address.</param>
            <param name="city">The city.</param>
            <param name="state">The state.</param>
            <param name="zipCode">The ZIP code.</param>
            <param name="country">The country (optional).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.SetPatientVisit(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the patient visit information.
            </summary>
            <param name="patientClass">The patient class (E=Emergency, I=Inpatient, O=Outpatient, etc.).</param>
            <param name="assignedPatientLocation">The assigned patient location (optional).</param>
            <param name="attendingDoctor">The attending doctor (optional).</param>
            <param name="admissionType">The admission type (optional).</param>
            <param name="visitNumber">The visit number (optional).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.SetAdmissionDateTime(System.DateTime)">
            <summary>
            Sets the admission date and time.
            </summary>
            <param name="admissionDateTime">The admission date and time.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.SetDischargeDateTime(System.DateTime)">
            <summary>
            Sets the discharge date and time.
            </summary>
            <param name="dischargeDateTime">The discharge date and time.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.SetSendingApplication(System.String,System.String)">
            <summary>
            Sets the sending application information.
            </summary>
            <param name="sendingApplication">The sending application name.</param>
            <param name="sendingFacility">The sending facility name.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.SetReceivingApplication(System.String,System.String)">
            <summary>
            Sets the receiving application information.
            </summary>
            <param name="receivingApplication">The receiving application name.</param>
            <param name="receivingFacility">The receiving facility name.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.AddNote(System.String,System.String)">
            <summary>
            Adds a note to the message.
            </summary>
            <param name="noteText">The note text.</param>
            <param name="noteType">The note type (P=Patient, L=Physician, etc.).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.GetEventTypeDescription">
            <summary>
            Gets the event type description.
            </summary>
            <returns>A human-readable description of the event type.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.ToDisplayString">
            <summary>
            Gets a formatted display string for this message.
            </summary>
            <returns>A human-readable representation of the message.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.Clone">
            <summary>
            Creates a copy of this message.
            </summary>
            <returns>A new instance with the same segment values.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.ADTMessage.InitializeMessage">
            <inheritdoc />
        </member>
        <member name="T:Segmint.Core.HL7.Messages.HL7Message">
            <summary>
            Represents a complete HL7 message containing multiple segments.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.HL7Message.MessageType">
            <summary>
            Gets the message type code (e.g., "RDE", "ADT", "ACK").
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.HL7Message.TriggerEvent">
            <summary>
            Gets the trigger event code (e.g., "O01", "A01", "R01").
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.HL7Message.MessageStructure">
            <summary>
            Gets the message structure (e.g., "RDE_O01", "ADT_A01", "ACK_R01").
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.HL7Message.SegmentCount">
            <summary>
            Gets the number of segments in this message.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.HL7Message.Item(System.Int32)">
            <summary>
            Gets or sets the segment at the specified index.
            </summary>
            <param name="index">The zero-based segment index.</param>
            <returns>The segment at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is out of range.</exception>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Messages.HL7Message"/> class.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.InitializeMessage">
            <summary>
            Initializes the message structure with required segments.
            Derived classes should override this method to set up their specific segment structure.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.AddSegment(Segmint.Core.HL7.HL7Segment)">
            <summary>
            Adds a segment to this message.
            </summary>
            <param name="segment">The segment to add.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.InsertSegment(System.Int32,Segmint.Core.HL7.HL7Segment)">
            <summary>
            Inserts a segment at the specified position.
            </summary>
            <param name="index">The zero-based index at which to insert the segment.</param>
            <param name="segment">The segment to insert.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.RemoveSegmentAt(System.Int32)">
            <summary>
            Removes the segment at the specified index.
            </summary>
            <param name="index">The zero-based index of the segment to remove.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.RemoveSegment(Segmint.Core.HL7.HL7Segment)">
            <summary>
            Removes the specified segment from the message.
            </summary>
            <param name="segment">The segment to remove.</param>
            <returns>True if the segment was found and removed; otherwise, false.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.GetSegment``1">
            <summary>
            Gets the first segment of the specified type.
            </summary>
            <typeparam name="T">The segment type to find.</typeparam>
            <returns>The first segment of the specified type, or null if not found.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.GetSegments``1">
            <summary>
            Gets all segments of the specified type.
            </summary>
            <typeparam name="T">The segment type to find.</typeparam>
            <returns>All segments of the specified type.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.GetSegment(System.String)">
            <summary>
            Gets the first segment with the specified segment ID.
            </summary>
            <param name="segmentId">The segment ID to find (e.g., "MSH", "PID", "RXE").</param>
            <returns>The first segment with the specified ID, or null if not found.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.GetSegments(System.String)">
            <summary>
            Gets all segments with the specified segment ID.
            </summary>
            <param name="segmentId">The segment ID to find (e.g., "MSH", "PID", "RXE").</param>
            <returns>All segments with the specified ID.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.Validate">
            <summary>
            Validates all segments in this message.
            </summary>
            <returns>A list of validation errors, empty if all segments are valid.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.ToHL7String(System.Boolean)">
            <summary>
            Converts this message to its HL7 string representation.
            </summary>
            <param name="useCarriageReturn">Whether to use carriage return (\\r) as segment separator. Default is true.</param>
            <returns>The HL7-formatted message string.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.ToNetworkString">
            <summary>
            Converts this message to network transport format with start/end markers.
            </summary>
            <returns>The message formatted for network transport.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.FromHL7String(System.String)">
            <summary>
            Parses an HL7 message string into this message instance.
            </summary>
            <param name="hl7String">The HL7 message string to parse.</param>
            <exception cref="T:System.ArgumentException">Thrown when the message string is invalid.</exception>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.CreateSegmentFromString(System.String)">
            <summary>
            Creates a segment instance from an HL7 segment string.
            </summary>
            <param name="segmentString">The HL7 segment string.</param>
            <returns>The created segment instance, or null if the segment type is not recognized.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.Clone">
            <summary>
            Creates a copy of this message.
            </summary>
            <returns>A new message instance with the same segment values.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the segments.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the segments.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.ToString">
            <summary>
            Returns a string representation of this message.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.GetSummary">
            <summary>
            Gets summary information about this message.
            </summary>
            <returns>A string containing message type, segment count, and validation status.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.HL7Message.ClearSegments">
            <summary>
            Clears all segments from this message.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.HL7Message.MessageHeader">
            <summary>
            Gets or sets the message header (MSH) segment.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.Messages.RDEMessage">
            <summary>
            Represents an HL7 RDE (Pharmacy Order) message.
            This message is used to communicate pharmacy orders between systems.
            Structure: MSH EVN PID [PV1] ORC RXE [RXR] [RXC] [NTE]
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.RDEMessage.MessageType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Messages.RDEMessage.TriggerEvent">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Messages.RDEMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Messages.RDEMessage"/> class.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.RDEMessage.MessageHeader">
            <summary>
            Gets or sets the message header segment (MSH) - Required.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.RDEMessage.EventType">
            <summary>
            Gets or sets the event type segment (EVN) - Required.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.RDEMessage.PatientIdentification">
            <summary>
            Gets or sets the patient identification segment (PID) - Required.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.RDEMessage.CommonOrder">
            <summary>
            Gets or sets the common order segment (ORC) - Required.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Messages.RDEMessage.PharmacyOrder">
            <summary>
            Gets or sets the pharmacy order segment (RXE) - Required.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.RDEMessage.InitializeMessage">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Messages.RDEMessage.SetupBasicOrder(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sets up a basic RDE message with minimal required information.
            </summary>
            <param name="sendingApplication">The sending application name.</param>
            <param name="sendingFacility">The sending facility name.</param>
            <param name="receivingApplication">The receiving application name.</param>
            <param name="receivingFacility">The receiving facility name.</param>
            <param name="patientId">The patient identifier.</param>
            <param name="patientFirstName">The patient's first name.</param>
            <param name="patientLastName">The patient's last name.</param>
            <param name="drugCode">The drug code.</param>
            <param name="drugName">The drug name.</param>
            <param name="orderingProvider">The ordering provider ID.</param>
            <param name="isProduction">Whether this is a production message.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.RDEMessage.SetMedicationDetails(System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Sets comprehensive medication order information.
            </summary>
            <param name="drugCode">The drug code (NDC, RxNorm, etc.).</param>
            <param name="drugName">The drug name.</param>
            <param name="strength">The drug strength.</param>
            <param name="strengthUnits">The units for strength.</param>
            <param name="dosageForm">The dosage form.</param>
            <param name="dispenseQuantity">Quantity to dispense.</param>
            <param name="dispenseUnits">Units for dispense quantity.</param>
            <param name="refills">Number of refills.</param>
            <param name="sig">Directions for use.</param>
            <param name="daysSupply">Days supply.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.RDEMessage.SetPatientInfo(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets patient demographic information.
            </summary>
            <param name="patientId">The patient identifier.</param>
            <param name="firstName">The patient's first name.</param>
            <param name="lastName">The patient's last name.</param>
            <param name="middleName">The patient's middle name.</param>
            <param name="dateOfBirth">The patient's date of birth.</param>
            <param name="gender">The patient's gender.</param>
            <param name="accountNumber">The patient account number.</param>
            <param name="street">The street address.</param>
            <param name="city">The city.</param>
            <param name="state">The state.</param>
            <param name="postalCode">The postal code.</param>
            <param name="homePhone">The home phone number.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.RDEMessage.SetOrderInfo(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
            Sets order control and provider information.
            </summary>
            <param name="orderControl">The order control code (NW, CA, DC, etc.).</param>
            <param name="orderingProvider">The ordering provider ID.</param>
            <param name="orderingProviderDEA">The ordering provider's DEA number.</param>
            <param name="enteredBy">The user who entered the order.</param>
            <param name="orderEffectiveDate">When the order becomes effective.</param>
            <param name="pharmacistId">The pharmacist verifier ID.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.RDEMessage.GetORCIndex">
            <summary>
            Gets the expected index for the ORC segment.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.RDEMessage.GetRXEIndex">
            <summary>
            Gets the expected index for the RXE segment.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.RDEMessage.ReplaceOrAddSegment(Segmint.Core.HL7.HL7Segment,System.Int32)">
            <summary>
            Replaces an existing segment or adds it at the specified index.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.RDEMessage.Validate">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Messages.RDEMessage.FindSegmentIndex(System.String)">
            <summary>
            Finds the index of the first segment with the specified ID.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.RDEMessage.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Messages.RDEMessage.CreateBasic(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a basic RDE message with standard pharmacy order information.
            </summary>
            <param name="sendingApp">The sending application.</param>
            <param name="sendingFacility">The sending facility.</param>
            <param name="receivingApp">The receiving application.</param>
            <param name="receivingFacility">The receiving facility.</param>
            <param name="patientId">The patient ID.</param>
            <param name="patientFirstName">Patient's first name.</param>
            <param name="patientLastName">Patient's last name.</param>
            <param name="drugCode">The drug code (NDC).</param>
            <param name="drugName">The drug name.</param>
            <param name="orderingProvider">The ordering provider ID.</param>
            <param name="isProduction">Whether this is a production message.</param>
            <returns>A configured RDE message.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Messages.RDEMessage.CreateComprehensive(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.String,System.String,System.Decimal,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Creates a comprehensive RDE message with full medication details.
            </summary>
            <param name="sendingApp">The sending application.</param>
            <param name="sendingFacility">The sending facility.</param>
            <param name="receivingApp">The receiving application.</param>
            <param name="receivingFacility">The receiving facility.</param>
            <param name="patientId">The patient ID.</param>
            <param name="patientFirstName">Patient's first name.</param>
            <param name="patientLastName">Patient's last name.</param>
            <param name="drugCode">The drug code (NDC).</param>
            <param name="drugName">The drug name.</param>
            <param name="strength">Drug strength.</param>
            <param name="strengthUnits">Strength units.</param>
            <param name="dosageForm">Dosage form.</param>
            <param name="dispenseQty">Quantity to dispense.</param>
            <param name="refills">Number of refills.</param>
            <param name="sig">Directions for use.</param>
            <param name="orderingProvider">The ordering provider ID.</param>
            <param name="isProduction">Whether this is a production message.</param>
            <returns>A configured RDE message.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Segments.AL1Segment">
            <summary>
            Represents an HL7 Patient Allergy Information (AL1) segment.
            This segment contains patient allergy information including allergens, severity, and reactions.
            Used in ADT messages and other patient-related message types.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.AL1Segment.SegmentId">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.AL1Segment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Segments.AL1Segment"/> class.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.AL1Segment.SetId">
            <summary>
            Gets or sets the set ID (AL1.1) - Required.
            Sequential number identifying the allergy record.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.AL1Segment.AllergenTypeCode">
            <summary>
            Gets or sets the allergen type code (AL1.2).
            Type of allergen: DA=Drug allergy, FA=Food allergy, MA=Miscellaneous allergy, MC=Miscellaneous contraindication.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.AL1Segment.AllergenCodeMnemonicDescription">
            <summary>
            Gets or sets the allergen code/mnemonic/description (AL1.3) - Required.
            Specific allergen identifier and description.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.AL1Segment.AllergySeverityCode">
            <summary>
            Gets or sets the allergy severity code (AL1.4).
            Severity of the allergic reaction: SV=Severe, MO=Moderate, MI=Mild, U=Unknown.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.AL1Segment.AllergyReactionCode">
            <summary>
            Gets or sets the allergy reaction code (AL1.5).
            Description of the allergic reaction or symptoms.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.AL1Segment.IdentificationDate">
            <summary>
            Gets or sets the identification date (AL1.6).
            Date when the allergy was first identified or documented.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.AL1Segment.InitializeFields">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.AL1Segment.SetBasicAllergy(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets basic allergy information.
            </summary>
            <param name="setId">Set ID for this allergy record.</param>
            <param name="allergenType">Type of allergen (DA, FA, MA, MC).</param>
            <param name="allergenCode">Allergen code.</param>
            <param name="allergenDescription">Allergen description.</param>
            <param name="severity">Severity code (SV, MO, MI, U).</param>
            <param name="reaction">Reaction description.</param>
            <param name="identificationDate">Date allergy was identified.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.AL1Segment.SetDrugAllergy(System.Int32,System.String,System.String,Segmint.Core.HL7.Segments.AllergySeverity,System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets a drug allergy.
            </summary>
            <param name="setId">Set ID for this allergy record.</param>
            <param name="drugCode">Drug code (e.g., NDC, RxNorm).</param>
            <param name="drugName">Drug name.</param>
            <param name="severity">Severity of the allergy.</param>
            <param name="reaction">Description of the reaction.</param>
            <param name="identificationDate">Date the allergy was identified.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.AL1Segment.SetFoodAllergy(System.Int32,System.String,System.String,Segmint.Core.HL7.Segments.AllergySeverity,System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets a food allergy.
            </summary>
            <param name="setId">Set ID for this allergy record.</param>
            <param name="foodCode">Food allergen code.</param>
            <param name="foodName">Food allergen name.</param>
            <param name="severity">Severity of the allergy.</param>
            <param name="reaction">Description of the reaction.</param>
            <param name="identificationDate">Date the allergy was identified.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.AL1Segment.SetEnvironmentalAllergy(System.Int32,System.String,System.String,Segmint.Core.HL7.Segments.AllergySeverity,System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets an environmental allergy.
            </summary>
            <param name="setId">Set ID for this allergy record.</param>
            <param name="allergenCode">Environmental allergen code.</param>
            <param name="allergenName">Environmental allergen name.</param>
            <param name="severity">Severity of the allergy.</param>
            <param name="reaction">Description of the reaction.</param>
            <param name="identificationDate">Date the allergy was identified.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.AL1Segment.SetContraindication(System.Int32,System.String,System.String,Segmint.Core.HL7.Segments.AllergySeverity,System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets a contraindication (non-allergy adverse reaction).
            </summary>
            <param name="setId">Set ID for this contraindication record.</param>
            <param name="substanceCode">Substance code.</param>
            <param name="substanceName">Substance name.</param>
            <param name="severity">Severity of the contraindication.</param>
            <param name="reaction">Description of the adverse reaction.</param>
            <param name="identificationDate">Date the contraindication was identified.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.AL1Segment.GetDisplayValue">
            <summary>
            Gets a display-friendly representation of the allergy.
            </summary>
            <returns>Formatted allergy string.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.AL1Segment.IsSevere">
            <summary>
            Determines if this is a severe allergy.
            </summary>
            <returns>True if the allergy is marked as severe.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.AL1Segment.GetAllergyType">
            <summary>
            Gets the allergy type.
            </summary>
            <returns>Allergy type enumeration.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.AL1Segment.Validate">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.AL1Segment.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.AL1Segment.CreateDrugAllergy(System.Int32,System.String,Segmint.Core.HL7.Segments.AllergySeverity,System.String)">
            <summary>
            Creates a drug allergy AL1 segment.
            </summary>
            <param name="setId">Set ID.</param>
            <param name="drugName">Drug name.</param>
            <param name="severity">Severity level.</param>
            <param name="reaction">Reaction description.</param>
            <returns>Configured AL1 segment.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.AL1Segment.CreateFoodAllergy(System.Int32,System.String,Segmint.Core.HL7.Segments.AllergySeverity,System.String)">
            <summary>
            Creates a food allergy AL1 segment.
            </summary>
            <param name="setId">Set ID.</param>
            <param name="foodName">Food allergen name.</param>
            <param name="severity">Severity level.</param>
            <param name="reaction">Reaction description.</param>
            <returns>Configured AL1 segment.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.AL1Segment.CreateEnvironmentalAllergy(System.Int32,System.String,Segmint.Core.HL7.Segments.AllergySeverity,System.String)">
            <summary>
            Creates an environmental allergy AL1 segment.
            </summary>
            <param name="setId">Set ID.</param>
            <param name="allergenName">Environmental allergen name.</param>
            <param name="severity">Severity level.</param>
            <param name="reaction">Reaction description.</param>
            <returns>Configured AL1 segment.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Segments.AllergyType">
            <summary>
            Types of allergies and contraindications.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.Segments.AllergySeverity">
            <summary>
            Severity levels for allergies and adverse reactions.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.Segments.EVNSegment">
            <summary>
            Represents an HL7 Event Type (EVN) segment.
            This segment identifies the event that triggered the message.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.EVNSegment.SegmentId">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.EVNSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Segments.EVNSegment"/> class.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.EVNSegment.EventTypeCode">
            <summary>
            Gets or sets the event type code (EVN.1) - Required.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.EVNSegment.RecordedDateTime">
            <summary>
            Gets or sets the recorded date/time (EVN.2) - Required.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.EVNSegment.DateTimePlannedEvent">
            <summary>
            Gets or sets the date/time planned event (EVN.3).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.EVNSegment.EventReasonCode">
            <summary>
            Gets or sets the event reason code (EVN.4).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.EVNSegment.OperatorId">
            <summary>
            Gets or sets the operator ID (EVN.5).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.EVNSegment.EventOccurred">
            <summary>
            Gets or sets the event occurred date/time (EVN.6).
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.EVNSegment.InitializeFields">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.EVNSegment.SetBasicInfo(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Sets basic event information.
            </summary>
            <param name="eventTypeCode">The event type code (e.g., "O01", "A01", "R01").</param>
            <param name="recordedDateTime">When the event was recorded.</param>
            <param name="eventOccurred">When the event actually occurred.</param>
            <param name="operatorId">The ID of the operator who triggered the event.</param>
            <param name="eventReasonCode">The reason for the event.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.EVNSegment.SetEventOccurredNow">
            <summary>
            Sets the event to have occurred now.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.EVNSegment.SetRecordedNow">
            <summary>
            Sets the recorded time to now.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.EVNSegment.SetEventTypeCode(System.String)">
            <summary>
            Sets the event type code (EVN.1).
            </summary>
            <param name="eventTypeCode">The event type code to set.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.EVNSegment.SetRecordedDateTime(System.DateTime)">
            <summary>
            Sets the recorded date/time (EVN.2).
            </summary>
            <param name="dateTime">The date/time when the event was recorded.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.EVNSegment.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.EVNSegment.CreateForRDE(System.String,System.Nullable{System.DateTime})">
            <summary>
            Creates an EVN segment for RDE (pharmacy order) messages.
            </summary>
            <param name="operatorId">The operator who created the order.</param>
            <param name="eventOccurred">When the order event occurred.</param>
            <returns>A configured EVN segment for RDE messages.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.EVNSegment.CreateForADT(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Creates an EVN segment for ADT (patient administration) messages.
            </summary>
            <param name="eventType">The ADT event type (A01, A03, A08, etc.).</param>
            <param name="operatorId">The operator who performed the action.</param>
            <param name="eventOccurred">When the event occurred.</param>
            <returns>A configured EVN segment for ADT messages.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.EVNSegment.CreateForACK(System.String)">
            <summary>
            Creates an EVN segment for ACK (acknowledgment) messages.
            </summary>
            <param name="operatorId">The operator who processed the acknowledgment.</param>
            <returns>A configured EVN segment for ACK messages.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.EVNSegment.CreateForRDS(System.String,System.Nullable{System.DateTime})">
            <summary>
            Creates an EVN segment for RDS (dispense) messages.
            </summary>
            <param name="operatorId">The operator who dispensed the medication.</param>
            <param name="eventOccurred">When the dispense occurred.</param>
            <returns>A configured EVN segment for RDS messages.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Segments.MSASegment">
            <summary>
            Represents the HL7 MSA (Message Acknowledgment) segment.
            Contains acknowledgment information for received messages.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSASegment.SegmentId">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSASegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Segments.MSASegment"/> class.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSASegment.InitializeFields">
            <summary>
            Initializes the segment fields according to HL7 v2.3 specification.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSASegment.AcknowledgmentCode">
            <summary>
            Gets or sets the acknowledgment code.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSASegment.MessageControlId">
            <summary>
            Gets or sets the message control ID.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSASegment.TextMessage">
            <summary>
            Gets or sets the text message.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSASegment.ExpectedSequenceNumber">
            <summary>
            Gets or sets the expected sequence number.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSASegment.DelayedAcknowledgmentType">
            <summary>
            Gets or sets the delayed acknowledgment type.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSASegment.ErrorCondition">
            <summary>
            Gets or sets the error condition.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSASegment.CreateSuccessfulAck(System.String,System.String)">
            <summary>
            Creates a successful acknowledgment.
            </summary>
            <param name="messageControlId">The message control ID being acknowledged.</param>
            <param name="textMessage">Optional text message.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.MSASegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSASegment.CreateErrorAck(System.String,System.String,System.String)">
            <summary>
            Creates an error acknowledgment.
            </summary>
            <param name="messageControlId">The message control ID being acknowledged.</param>
            <param name="errorMessage">The error message.</param>
            <param name="errorCode">The error code (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.MSASegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSASegment.CreateRejectionAck(System.String,System.String,System.String)">
            <summary>
            Creates a rejection acknowledgment.
            </summary>
            <param name="messageControlId">The message control ID being acknowledged.</param>
            <param name="rejectionMessage">The rejection message.</param>
            <param name="errorCode">The error code (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.MSASegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSASegment.CreateCommitAcceptAck(System.String,System.String)">
            <summary>
            Creates a commit accept acknowledgment.
            </summary>
            <param name="messageControlId">The message control ID being acknowledged.</param>
            <param name="textMessage">Optional text message.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.MSASegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSASegment.CreateCommitErrorAck(System.String,System.String,System.String)">
            <summary>
            Creates a commit error acknowledgment.
            </summary>
            <param name="messageControlId">The message control ID being acknowledged.</param>
            <param name="errorMessage">The error message.</param>
            <param name="errorCode">The error code (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.MSASegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSASegment.CreateCommitRejectAck(System.String,System.String,System.String)">
            <summary>
            Creates a commit reject acknowledgment.
            </summary>
            <param name="messageControlId">The message control ID being acknowledged.</param>
            <param name="rejectionMessage">The rejection message.</param>
            <param name="errorCode">The error code (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.MSASegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSASegment.SetAcknowledgmentCode(System.String)">
            <summary>
            Sets the acknowledgment code.
            </summary>
            <param name="code">The acknowledgment code (AA, AE, AR, CA, CE, CR).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSASegment.SetMessageControlId(System.String)">
            <summary>
            Sets the message control ID.
            </summary>
            <param name="messageControlId">The message control ID.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSASegment.SetTextMessage(System.String)">
            <summary>
            Sets the text message.
            </summary>
            <param name="textMessage">The text message.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSASegment.SetErrorCondition(System.String,System.String,System.String)">
            <summary>
            Sets the error condition.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="errorDescription">The error description.</param>
            <param name="codingSystem">The coding system (optional).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSASegment.GetAcknowledgmentCodeDescription">
            <summary>
            Gets the acknowledgment code description.
            </summary>
            <returns>A human-readable description of the acknowledgment code.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSASegment.IsSuccessful">
            <summary>
            Gets a value indicating whether this acknowledgment indicates success.
            </summary>
            <returns>True if the acknowledgment indicates success, false otherwise.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSASegment.ToDisplayString">
            <summary>
            Gets a formatted display string for this acknowledgment.
            </summary>
            <returns>A human-readable representation of the acknowledgment.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSASegment.Clone">
            <summary>
            Creates a copy of this segment.
            </summary>
            <returns>A new instance with the same field values.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Segments.MSHSegment">
            <summary>
            Represents an HL7 Message Header (MSH) segment.
            This segment contains information about the message itself and is required in all HL7 messages.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.SegmentId">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Segments.MSHSegment"/> class.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.FieldSeparator">
            <summary>
            Gets or sets the field separator (MSH.1). Default is "|".
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.EncodingCharacters">
            <summary>
            Gets or sets the encoding characters (MSH.2). Default is ^~\&amp;.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.SendingApplication">
            <summary>
            Gets or sets the sending application (MSH.3).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.SendingFacility">
            <summary>
            Gets or sets the sending facility (MSH.4).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.ReceivingApplication">
            <summary>
            Gets or sets the receiving application (MSH.5).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.ReceivingFacility">
            <summary>
            Gets or sets the receiving facility (MSH.6).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.DateTimeOfMessage">
            <summary>
            Gets or sets the date/time of message (MSH.7).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.Security">
            <summary>
            Gets or sets the security (MSH.8).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.MessageType">
            <summary>
            Gets or sets the message type (MSH.9).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.TriggerEvent">
            <summary>
            Gets the trigger event from the message type (MSH.9.2).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.MessageControlId">
            <summary>
            Gets or sets the message control ID (MSH.10).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.ProcessingId">
            <summary>
            Gets or sets the processing ID (MSH.11).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.VersionId">
            <summary>
            Gets or sets the version ID (MSH.12).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.SequenceNumber">
            <summary>
            Gets or sets the sequence number (MSH.13).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.ContinuationPointer">
            <summary>
            Gets or sets the continuation pointer (MSH.14).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.AcceptAcknowledgmentType">
            <summary>
            Gets or sets the accept acknowledgment type (MSH.15).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.ApplicationAcknowledgmentType">
            <summary>
            Gets or sets the application acknowledgment type (MSH.16).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.CountryCode">
            <summary>
            Gets or sets the country code (MSH.17).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.CharacterSet">
            <summary>
            Gets or sets the character set (MSH.18).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.MSHSegment.PrincipalLanguageOfMessage">
            <summary>
            Gets or sets the principal language of message (MSH.19).
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.InitializeFields">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.SetBasicInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets basic message header information.
            </summary>
            <param name="sendingApplication">The sending application name.</param>
            <param name="sendingFacility">The sending facility name.</param>
            <param name="receivingApplication">The receiving application name.</param>
            <param name="receivingFacility">The receiving facility name.</param>
            <param name="messageType">The message type (e.g., "RDE^O01^RDE_O01").</param>
            <param name="messageControlId">The unique message control ID.</param>
            <param name="processingId">The processing ID (P=Production, T=Test, D=Debug).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.SetMessageType(System.String,System.String,System.String)">
            <summary>
            Sets the message type using standard HL7 format.
            </summary>
            <param name="messageCode">The message code (e.g., "RDE", "ADT", "ACK").</param>
            <param name="triggerEvent">The trigger event (e.g., "O01", "A01", "R01").</param>
            <param name="messageStructure">The message structure (optional, defaults to messageCode_triggerEvent).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.GenerateMessageControlId(System.String)">
            <summary>
            Generates a unique message control ID based on timestamp and random component.
            </summary>
            <param name="prefix">Optional prefix for the control ID.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.SetMessageControlId(System.String)">
            <summary>
            Sets the message control ID to a specific value.
            </summary>
            <param name="messageControlId">The message control ID to set.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.SetProcessingId(System.Boolean)">
            <summary>
            Sets standard processing ID values.
            </summary>
            <param name="isProduction">True for production (P), false for test (T).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.SetAcknowledgmentTypes(System.String,System.String)">
            <summary>
            Sets standard acknowledgment types.
            </summary>
            <param name="acceptAck">Accept acknowledgment type (AL=Always, NE=Never, ER=Error/Reject, SU=Success).</param>
            <param name="appAck">Application acknowledgment type (AL=Always, NE=Never, ER=Error/Reject, SU=Success).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.CreateForRDE(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a standard MSH segment for RDE messages.
            </summary>
            <param name="sendingApp">The sending application.</param>
            <param name="sendingFacility">The sending facility.</param>
            <param name="receivingApp">The receiving application.</param>
            <param name="receivingFacility">The receiving facility.</param>
            <param name="isProduction">Whether this is a production message.</param>
            <returns>A configured MSH segment for RDE messages.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.CreateForADT(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a standard MSH segment for ADT messages.
            </summary>
            <param name="sendingApp">The sending application.</param>
            <param name="sendingFacility">The sending facility.</param>
            <param name="receivingApp">The receiving application.</param>
            <param name="receivingFacility">The receiving facility.</param>
            <param name="eventType">The ADT event type (A01, A03, A08, etc.).</param>
            <param name="isProduction">Whether this is a production message.</param>
            <returns>A configured MSH segment for ADT messages.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.CreateForACK(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a standard MSH segment for ACK messages.
            </summary>
            <param name="sendingApp">The sending application.</param>
            <param name="sendingFacility">The sending facility.</param>
            <param name="receivingApp">The receiving application.</param>
            <param name="receivingFacility">The receiving facility.</param>
            <param name="originalControlId">The message control ID from the original message being acknowledged.</param>
            <param name="isProduction">Whether this is a production message.</param>
            <returns>A configured MSH segment for ACK messages.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.SetVersionId(System.String)">
            <summary>
            Sets the version ID (MSH.12).
            </summary>
            <param name="versionId">The HL7 version (e.g., "2.3").</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.SetTriggerEvent(System.String)">
            <summary>
            Sets the trigger event code within the message type.
            </summary>
            <param name="triggerEvent">The trigger event code (e.g., "O01", "A01").</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.SetSendingApplication(System.String)">
            <summary>
            Sets the sending application (MSH.3).
            </summary>
            <param name="sendingApplication">The sending application name.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.SetSendingFacility(System.String)">
            <summary>
            Sets the sending facility (MSH.4).
            </summary>
            <param name="sendingFacility">The sending facility name.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.SetReceivingApplication(System.String)">
            <summary>
            Sets the receiving application (MSH.5).
            </summary>
            <param name="receivingApplication">The receiving application name.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.MSHSegment.SetReceivingFacility(System.String)">
            <summary>
            Sets the receiving facility (MSH.6).
            </summary>
            <param name="receivingFacility">The receiving facility name.</param>
        </member>
        <member name="T:Segmint.Core.HL7.Segments.NTESegment">
            <summary>
            Represents the HL7 NTE (Notes and Comments) segment.
            Contains free-text notes and comments that can be associated with various other segments.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.NTESegment.SegmentId">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.NTESegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Segments.NTESegment"/> class.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.NTESegment.InitializeFields">
            <summary>
            Initializes the segment fields according to HL7 v2.3 specification.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.NTESegment.SetId">
            <summary>
            Gets or sets the set ID.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.NTESegment.SourceOfComment">
            <summary>
            Gets or sets the source of comment.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.NTESegment.Comment">
            <summary>
            Gets or sets the comment text.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.NTESegment.CreatePatientNote(System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new NTE segment for a patient note.
            </summary>
            <param name="comment">The comment text.</param>
            <param name="setId">The set ID (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.NTESegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.NTESegment.CreatePhysicianNote(System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new NTE segment for a physician note.
            </summary>
            <param name="comment">The comment text.</param>
            <param name="setId">The set ID (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.NTESegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.NTESegment.CreatePharmacyNote(System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new NTE segment for a pharmacy note.
            </summary>
            <param name="comment">The comment text.</param>
            <param name="setId">The set ID (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.NTESegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.NTESegment.CreateNursingNote(System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new NTE segment for a nursing note.
            </summary>
            <param name="comment">The comment text.</param>
            <param name="setId">The set ID (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.NTESegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.NTESegment.CreateGeneralNote(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new NTE segment for a general note.
            </summary>
            <param name="comment">The comment text.</param>
            <param name="source">The source of the comment (optional).</param>
            <param name="setId">The set ID (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.NTESegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.NTESegment.SetComment(System.String)">
            <summary>
            Sets the comment text.
            </summary>
            <param name="comment">The comment text.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.NTESegment.SetSourceOfComment(System.String)">
            <summary>
            Sets the source of comment.
            </summary>
            <param name="source">The source code (P=Patient, L=Physician, R=Pharmacy, N=Nursing, etc.).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.NTESegment.SetSetId(System.Int32)">
            <summary>
            Sets the set ID for this note.
            </summary>
            <param name="setId">The set ID.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.NTESegment.GetSourceDisplayText">
            <summary>
            Gets the display text for the comment source.
            </summary>
            <returns>A human-readable description of the comment source.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.NTESegment.ToDisplayString">
            <summary>
            Gets a formatted display string for this note.
            </summary>
            <returns>A human-readable representation of the note.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.NTESegment.Clone">
            <summary>
            Creates a copy of this segment.
            </summary>
            <returns>A new instance with the same field values.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Segments.OBXSegment">
            <summary>
            Represents an HL7 Observation/Result (OBX) segment.
            This segment is used to transmit individual observations or results.
            Used in many message types including ORU (Lab Results), ADT (Patient observations), and others.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.SegmentId">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.OBXSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Segments.OBXSegment"/> class.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.SetId">
            <summary>
            Gets or sets the set ID (OBX.1) - Required.
            Sequential number of the observation within a group.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.ValueType">
            <summary>
            Gets or sets the value type (OBX.2) - Required.
            Defines the data type of the observation value.
            Common values: CE (Coded Element), NM (Numeric), ST (String Text), TX (Text), etc.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.ObservationIdentifier">
            <summary>
            Gets or sets the observation identifier (OBX.3) - Required.
            Identifies what is being observed (e.g., lab test, vital sign).
            Usually contains LOINC codes for standardization.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.ObservationSubId">
            <summary>
            Gets or sets the observation sub-ID (OBX.4).
            Used when multiple observations of the same type are reported.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.ObservationValue">
            <summary>
            Gets or sets the observation value (OBX.5).
            The actual result/observation data. Data type varies based on ValueType.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.Units">
            <summary>
            Gets or sets the units (OBX.6).
            Units of measure for the observation value.
            Should use UCUM (Unified Code for Units of Measure) when possible.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.ReferenceRange">
            <summary>
            Gets or sets the reference range (OBX.7).
            Normal range or reference values for the observation.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.AbnormalFlags">
            <summary>
            Gets or sets the abnormal flags (OBX.8).
            Indicates if the result is abnormal (H=High, L=Low, A=Abnormal, etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.Probability">
            <summary>
            Gets or sets the probability (OBX.9).
            Statistical probability of the observation.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.NatureOfAbnormalTest">
            <summary>
            Gets or sets the nature of abnormal test (OBX.10).
            Describes the nature of abnormal results.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.ObservationResultStatus">
            <summary>
            Gets or sets the observation result status (OBX.11) - Required.
            Status of the result: F=Final, P=Preliminary, C=Corrected, etc.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.EffectiveDateOfReferenceRange">
            <summary>
            Gets or sets the effective date of reference range (OBX.12).
            When the reference range values were established.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.UserDefinedAccessChecks">
            <summary>
            Gets or sets the user defined access checks (OBX.13).
            Security or access control information.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.DateTimeOfObservation">
            <summary>
            Gets or sets the date/time of observation (OBX.14).
            When the observation was made or specimen collected.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.ProducerId">
            <summary>
            Gets or sets the producer's ID (OBX.15).
            Identifies who or what produced the observation.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.ResponsibleObserver">
            <summary>
            Gets or sets the responsible observer (OBX.16).
            Person responsible for the observation.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.OBXSegment.ObservationMethod">
            <summary>
            Gets or sets the observation method (OBX.17).
            Method used to obtain the observation.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.OBXSegment.InitializeFields">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.OBXSegment.SetBasicObservation(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets basic observation information.
            </summary>
            <param name="setId">Set ID for this observation.</param>
            <param name="valueType">Type of the observation value.</param>
            <param name="observationCode">Code identifying the observation.</param>
            <param name="observationName">Name/description of the observation.</param>
            <param name="observationValue">The actual observation value.</param>
            <param name="units">Units of measure.</param>
            <param name="resultStatus">Status of the result (F=Final, P=Preliminary).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.OBXSegment.SetNumericLabResult(System.Int32,System.String,System.String,System.Decimal,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets a numeric lab result with reference range.
            </summary>
            <param name="setId">Set ID for this observation.</param>
            <param name="testCode">Lab test code (usually LOINC).</param>
            <param name="testName">Lab test name.</param>
            <param name="numericValue">Numeric result value.</param>
            <param name="units">Units of measure.</param>
            <param name="referenceRange">Normal reference range.</param>
            <param name="abnormalFlag">Abnormal flag if applicable (H, L, A, etc.).</param>
            <param name="resultStatus">Result status.</param>
            <param name="observationDateTime">When observation was made.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.OBXSegment.SetCodedLabResult(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets a coded lab result (e.g., positive/negative, present/absent).
            </summary>
            <param name="setId">Set ID for this observation.</param>
            <param name="testCode">Lab test code.</param>
            <param name="testName">Lab test name.</param>
            <param name="resultCode">Result code.</param>
            <param name="resultText">Result description.</param>
            <param name="codingSystem">Coding system for result.</param>
            <param name="resultStatus">Result status.</param>
            <param name="observationDateTime">When observation was made.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.OBXSegment.SetTextObservation(System.Int32,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets a text-based observation (e.g., clinical notes, impressions).
            </summary>
            <param name="setId">Set ID for this observation.</param>
            <param name="observationCode">Observation code.</param>
            <param name="observationName">Observation name.</param>
            <param name="textValue">Text observation value.</param>
            <param name="resultStatus">Result status.</param>
            <param name="observationDateTime">When observation was made.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.OBXSegment.SetVitalSign(System.Int32,Segmint.Core.HL7.Segments.VitalSignType,System.Decimal,System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets vital signs observation.
            </summary>
            <param name="setId">Set ID for this observation.</param>
            <param name="vitalSignType">Type of vital sign.</param>
            <param name="value">Vital sign value.</param>
            <param name="units">Units of measure.</param>
            <param name="observationDateTime">When vital was taken.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.OBXSegment.SetObservationMethod(System.String,System.String,System.String)">
            <summary>
            Sets observation method information.
            </summary>
            <param name="methodCode">Method code.</param>
            <param name="methodName">Method name.</param>
            <param name="codingSystem">Coding system.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.OBXSegment.SetResponsibleObserver(System.String,System.String,System.String)">
            <summary>
            Sets the responsible observer/performer.
            </summary>
            <param name="observerId">Observer ID.</param>
            <param name="observerName">Observer name.</param>
            <param name="observerType">Type of observer.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.OBXSegment.IsAbnormal">
            <summary>
            Determines if the observation value is abnormal based on reference range.
            </summary>
            <returns>True if abnormal, false if normal or cannot determine.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.OBXSegment.GetDisplayValue">
            <summary>
            Gets a display-friendly representation of the observation.
            </summary>
            <returns>Formatted observation string.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.OBXSegment.Validate">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.OBXSegment.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.OBXSegment.CreateLabResult(System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a basic lab result OBX segment.
            </summary>
            <param name="setId">Set ID.</param>
            <param name="testCode">Test code.</param>
            <param name="testName">Test name.</param>
            <param name="result">Result value.</param>
            <param name="units">Units.</param>
            <param name="referenceRange">Reference range.</param>
            <returns>Configured OBX segment.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.OBXSegment.CreateVitalSign(System.Int32,Segmint.Core.HL7.Segments.VitalSignType,System.Decimal,System.Nullable{System.DateTime})">
            <summary>
            Creates a vital sign OBX segment.
            </summary>
            <param name="setId">Set ID.</param>
            <param name="vitalType">Type of vital sign.</param>
            <param name="value">Vital sign value.</param>
            <param name="observationTime">When vital was taken.</param>
            <returns>Configured OBX segment.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Segments.VitalSignType">
            <summary>
            Common vital sign types with standardized LOINC codes.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.Segments.ORCSegment">
            <summary>
            Represents an HL7 Common Order (ORC) segment.
            This segment contains information common to all orders.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.SegmentId">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.ORCSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Segments.ORCSegment"/> class.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.OrderControl">
            <summary>
            Gets or sets the order control (ORC.1) - Required.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.PlacerOrderNumber">
            <summary>
            Gets or sets the placer order number (ORC.2).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.FillerOrderNumber">
            <summary>
            Gets or sets the filler order number (ORC.3).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.PlacerGroupNumber">
            <summary>
            Gets or sets the placer group number (ORC.4).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.OrderStatus">
            <summary>
            Gets or sets the order status (ORC.5).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.ResponseFlag">
            <summary>
            Gets or sets the response flag (ORC.6).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.QuantityTiming">
            <summary>
            Gets or sets the quantity/timing (ORC.7).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.ParentOrder">
            <summary>
            Gets or sets the parent order (ORC.8).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.DateTimeOfTransaction">
            <summary>
            Gets or sets the date/time of transaction (ORC.9).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.EnteredBy">
            <summary>
            Gets or sets the entered by (ORC.10).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.VerifiedBy">
            <summary>
            Gets or sets the verified by (ORC.11).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.OrderingProvider">
            <summary>
            Gets or sets the ordering provider (ORC.12).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.EnterersLocation">
            <summary>
            Gets or sets the enterer's location (ORC.13).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.CallBackPhoneNumber">
            <summary>
            Gets or sets the call back phone number (ORC.14).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.OrderEffectiveDateTime">
            <summary>
            Gets or sets the order effective date/time (ORC.15).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.OrderControlCodeReason">
            <summary>
            Gets or sets the order control code reason (ORC.16).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.EnteringOrganization">
            <summary>
            Gets or sets the entering organization (ORC.17).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.EnteringDevice">
            <summary>
            Gets or sets the entering device (ORC.18).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.ORCSegment.ActionBy">
            <summary>
            Gets or sets the action by (ORC.19).
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.ORCSegment.InitializeFields">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.ORCSegment.SetBasicInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets basic order information.
            </summary>
            <param name="orderControl">The order control code (NW=New, CA=Cancel, DC=Discontinue, etc.).</param>
            <param name="placerOrderNumber">The placer order number.</param>
            <param name="fillerOrderNumber">The filler order number.</param>
            <param name="orderStatus">The order status (A=Active, C=Cancelled, etc.).</param>
            <param name="orderingProvider">The ordering provider ID.</param>
            <param name="enteredBy">The user who entered the order.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.ORCSegment.SetTiming(System.Nullable{System.DateTime},System.String)">
            <summary>
            Sets timing and scheduling information.
            </summary>
            <param name="orderEffectiveDateTime">When the order becomes effective.</param>
            <param name="quantityTiming">Quantity and timing instructions.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.ORCSegment.SetProviderInfo(System.String,System.String,System.String,System.String)">
            <summary>
            Sets provider and location information.
            </summary>
            <param name="orderingProvider">The ordering provider.</param>
            <param name="enterersLocation">The location where order was entered.</param>
            <param name="callBackPhone">Callback phone number.</param>
            <param name="verifiedBy">The user who verified the order.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.ORCSegment.GeneratePlacerOrderNumber(System.String)">
            <summary>
            Generates a unique placer order number.
            </summary>
            <param name="prefix">Optional prefix for the order number.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.ORCSegment.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.ORCSegment.CreateForNewOrder(System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Creates an ORC segment for a new pharmacy order.
            </summary>
            <param name="placerOrderNumber">The placer order number.</param>
            <param name="orderingProvider">The ordering provider ID.</param>
            <param name="enteredBy">The user who entered the order.</param>
            <param name="orderEffectiveDateTime">When the order becomes effective.</param>
            <returns>A configured ORC segment for new orders.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.ORCSegment.CreateForCancelOrder(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an ORC segment for cancelling an order.
            </summary>
            <param name="placerOrderNumber">The placer order number to cancel.</param>
            <param name="fillerOrderNumber">The filler order number to cancel.</param>
            <param name="orderingProvider">The ordering provider ID.</param>
            <param name="actionBy">The user who cancelled the order.</param>
            <param name="reasonCode">The reason for cancellation.</param>
            <returns>A configured ORC segment for order cancellation.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.ORCSegment.CreateForDiscontinueOrder(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an ORC segment for discontinuing an order.
            </summary>
            <param name="placerOrderNumber">The placer order number to discontinue.</param>
            <param name="fillerOrderNumber">The filler order number to discontinue.</param>
            <param name="orderingProvider">The ordering provider ID.</param>
            <param name="actionBy">The user who discontinued the order.</param>
            <param name="reasonCode">The reason for discontinuation.</param>
            <returns>A configured ORC segment for order discontinuation.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Segments.PIDSegment">
            <summary>
            Represents an HL7 Patient Identification (PID) segment.
            This segment contains patient demographic and identification information.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.SegmentId">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PIDSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Segments.PIDSegment"/> class.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.SetId">
            <summary>
            Gets or sets the set ID (PID.1).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.PatientIdExternal">
            <summary>
            Gets or sets the patient ID external (PID.2).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.PatientIdentifierList">
            <summary>
            Gets or sets the patient identifier list (PID.3) - Required.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.AlternatePatientId">
            <summary>
            Gets or sets the alternate patient ID (PID.4).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.PatientName">
            <summary>
            Gets or sets the patient name (PID.5) - Required.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.MothersMaidenName">
            <summary>
            Gets or sets the mother's maiden name (PID.6).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.DateTimeOfBirth">
            <summary>
            Gets or sets the date/time of birth (PID.7).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.AdministrativeSex">
            <summary>
            Gets or sets the administrative sex (PID.8).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.PatientAlias">
            <summary>
            Gets or sets the patient alias (PID.9).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.Race">
            <summary>
            Gets or sets the race (PID.10).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.PatientAddress">
            <summary>
            Gets or sets the patient address (PID.11).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.CountyCode">
            <summary>
            Gets or sets the county code (PID.12).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.PhoneNumberHome">
            <summary>
            Gets or sets the phone number - home (PID.13).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.PhoneNumberBusiness">
            <summary>
            Gets or sets the phone number - business (PID.14).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.PrimaryLanguage">
            <summary>
            Gets or sets the primary language (PID.15).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.MaritalStatus">
            <summary>
            Gets or sets the marital status (PID.16).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.Religion">
            <summary>
            Gets or sets the religion (PID.17).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.PatientAccountNumber">
            <summary>
            Gets or sets the patient account number (PID.18).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.SsnNumber">
            <summary>
            Gets or sets the SSN number - patient (PID.19).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.PatientId">
            <summary>
            Gets or sets the patient ID (alias for PatientIdentifierList for test compatibility).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.DateOfBirth">
            <summary>
            Gets or sets the date of birth (alias for DateTimeOfBirth for test compatibility).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.Gender">
            <summary>
            Gets or sets the gender (alias for AdministrativeSex for test compatibility).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PIDSegment.SocialSecurityNumber">
            <summary>
            Gets or sets the social security number (alias for SsnNumber for test compatibility).
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PIDSegment.InitializeFields">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PIDSegment.SetBasicInfo(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Sets basic patient demographic information.
            </summary>
            <param name="patientId">The primary patient identifier.</param>
            <param name="lastName">The patient's last name.</param>
            <param name="firstName">The patient's first name.</param>
            <param name="middleName">The patient's middle name or initial.</param>
            <param name="dateOfBirth">The patient's date of birth.</param>
            <param name="gender">The patient's gender (M/F/U).</param>
            <param name="accountNumber">The patient account number.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PIDSegment.SetAddress(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the patient's address information.
            </summary>
            <param name="street">The street address.</param>
            <param name="city">The city.</param>
            <param name="state">The state or province.</param>
            <param name="postalCode">The postal/ZIP code.</param>
            <param name="country">The country.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PIDSegment.SetGender(System.String)">
            <summary>
            Sets standard gender values.
            </summary>
            <param name="gender">The gender (Male, Female, Unknown, or custom value).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PIDSegment.SetPatientId(System.String)">
            <summary>
            Sets the patient identifier (PID.3).
            </summary>
            <param name="patientId">The patient identifier.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PIDSegment.SetPatientName(System.String,System.String,System.String)">
            <summary>
            Sets the patient name (PID.5).
            </summary>
            <param name="lastName">The patient's last name.</param>
            <param name="firstName">The patient's first name.</param>
            <param name="middleName">The patient's middle name.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PIDSegment.SetDateOfBirth(System.DateTime)">
            <summary>
            Sets the patient's date of birth (PID.7).
            </summary>
            <param name="dateOfBirth">The patient's date of birth.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PIDSegment.SetSocialSecurityNumber(System.String)">
            <summary>
            Sets the patient's social security number (PID.19).
            </summary>
            <param name="ssn">The social security number.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PIDSegment.SetPatientAddress(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the patient's address information (PID.11).
            </summary>
            <param name="streetAddress">The street address.</param>
            <param name="city">The city.</param>
            <param name="state">The state or province.</param>
            <param name="zipCode">The postal/ZIP code.</param>
            <param name="country">The country.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PIDSegment.SetPhoneNumbers(System.String,System.String)">
            <summary>
            Sets the patient's phone numbers.
            </summary>
            <param name="homePhone">The home phone number.</param>
            <param name="businessPhone">The business phone number.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PIDSegment.SetDemographics(System.Nullable{System.ValueTuple{System.String,System.String}},System.Nullable{System.ValueTuple{System.String,System.String}},System.Nullable{System.ValueTuple{System.String,System.String}},System.Nullable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Sets coded elements for demographics.
            </summary>
            <param name="race">The patient's race code and description.</param>
            <param name="maritalStatus">The patient's marital status code and description.</param>
            <param name="religion">The patient's religion code and description.</param>
            <param name="primaryLanguage">The patient's primary language code and description.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PIDSegment.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PIDSegment.CreateBasic(System.String,System.String,System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
            Creates a basic PID segment with minimal required information.
            </summary>
            <param name="patientId">The patient identifier.</param>
            <param name="firstName">The patient's first name.</param>
            <param name="lastName">The patient's last name.</param>
            <param name="dateOfBirth">The patient's date of birth.</param>
            <param name="gender">The patient's gender.</param>
            <returns>A configured PID segment.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PIDSegment.CreateComprehensive(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a comprehensive PID segment with full demographic information.
            </summary>
            <param name="patientId">The patient identifier.</param>
            <param name="firstName">The patient's first name.</param>
            <param name="lastName">The patient's last name.</param>
            <param name="middleName">The patient's middle name.</param>
            <param name="dateOfBirth">The patient's date of birth.</param>
            <param name="gender">The patient's gender.</param>
            <param name="street">The street address.</param>
            <param name="city">The city.</param>
            <param name="state">The state.</param>
            <param name="postalCode">The postal code.</param>
            <param name="homePhone">The home phone number.</param>
            <param name="accountNumber">The patient account number.</param>
            <returns>A configured PID segment.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Segments.PV1Segment">
            <summary>
            Represents the HL7 PV1 (Patient Visit) segment.
            Contains patient visit information including location, attending physician, and visit details.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PV1Segment.SegmentId">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PV1Segment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Segments.PV1Segment"/> class.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PV1Segment.InitializeFields">
            <summary>
            Initializes the segment fields according to HL7 v2.3 specification.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PV1Segment.SetId">
            <summary>
            Gets or sets the set ID.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PV1Segment.PatientClass">
            <summary>
            Gets or sets the patient class.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PV1Segment.AssignedPatientLocation">
            <summary>
            Gets or sets the assigned patient location.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PV1Segment.AdmissionType">
            <summary>
            Gets or sets the admission type.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PV1Segment.PreadmitNumber">
            <summary>
            Gets or sets the preadmit number.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PV1Segment.PriorPatientLocation">
            <summary>
            Gets or sets the prior patient location.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PV1Segment.AttendingDoctor">
            <summary>
            Gets or sets the attending doctor.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PV1Segment.ReferringDoctor">
            <summary>
            Gets or sets the referring doctor.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PV1Segment.ConsultingDoctor">
            <summary>
            Gets or sets the consulting doctor.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PV1Segment.HospitalService">
            <summary>
            Gets or sets the hospital service.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PV1Segment.VisitNumber">
            <summary>
            Gets or sets the visit number.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PV1Segment.FinancialClass">
            <summary>
            Gets or sets the financial class.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PV1Segment.AdmittingDoctor">
            <summary>
            Gets or sets the admitting doctor.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PV1Segment.AdmitDateTime">
            <summary>
            Gets or sets the admit date/time.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.PV1Segment.DischargeDateTime">
            <summary>
            Gets or sets the discharge date/time.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PV1Segment.SetPatientClass(System.String)">
            <summary>
            Sets the patient class for common visit types.
            </summary>
            <param name="patientClass">The patient class (E=Emergency, I=Inpatient, O=Outpatient, P=Preadmit, R=Recurring, B=Obstetrics, N=Not Applicable).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PV1Segment.SetAssignedPatientLocation(System.String)">
            <summary>
            Sets the assigned patient location.
            </summary>
            <param name="location">The location string (e.g., "2W^201^A").</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PV1Segment.SetAttendingDoctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the attending doctor information.
            </summary>
            <param name="lastName">The doctor's last name.</param>
            <param name="firstName">The doctor's first name.</param>
            <param name="middleName">The doctor's middle name (optional).</param>
            <param name="suffix">The doctor's suffix (optional).</param>
            <param name="prefix">The doctor's prefix (optional).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PV1Segment.SetVisitNumber(System.String,System.String)">
            <summary>
            Sets the visit number.
            </summary>
            <param name="visitNumber">The visit number.</param>
            <param name="assigningAuthority">The assigning authority (optional).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PV1Segment.SetAdmissionType(System.String)">
            <summary>
            Sets the admission type.
            </summary>
            <param name="admissionType">The admission type (A=Accident, C=Elective, E=Emergency, L=Labor and Delivery, N=Newborn, R=Routine, T=Transfer, U=Unknown).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PV1Segment.SetAdmitDateTime(System.DateTime)">
            <summary>
            Sets the admit date and time.
            </summary>
            <param name="admitDateTime">The admit date and time.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PV1Segment.SetDischargeDateTime(System.DateTime)">
            <summary>
            Sets the discharge date and time.
            </summary>
            <param name="dischargeDateTime">The discharge date and time.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.PV1Segment.Clone">
            <summary>
            Creates a copy of this segment.
            </summary>
            <returns>A new instance with the same field values.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Segments.RXCSegment">
            <summary>
            Represents the HL7 RXC (Pharmacy/Treatment Component Order) segment.
            Contains information about components of a pharmaceutical order.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXCSegment.SegmentId">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXCSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Segments.RXCSegment"/> class.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXCSegment.InitializeFields">
            <summary>
            Initializes the segment fields according to HL7 v2.3 specification.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXCSegment.RXComponentType">
            <summary>
            Gets or sets the RX component type.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXCSegment.ComponentCode">
            <summary>
            Gets or sets the component code.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXCSegment.ComponentAmount">
            <summary>
            Gets or sets the component amount.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXCSegment.ComponentUnits">
            <summary>
            Gets or sets the component units.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXCSegment.ComponentStrength">
            <summary>
            Gets or sets the component strength.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXCSegment.ComponentStrengthUnits">
            <summary>
            Gets or sets the component strength units.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXCSegment.SupplementaryCode">
            <summary>
            Gets or sets the supplementary code.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXCSegment.ComponentDrugStrengthVolume">
            <summary>
            Gets or sets the component drug strength volume.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXCSegment.ComponentDrugStrengthVolumeUnits">
            <summary>
            Gets or sets the component drug strength volume units.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXCSegment.CreateBaseComponent(System.String,System.String,System.Nullable{System.Decimal},System.String)">
            <summary>
            Creates a new RXC segment for a base component.
            </summary>
            <param name="componentCode">The component code.</param>
            <param name="componentText">The component description.</param>
            <param name="amount">The component amount.</param>
            <param name="units">The component units.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.RXCSegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXCSegment.CreateAdditiveComponent(System.String,System.String,System.Nullable{System.Decimal},System.String)">
            <summary>
            Creates a new RXC segment for an additive component.
            </summary>
            <param name="componentCode">The component code.</param>
            <param name="componentText">The component description.</param>
            <param name="amount">The component amount.</param>
            <param name="units">The component units.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.RXCSegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXCSegment.CreateDiluentComponent(System.String,System.String,System.Nullable{System.Decimal},System.String)">
            <summary>
            Creates a new RXC segment for a diluent component.
            </summary>
            <param name="componentCode">The component code.</param>
            <param name="componentText">The component description.</param>
            <param name="amount">The component amount.</param>
            <param name="units">The component units.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.RXCSegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXCSegment.SetRXComponentType(System.String)">
            <summary>
            Sets the component type.
            </summary>
            <param name="componentType">The component type (B=Base, A=Additive, D=Diluent).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXCSegment.SetComponentCode(System.String,System.String,System.String)">
            <summary>
            Sets the component code and description.
            </summary>
            <param name="code">The component code.</param>
            <param name="text">The component description.</param>
            <param name="codingSystem">The coding system (optional).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXCSegment.SetComponentAmount(System.Decimal,System.String)">
            <summary>
            Sets the component amount and units.
            </summary>
            <param name="amount">The component amount.</param>
            <param name="units">The component units.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXCSegment.SetComponentStrength(System.Decimal,System.String)">
            <summary>
            Sets the component strength and units.
            </summary>
            <param name="strength">The component strength.</param>
            <param name="units">The strength units.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXCSegment.GetComponentTypeDisplayText">
            <summary>
            Gets the component type display text.
            </summary>
            <returns>A human-readable description of the component type.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXCSegment.ToDisplayString">
            <summary>
            Gets a formatted display string for this component.
            </summary>
            <returns>A human-readable representation of the component.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXCSegment.Clone">
            <summary>
            Creates a copy of this segment.
            </summary>
            <returns>A new instance with the same field values.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Segments.RXESegment">
            <summary>
            Represents an HL7 Pharmacy/Treatment Encoded Order (RXE) segment.
            This segment contains detailed pharmacy order information.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.SegmentId">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXESegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Segments.RXESegment"/> class.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.QuantityTiming">
            <summary>
            Gets or sets the quantity/timing (RXE.1) - Required.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.GiveCode">
            <summary>
            Gets or sets the give code (RXE.2) - Required.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.GiveAmountMinimum">
            <summary>
            Gets or sets the give amount minimum (RXE.3) - Required.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.GiveAmountMaximum">
            <summary>
            Gets or sets the give amount maximum (RXE.4).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.GiveUnits">
            <summary>
            Gets or sets the give units (RXE.5) - Required.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.GiveDosageForm">
            <summary>
            Gets or sets the give dosage form (RXE.6).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.ProvidersAdministrationInstructions">
            <summary>
            Gets or sets the provider's administration instructions (RXE.7).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.DeliverToLocation">
            <summary>
            Gets or sets the deliver-to location (RXE.8).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.SubstitutionStatus">
            <summary>
            Gets or sets the substitution status (RXE.9).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.DispenseAmount">
            <summary>
            Gets or sets the dispense amount (RXE.10).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.DispenseUnits">
            <summary>
            Gets or sets the dispense units (RXE.11).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.NumberOfRefills">
            <summary>
            Gets or sets the number of refills (RXE.12).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.OrderingProvidersDEANumber">
            <summary>
            Gets or sets the ordering provider's DEA number (RXE.13).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.PharmacistTreatmentSuppliersVerifierId">
            <summary>
            Gets or sets the pharmacist/treatment supplier's verifier ID (RXE.14).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.PrescriptionNumber">
            <summary>
            Gets or sets the prescription number (RXE.15).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.NumberOfRefillsRemaining">
            <summary>
            Gets or sets the number of refills remaining (RXE.16).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.NumberOfRefillsDosesDispensed">
            <summary>
            Gets or sets the number of refills/doses dispensed (RXE.17).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.DateTimeOfMostRecentRefillOrDoseDispensed">
            <summary>
            Gets or sets the D/T of most recent refill or dose dispensed (RXE.18).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.TotalDailyDose">
            <summary>
            Gets or sets the total daily dose (RXE.19).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.NeedsHumanReview">
            <summary>
            Gets or sets the needs human review (RXE.20).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXESegment.PharmacyTreatmentSuppliersSpecialDispensingInstructions">
            <summary>
            Gets or sets the pharmacy/treatment supplier's special dispensing instructions (RXE.21).
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXESegment.InitializeFields">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXESegment.SetBasicMedicationInfo(System.String,System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.String)">
            <summary>
            Sets basic medication order information.
            </summary>
            <param name="drugCode">The drug code (NDC, RxNorm, etc.).</param>
            <param name="drugName">The drug name.</param>
            <param name="codingSystem">The coding system used (NDC, RXNORM, etc.).</param>
            <param name="giveAmount">The amount to give per dose.</param>
            <param name="giveUnits">The units for the give amount.</param>
            <param name="quantityTiming">The quantity and timing instructions.</param>
            <param name="dosageForm">The dosage form (tablet, capsule, etc.).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXESegment.SetDispensingInfo(System.Nullable{System.Decimal},System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Sets dispensing information.
            </summary>
            <param name="dispenseAmount">The amount to dispense.</param>
            <param name="dispenseUnits">The units for dispense amount.</param>
            <param name="numberOfRefills">The number of refills allowed.</param>
            <param name="prescriptionNumber">The prescription number.</param>
            <param name="substitutionStatus">Substitution allowed status.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXESegment.SetProviderInfo(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets provider and pharmacy information.
            </summary>
            <param name="orderingProviderDEA">The ordering provider's DEA number.</param>
            <param name="pharmacistVerifierId">The pharmacist verifier ID.</param>
            <param name="deliverToLocation">The delivery location.</param>
            <param name="adminInstructions">Administration instructions.</param>
            <param name="dispensingInstructions">Special dispensing instructions.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXESegment.SetDailyDosing(System.Decimal,System.String)">
            <summary>
            Sets daily dosing information.
            </summary>
            <param name="totalDailyDose">The total daily dose amount.</param>
            <param name="doseUnits">The units for the daily dose.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXESegment.GeneratePrescriptionNumber(System.String)">
            <summary>
            Generates a unique prescription number.
            </summary>
            <param name="prefix">Optional prefix for the prescription number.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXESegment.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXESegment.CreateStandardOrder(System.String,System.String,System.Decimal,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int32},System.String)">
            <summary>
            Creates an RXE segment for a standard medication order.
            </summary>
            <param name="drugCode">The drug code.</param>
            <param name="drugName">The drug name.</param>
            <param name="strength">The drug strength/amount.</param>
            <param name="strengthUnits">The units for strength.</param>
            <param name="dosageForm">The dosage form.</param>
            <param name="dispenseQuantity">Quantity to dispense.</param>
            <param name="refills">Number of refills.</param>
            <param name="sig">Directions for use.</param>
            <returns>A configured RXE segment.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Segments.RXRSegment">
            <summary>
            Represents the HL7 RXR (Pharmacy/Treatment Route) segment.
            Contains information about the route of administration for medications.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXRSegment.SegmentId">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXRSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Segments.RXRSegment"/> class.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXRSegment.InitializeFields">
            <summary>
            Initializes the segment fields according to HL7 v2.3 specification.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXRSegment.Route">
            <summary>
            Gets or sets the route of administration.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXRSegment.AdministrationSite">
            <summary>
            Gets or sets the administration site.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXRSegment.AdministrationDevice">
            <summary>
            Gets or sets the administration device.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXRSegment.AdministrationMethod">
            <summary>
            Gets or sets the administration method.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Segments.RXRSegment.RoutingInstruction">
            <summary>
            Gets or sets the routing instruction.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXRSegment.CreateOralRoute(System.String)">
            <summary>
            Creates a new RXR segment for oral administration.
            </summary>
            <param name="site">The administration site (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.RXRSegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXRSegment.CreateIntravenousRoute(System.String)">
            <summary>
            Creates a new RXR segment for intravenous administration.
            </summary>
            <param name="site">The administration site (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.RXRSegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXRSegment.CreateIntramuscularRoute(System.String)">
            <summary>
            Creates a new RXR segment for intramuscular administration.
            </summary>
            <param name="site">The administration site (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.RXRSegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXRSegment.CreateSubcutaneousRoute(System.String)">
            <summary>
            Creates a new RXR segment for subcutaneous administration.
            </summary>
            <param name="site">The administration site (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.RXRSegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXRSegment.CreateTopicalRoute(System.String)">
            <summary>
            Creates a new RXR segment for topical administration.
            </summary>
            <param name="site">The administration site (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.RXRSegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXRSegment.CreateInhalationRoute(System.String)">
            <summary>
            Creates a new RXR segment for inhalation administration.
            </summary>
            <param name="device">The administration device (optional).</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Segments.RXRSegment"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXRSegment.SetRoute(System.String,System.String,System.String)">
            <summary>
            Sets the route of administration.
            </summary>
            <param name="routeCode">The route code (e.g., "PO", "IV", "IM", "SC").</param>
            <param name="routeText">The route description (optional).</param>
            <param name="codingSystem">The coding system (optional).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXRSegment.SetAdministrationSite(System.String,System.String,System.String)">
            <summary>
            Sets the administration site.
            </summary>
            <param name="siteCode">The site code.</param>
            <param name="siteText">The site description (optional).</param>
            <param name="codingSystem">The coding system (optional).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXRSegment.SetAdministrationDevice(System.String,System.String,System.String)">
            <summary>
            Sets the administration device.
            </summary>
            <param name="deviceCode">The device code.</param>
            <param name="deviceText">The device description (optional).</param>
            <param name="codingSystem">The coding system (optional).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXRSegment.SetAdministrationMethod(System.String,System.String,System.String)">
            <summary>
            Sets the administration method.
            </summary>
            <param name="methodCode">The method code.</param>
            <param name="methodText">The method description (optional).</param>
            <param name="codingSystem">The coding system (optional).</param>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXRSegment.ToDisplayString">
            <summary>
            Gets a formatted display string for this route.
            </summary>
            <returns>A human-readable representation of the route.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Segments.RXRSegment.Clone">
            <summary>
            Creates a copy of this segment.
            </summary>
            <returns>A new instance with the same field values.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Types.AddressField">
            <summary>
            Represents an HL7 Extended Address (XAD) field.
            Format: street_address^other_designation^city^state_or_province^zip_or_postal_code^country^address_type^other_geographic_designation^county_parish_code^census_tract^address_representation_code^address_validity_range
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.AddressField.DataType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.AddressField.MaxLength">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.AddressField.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.AddressField"/> class.
            </summary>
            <param name="value">The initial address value.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.AddressField.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.AddressField"/> class with address components.
            </summary>
            <param name="streetAddress">The street address.</param>
            <param name="city">The city.</param>
            <param name="stateOrProvince">The state or province.</param>
            <param name="zipOrPostalCode">The ZIP or postal code.</param>
            <param name="country">The country.</param>
            <param name="addressType">The address type (H=Home, B=Business, etc.).</param>
            <param name="otherDesignation">Other designation (apartment, suite, etc.).</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="P:Segmint.Core.HL7.Types.AddressField.StreetAddress">
            <summary>
            Gets or sets the street address component.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.AddressField.OtherDesignation">
            <summary>
            Gets or sets the other designation component (apartment, suite, etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.AddressField.City">
            <summary>
            Gets or sets the city component.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.AddressField.StateOrProvince">
            <summary>
            Gets or sets the state or province component.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.AddressField.ZipOrPostalCode">
            <summary>
            Gets or sets the ZIP or postal code component.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.AddressField.Country">
            <summary>
            Gets or sets the country component.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.AddressField.AddressType">
            <summary>
            Gets or sets the address type component (H=Home, B=Business, etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.AddressField.OtherGeographicDesignation">
            <summary>
            Gets or sets the other geographic designation component.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.AddressField.CountyParishCode">
            <summary>
            Gets or sets the county/parish code component.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.AddressField.CensusTract">
            <summary>
            Gets or sets the census tract component.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.AddressField.DisplayAddress">
            <summary>
            Gets the formatted address display (Street, City, State ZIP).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.AddressField.SingleLineAddress">
            <summary>
            Gets the single-line formatted address.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.AddressField.SetComponents(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the primary address components.
            </summary>
            <param name="streetAddress">The street address.</param>
            <param name="otherDesignation">Other designation (apartment, suite, etc.).</param>
            <param name="city">The city.</param>
            <param name="stateOrProvince">The state or province.</param>
            <param name="zipOrPostalCode">The ZIP or postal code.</param>
            <param name="country">The country.</param>
            <param name="addressType">The address type.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.AddressField.GetComponent(System.Int32)">
            <summary>
            Gets a component by its 1-based index.
            </summary>
            <param name="index">The 1-based component index (1-12).</param>
            <returns>The component value, or empty string if not present.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.AddressField.SetComponent(System.Int32,System.String)">
            <summary>
            Sets a component by its 1-based index.
            </summary>
            <param name="index">The 1-based component index (1-12).</param>
            <param name="value">The component value to set.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.AddressField.ValidateValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.AddressField.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.AddressField.CreateUSAddress(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a standard US address.
            </summary>
            <param name="streetAddress">The street address.</param>
            <param name="city">The city.</param>
            <param name="state">The state (2-letter abbreviation recommended).</param>
            <param name="zipCode">The ZIP code.</param>
            <param name="addressType">The address type (H=Home, B=Business, etc.).</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new AddressField instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.AddressField.CreateInternationalAddress(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates an international address.
            </summary>
            <param name="streetAddress">The street address.</param>
            <param name="city">The city.</param>
            <param name="stateOrProvince">The state or province.</param>
            <param name="postalCode">The postal code.</param>
            <param name="country">The country.</param>
            <param name="addressType">The address type (H=Home, B=Business, etc.).</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new AddressField instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.AddressField.op_Implicit(System.String)~Segmint.Core.HL7.Types.AddressField">
            <summary>
            Implicitly converts a string to an AddressField.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.AddressField.op_Implicit(Segmint.Core.HL7.Types.AddressField)~System.String">
            <summary>
            Implicitly converts an AddressField to a string.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.Types.CodedElementField">
            <summary>
            Represents an HL7 Coded Element (CE) field.
            Format: identifier^text^name_of_coding_system^alternate_identifier^alternate_text^name_of_alternate_coding_system
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.CodedElementField.DataType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.CodedElementField.MaxLength">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedElementField.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.CodedElementField"/> class.
            </summary>
            <param name="value">The initial coded element value.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedElementField.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.CodedElementField"/> class with individual components.
            </summary>
            <param name="identifier">The primary identifier/code.</param>
            <param name="text">The text description.</param>
            <param name="codingSystem">The name of the coding system.</param>
            <param name="alternateIdentifier">The alternate identifier/code.</param>
            <param name="alternateText">The alternate text description.</param>
            <param name="alternateCodingSystem">The name of the alternate coding system.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="P:Segmint.Core.HL7.Types.CodedElementField.Identifier">
            <summary>
            Gets the primary identifier/code component.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.CodedElementField.Text">
            <summary>
            Gets the text description component.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.CodedElementField.CodingSystem">
            <summary>
            Gets the coding system name component.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.CodedElementField.AlternateIdentifier">
            <summary>
            Gets the alternate identifier/code component.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.CodedElementField.AlternateText">
            <summary>
            Gets the alternate text description component.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.CodedElementField.AlternateCodingSystem">
            <summary>
            Gets the alternate coding system name component.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.CodedElementField.Value">
            <summary>
            Gets or sets the value of this coded element field.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedElementField.GetPrimaryValue">
            <summary>
            Gets the primary value (identifier) of this coded element.
            </summary>
            <returns>The primary identifier/code, or empty string if not set.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedElementField.SetComponents(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets all components of the coded element.
            </summary>
            <param name="identifier">The primary identifier/code.</param>
            <param name="text">The text description.</param>
            <param name="codingSystem">The name of the coding system.</param>
            <param name="alternateIdentifier">The alternate identifier/code.</param>
            <param name="alternateText">The alternate text description.</param>
            <param name="alternateCodingSystem">The name of the alternate coding system.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedElementField.GetComponent(System.Int32)">
            <summary>
            Gets a component by its 1-based index.
            </summary>
            <param name="index">The 1-based component index (1-6).</param>
            <returns>The component value, or empty string if not present.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedElementField.SetComponent(System.Int32,System.String)">
            <summary>
            Sets a component by its 1-based index.
            </summary>
            <param name="index">The 1-based component index (1-6).</param>
            <param name="value">The component value to set.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedElementField.ValidateValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedElementField.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedElementField.Create(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a coded element with just an identifier and text.
            </summary>
            <param name="identifier">The code identifier.</param>
            <param name="text">The text description.</param>
            <param name="codingSystem">The coding system name.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new CodedElementField instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedElementField.MessageType(System.String,System.Boolean)">
            <summary>
            Creates a coded element for common HL7 message types.
            </summary>
            <param name="messageType">The message type (e.g., "RDE", "ADT", "ACK").</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new CodedElementField instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedElementField.CreateRoute(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a coded element for medication routes.
            </summary>
            <param name="routeCode">The route code (e.g., "PO", "IV", "IM").</param>
            <param name="routeText">The route description.</param>
            <param name="codingSystem">The coding system.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new CodedElementField instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedElementField.CreateSite(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a coded element for administration sites.
            </summary>
            <param name="siteCode">The site code.</param>
            <param name="siteText">The site description.</param>
            <param name="codingSystem">The coding system.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new CodedElementField instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedElementField.CreateDevice(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a coded element for administration devices.
            </summary>
            <param name="deviceCode">The device code.</param>
            <param name="deviceText">The device description.</param>
            <param name="codingSystem">The coding system.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new CodedElementField instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedElementField.CreateMethod(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a coded element for administration methods.
            </summary>
            <param name="methodCode">The method code.</param>
            <param name="methodText">The method description.</param>
            <param name="codingSystem">The coding system.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new CodedElementField instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedElementField.ToDisplayString">
            <summary>
            Gets a formatted display string for this coded element.
            </summary>
            <returns>A human-readable representation of the coded element.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedElementField.op_Implicit(System.String)~Segmint.Core.HL7.Types.CodedElementField">
            <summary>
            Implicitly converts a string to a CodedElementField.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedElementField.op_Implicit(Segmint.Core.HL7.Types.CodedElementField)~System.String">
            <summary>
            Implicitly converts a CodedElementField to a string.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.Types.CodedValueField">
            <summary>
            Represents an HL7 Coded Value (IS) field.
            Used for coded values from user-defined tables.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.CodedValueField.DataType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.CodedValueField.MaxLength">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.CodedValueField.AllowedValues">
            <summary>
            Gets the allowed values for this coded value field.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.CodedValueField.TableNumber">
            <summary>
            Gets the HL7 table number for this field.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.CodedValueField.Value">
            <summary>
            Gets or sets the value of this coded value field.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedValueField.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.CodedValueField"/> class.
            </summary>
            <param name="value">The initial value.</param>
            <param name="allowedValues">The allowed values for this field.</param>
            <param name="tableNumber">The HL7 table number (optional).</param>
            <param name="maxLength">The maximum allowed length.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedValueField.CreateGender(System.String,System.Boolean)">
            <summary>
            Creates a coded value field for gender.
            </summary>
            <param name="value">The gender value (M, F, O, U).</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.CodedValueField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedValueField.CreateMaritalStatus(System.String,System.Boolean)">
            <summary>
            Creates a coded value field for marital status.
            </summary>
            <param name="value">The marital status value.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.CodedValueField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedValueField.CreateEventType(System.String,System.Boolean)">
            <summary>
            Creates a coded value field for event type.
            </summary>
            <param name="value">The event type value.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.CodedValueField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedValueField.CreatePatientClass(System.String,System.Boolean)">
            <summary>
            Creates a coded value field for patient class.
            </summary>
            <param name="value">The patient class value.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.CodedValueField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedValueField.CreateAdmissionType(System.String,System.Boolean)">
            <summary>
            Creates a coded value field for admission type.
            </summary>
            <param name="value">The admission type value.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.CodedValueField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedValueField.CreateOrderControl(System.String,System.Boolean)">
            <summary>
            Creates a coded value field for order control.
            </summary>
            <param name="value">The order control value.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.CodedValueField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedValueField.CreateOrderStatus(System.String,System.Boolean)">
            <summary>
            Creates a coded value field for order status.
            </summary>
            <param name="value">The order status value.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.CodedValueField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedValueField.CreatePriority(System.String,System.Boolean)">
            <summary>
            Creates a coded value field for priority.
            </summary>
            <param name="value">The priority value.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.CodedValueField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedValueField.CreateYesNoIndicator(System.String,System.Boolean)">
            <summary>
            Creates a coded value field for yes/no indicator.
            </summary>
            <param name="value">The yes/no value.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.CodedValueField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedValueField.CreateMessageType(System.String,System.Boolean)">
            <summary>
            Creates a coded value field for message type.
            </summary>
            <param name="value">The message type value.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.CodedValueField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedValueField.ValidateValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedValueField.ToHL7String">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedValueField.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedValueField.op_Implicit(System.String)~Segmint.Core.HL7.Types.CodedValueField">
            <summary>
            Implicitly converts a string to a CodedValueField.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedValueField.op_Implicit(Segmint.Core.HL7.Types.CodedValueField)~System.String">
            <summary>
            Implicitly converts a CodedValueField to a string.
            </summary>
            <param name="field">The CodedValueField.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.CodedValueField.ToDisplayString">
            <summary>
            Gets a formatted display string for this coded value.
            </summary>
            <returns>A human-readable representation of the coded value.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Types.DateField">
            <summary>
            Represents an HL7 Date (DT) field.
            Format: YYYYMMDD
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.DateField.DataType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.DateField.MaxLength">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.DateField.Value">
            <summary>
            Gets or sets the value of this date field.
            Returns DateTime if set with DateTime, otherwise returns string.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.DateField.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.DateField"/> class.
            </summary>
            <param name="value">The initial date value.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.DateField.#ctor(System.DateTime,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.DateField"/> class with a DateTime value.
            </summary>
            <param name="dateTime">The DateTime value to format as HL7 date.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.DateField.ToDateTime">
            <summary>
            Gets the DateTime value of this date field.
            </summary>
            <returns>The parsed DateTime, or null if the value cannot be parsed.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.DateField.SetToToday">
            <summary>
            Sets this field to the current date.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.DateField.ValidateValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.DateField.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.DateField.op_Implicit(System.DateTime)~Segmint.Core.HL7.Types.DateField">
            <summary>
            Implicitly converts a DateTime to a DateField.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.DateField.op_Implicit(Segmint.Core.HL7.Types.DateField)~System.Nullable{System.DateTime}">
            <summary>
            Implicitly converts a DateField to a DateTime (may be null).
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.DateField.op_Implicit(System.String)~Segmint.Core.HL7.Types.DateField">
            <summary>
            Implicitly converts a string to a DateField.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.DateField.op_Implicit(Segmint.Core.HL7.Types.DateField)~System.String">
            <summary>
            Implicitly converts a DateField to a string.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.Types.ExtendedCompositeIdField">
            <summary>
            Represents an HL7 Extended Composite ID (CX) field.
            Used for patient identifiers, account numbers, and other composite identifiers.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.ExtendedCompositeIdField.IdentifierRegex">
            <remarks>
            Pattern:<br/>
            <code>^[A-Za-z0-9\\-\\.]+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [-.0-9A-Za-z] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="P:Segmint.Core.HL7.Types.ExtendedCompositeIdField.DataType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.ExtendedCompositeIdField.MaxLength">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.ExtendedCompositeIdField.IdNumber">
            <summary>
            Gets or sets the ID number.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.ExtendedCompositeIdField.CheckDigit">
            <summary>
            Gets or sets the check digit.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.ExtendedCompositeIdField.CheckDigitScheme">
            <summary>
            Gets or sets the code identifying the check digit scheme employed.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.ExtendedCompositeIdField.AssigningAuthority">
            <summary>
            Gets or sets the assigning authority.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.ExtendedCompositeIdField.IdentifierTypeCode">
            <summary>
            Gets or sets the identifier type code.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.ExtendedCompositeIdField.AssigningFacility">
            <summary>
            Gets or sets the assigning facility.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.ExtendedCompositeIdField.EffectiveDate">
            <summary>
            Gets or sets the effective date.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.ExtendedCompositeIdField.ExpirationDate">
            <summary>
            Gets or sets the expiration date.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.ExtendedCompositeIdField.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.ExtendedCompositeIdField"/> class.
            </summary>
            <param name="value">The initial HL7 formatted value.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.ExtendedCompositeIdField.CreatePatientId(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates an Extended Composite ID field for a patient identifier.
            </summary>
            <param name="idNumber">The patient ID number.</param>
            <param name="assigningAuthority">The assigning authority.</param>
            <param name="identifierTypeCode">The identifier type code (e.g., "MR", "PI", "AN").</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.ExtendedCompositeIdField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.ExtendedCompositeIdField.CreateAccountNumber(System.String,System.String,System.Boolean)">
            <summary>
            Creates an Extended Composite ID field for an account number.
            </summary>
            <param name="accountNumber">The account number.</param>
            <param name="assigningAuthority">The assigning authority.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.ExtendedCompositeIdField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.ExtendedCompositeIdField.CreateVisitNumber(System.String,System.String,System.Boolean)">
            <summary>
            Creates an Extended Composite ID field for a visit number.
            </summary>
            <param name="visitNumber">The visit number.</param>
            <param name="assigningAuthority">The assigning authority.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.ExtendedCompositeIdField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.ExtendedCompositeIdField.ParseFromHL7String(System.String)">
            <summary>
            Parses the components from an HL7 formatted string.
            </summary>
            <param name="value">The HL7 formatted string.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.ExtendedCompositeIdField.UpdateRawValue">
            <summary>
            Updates the raw HL7 value from the component values.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.ExtendedCompositeIdField.ValidateValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.ExtendedCompositeIdField.ToHL7String">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.ExtendedCompositeIdField.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.ExtendedCompositeIdField.op_Implicit(System.String)~Segmint.Core.HL7.Types.ExtendedCompositeIdField">
            <summary>
            Implicitly converts a string to an ExtendedCompositeIdField.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.ExtendedCompositeIdField.op_Implicit(Segmint.Core.HL7.Types.ExtendedCompositeIdField)~System.String">
            <summary>
            Implicitly converts an ExtendedCompositeIdField to a string.
            </summary>
            <param name="field">The ExtendedCompositeIdField.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.ExtendedCompositeIdField.ToDisplayString">
            <summary>
            Gets a formatted display string for this identifier.
            </summary>
            <returns>A human-readable representation of the identifier.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Types.HierarchicDesignatorField">
            <summary>
            Represents an HL7 Hierarchic Designator (HD) field.
            Used for identifying organizations, systems, and applications.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.HierarchicDesignatorField.NamespaceRegex">
            <remarks>
            Pattern:<br/>
            <code>^[A-Za-z0-9\\-\\._ ]+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [ -.0-9A-Z_a-z] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Segmint.Core.HL7.Types.HierarchicDesignatorField.OidRegex">
            <remarks>
            Pattern:<br/>
            <code>^[0-9\\.]+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [.0-9] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="P:Segmint.Core.HL7.Types.HierarchicDesignatorField.DataType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.HierarchicDesignatorField.MaxLength">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.HierarchicDesignatorField.NamespaceId">
            <summary>
            Gets or sets the namespace ID.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.HierarchicDesignatorField.UniversalId">
            <summary>
            Gets or sets the universal ID.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.HierarchicDesignatorField.UniversalIdType">
            <summary>
            Gets or sets the universal ID type.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.HierarchicDesignatorField.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.HierarchicDesignatorField"/> class.
            </summary>
            <param name="value">The initial HL7 formatted value.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.HierarchicDesignatorField.CreateFromNamespace(System.String,System.Boolean)">
            <summary>
            Creates a Hierarchic Designator field with a namespace ID.
            </summary>
            <param name="namespaceId">The namespace identifier.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.HierarchicDesignatorField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.HierarchicDesignatorField.CreateFromUniversalId(System.String,System.String,System.Boolean)">
            <summary>
            Creates a Hierarchic Designator field with a universal ID (OID).
            </summary>
            <param name="universalId">The universal identifier (typically an OID).</param>
            <param name="universalIdType">The universal ID type (e.g., "ISO", "DNS").</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.HierarchicDesignatorField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.HierarchicDesignatorField.CreateFacility(System.String,System.String,System.Boolean)">
            <summary>
            Creates a Hierarchic Designator field for a healthcare facility.
            </summary>
            <param name="facilityName">The facility name.</param>
            <param name="facilityOid">The facility OID (optional).</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.HierarchicDesignatorField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.HierarchicDesignatorField.CreateApplication(System.String,System.String,System.Boolean)">
            <summary>
            Creates a Hierarchic Designator field for an application.
            </summary>
            <param name="applicationName">The application name.</param>
            <param name="applicationOid">The application OID (optional).</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.HierarchicDesignatorField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.HierarchicDesignatorField.ParseFromHL7String(System.String)">
            <summary>
            Parses the components from an HL7 formatted string.
            </summary>
            <param name="value">The HL7 formatted string.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.HierarchicDesignatorField.UpdateRawValue">
            <summary>
            Updates the raw HL7 value from the component values.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.HierarchicDesignatorField.ValidateValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.HierarchicDesignatorField.ToHL7String">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.HierarchicDesignatorField.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.HierarchicDesignatorField.op_Implicit(System.String)~Segmint.Core.HL7.Types.HierarchicDesignatorField">
            <summary>
            Implicitly converts a string to a HierarchicDesignatorField.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.HierarchicDesignatorField.op_Implicit(Segmint.Core.HL7.Types.HierarchicDesignatorField)~System.String">
            <summary>
            Implicitly converts a HierarchicDesignatorField to a string.
            </summary>
            <param name="field">The HierarchicDesignatorField.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.HierarchicDesignatorField.ToDisplayString">
            <summary>
            Gets a formatted display string for this hierarchic designator.
            </summary>
            <returns>A human-readable representation of the hierarchic designator.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Types.IdentifierField">
            <summary>
            Represents an HL7 Identifier (ID) field - coded values from a specific table.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.IdentifierField.DataType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.IdentifierField.MaxLength">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.IdentifierField.AllowedValues">
            <summary>
            Gets the allowed values for this identifier field.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.IdentifierField.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.IdentifierField"/> class.
            </summary>
            <param name="value">The initial value.</param>
            <param name="allowedValues">The set of allowed values for this identifier.</param>
            <param name="maxLength">The maximum allowed length.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="P:Segmint.Core.HL7.Types.IdentifierField.Value">
            <summary>
            Gets the identifier value of this field.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.IdentifierField.ValidateValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.IdentifierField.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.IdentifierField.YesNo(System.String,System.Boolean)">
            <summary>
            Creates an identifier field with common HL7 Yes/No values.
            </summary>
            <param name="value">The initial value (Y or N).</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>An identifier field configured for Yes/No values.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.IdentifierField.Gender(System.String,System.Boolean)">
            <summary>
            Creates an identifier field with common HL7 gender values.
            </summary>
            <param name="value">The initial value (F, M, O, U).</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>An identifier field configured for gender values.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.IdentifierField.AlphaNumericPattern">
            <remarks>
            Pattern:<br/>
            <code>^[A-Za-z0-9_-]+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [-0-9A-Z_a-z] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Segmint.Core.HL7.Types.IdentifierField.op_Implicit(System.String)~Segmint.Core.HL7.Types.IdentifierField">
            <summary>
            Implicitly converts a string to an IdentifierField.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.IdentifierField.op_Implicit(Segmint.Core.HL7.Types.IdentifierField)~System.String">
            <summary>
            Implicitly converts an IdentifierField to a string.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.Types.NumericField">
            <summary>
            Represents an HL7 Numeric (NM) field.
            Supports integer and decimal values.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.NumericField.DataType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.NumericField.MaxLength">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.NumericField.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.NumericField"/> class.
            </summary>
            <param name="value">The initial numeric value.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.NumericField.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.NumericField"/> class with an integer value.
            </summary>
            <param name="value">The integer value.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.NumericField.#ctor(System.Decimal,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.NumericField"/> class with a decimal value.
            </summary>
            <param name="value">The decimal value.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.NumericField.ToInt">
            <summary>
            Gets the integer value of this numeric field.
            </summary>
            <returns>The parsed integer, or null if the value cannot be parsed.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.NumericField.ToDecimal">
            <summary>
            Gets the decimal value of this numeric field.
            </summary>
            <returns>The parsed decimal, or null if the value cannot be parsed.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.NumericField.ToDouble">
            <summary>
            Gets the double value of this numeric field.
            </summary>
            <returns>The parsed double, or null if the value cannot be parsed.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.NumericField.ValidateValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.NumericField.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.NumericField.op_Implicit(System.Int32)~Segmint.Core.HL7.Types.NumericField">
            <summary>
            Implicitly converts an integer to a NumericField.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.NumericField.op_Implicit(System.Decimal)~Segmint.Core.HL7.Types.NumericField">
            <summary>
            Implicitly converts a decimal to a NumericField.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.NumericField.op_Implicit(Segmint.Core.HL7.Types.NumericField)~System.Nullable{System.Int32}">
            <summary>
            Implicitly converts a NumericField to an integer (may be null).
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.NumericField.op_Implicit(Segmint.Core.HL7.Types.NumericField)~System.Nullable{System.Decimal}">
            <summary>
            Implicitly converts a NumericField to a decimal (may be null).
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.NumericField.op_Implicit(System.String)~Segmint.Core.HL7.Types.NumericField">
            <summary>
            Implicitly converts a string to a NumericField.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.NumericField.op_Implicit(Segmint.Core.HL7.Types.NumericField)~System.String">
            <summary>
            Implicitly converts a NumericField to a string.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.Types.PersonNameField">
            <summary>
            Represents an HL7 Extended Person Name (XPN) field.
            Format: family_name^given_name^middle_initial_or_name^suffix^prefix^degree^name_type_code^name_representation_code^name_context^name_validity_range^name_assembly_order
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.PersonNameField.DataType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.PersonNameField.MaxLength">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.PersonNameField.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.PersonNameField"/> class.
            </summary>
            <param name="value">The initial person name value.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.PersonNameField.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.PersonNameField"/> class with name components.
            </summary>
            <param name="familyName">The family/last name.</param>
            <param name="givenName">The given/first name.</param>
            <param name="middleName">The middle name or initial.</param>
            <param name="suffix">The name suffix (Jr., Sr., III, etc.).</param>
            <param name="prefix">The name prefix (Dr., Mr., Mrs., etc.).</param>
            <param name="degree">The degree (MD, PhD, etc.).</param>
            <param name="nameTypeCode">The name type code (L=Legal, D=Display, etc.).</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="P:Segmint.Core.HL7.Types.PersonNameField.FamilyName">
            <summary>
            Gets or sets the family/last name component.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.PersonNameField.GivenName">
            <summary>
            Gets or sets the given/first name component.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.PersonNameField.MiddleName">
            <summary>
            Gets or sets the middle name or initial component.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.PersonNameField.Suffix">
            <summary>
            Gets or sets the name suffix component (Jr., Sr., III, etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.PersonNameField.Prefix">
            <summary>
            Gets or sets the name prefix component (Dr., Mr., Mrs., etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.PersonNameField.Degree">
            <summary>
            Gets or sets the degree component (MD, PhD, etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.PersonNameField.NameTypeCode">
            <summary>
            Gets or sets the name type code component (L=Legal, D=Display, etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.PersonNameField.NameRepresentationCode">
            <summary>
            Gets or sets the name representation code component (A=Alphabetic, I=Ideographic, P=Phonetic).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.PersonNameField.LastName">
            <summary>
            Gets or sets the last name (alias for FamilyName for test compatibility).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.PersonNameField.FirstName">
            <summary>
            Gets or sets the first name (alias for GivenName for test compatibility).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.PersonNameField.DisplayName">
            <summary>
            Gets the formatted display name (First Middle Last Suffix).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.PersonNameField.FormalName">
            <summary>
            Gets the formatted formal name (Prefix First Middle Last Suffix, Degree).
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.PersonNameField.ToDisplayString">
            <summary>
            Returns the formatted display name for test compatibility.
            </summary>
            <returns>The formatted display name.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.PersonNameField.GetInitials">
            <summary>
            Gets the initials from the given name, middle name, and family name.
            </summary>
            <returns>The initials string.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.PersonNameField.SetName(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the name components using a simplified method (alias for SetComponents).
            </summary>
            <param name="familyName">The family/last name.</param>
            <param name="givenName">The given/first name.</param>
            <param name="middleName">The middle name or initial.</param>
            <param name="suffix">The name suffix.</param>
            <param name="prefix">The name prefix.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.PersonNameField.SetComponents(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the primary name components.
            </summary>
            <param name="familyName">The family/last name.</param>
            <param name="givenName">The given/first name.</param>
            <param name="middleName">The middle name or initial.</param>
            <param name="suffix">The name suffix.</param>
            <param name="prefix">The name prefix.</param>
            <param name="degree">The degree.</param>
            <param name="nameTypeCode">The name type code.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.PersonNameField.GetComponent(System.Int32)">
            <summary>
            Gets a component by its 1-based index.
            </summary>
            <param name="index">The 1-based component index (1-11).</param>
            <returns>The component value, or empty string if not present.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.PersonNameField.SetComponent(System.Int32,System.String)">
            <summary>
            Sets a component by its 1-based index.
            </summary>
            <param name="index">The 1-based component index (1-11).</param>
            <param name="value">The component value to set.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.PersonNameField.ValidateValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.PersonNameField.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.PersonNameField.Create(System.String,System.String,System.Boolean)">
            <summary>
            Creates a person name with just first and last name.
            </summary>
            <param name="firstName">The first/given name.</param>
            <param name="lastName">The last/family name.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new PersonNameField instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.PersonNameField.Create(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a person name with first, middle, and last name.
            </summary>
            <param name="firstName">The first/given name.</param>
            <param name="middleName">The middle name or initial.</param>
            <param name="lastName">The last/family name.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new PersonNameField instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.PersonNameField.op_Implicit(System.String)~Segmint.Core.HL7.Types.PersonNameField">
            <summary>
            Implicitly converts a string to a PersonNameField.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.PersonNameField.op_Implicit(Segmint.Core.HL7.Types.PersonNameField)~System.String">
            <summary>
            Implicitly converts a PersonNameField to a string.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.Types.SequenceIdField">
            <summary>
            Represents an HL7 Sequence ID (SI) field.
            Non-negative integer for sequence numbering.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.SequenceIdField.DataType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.SequenceIdField.MaxLength">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.SequenceIdField.Value">
            <summary>
            Gets or sets the value of this sequence ID field.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.SequenceIdField.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.SequenceIdField"/> class.
            </summary>
            <param name="value">The initial sequence ID value.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.SequenceIdField.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.SequenceIdField"/> class with an integer value.
            </summary>
            <param name="value">The sequence ID value.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.SequenceIdField.ToInt">
            <summary>
            Gets the integer value of this sequence ID field.
            </summary>
            <returns>The parsed integer, or null if the value cannot be parsed.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.SequenceIdField.ValidateValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.SequenceIdField.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.SequenceIdField.op_Implicit(System.Int32)~Segmint.Core.HL7.Types.SequenceIdField">
            <summary>
            Implicitly converts an integer to a SequenceIdField.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.SequenceIdField.op_Implicit(Segmint.Core.HL7.Types.SequenceIdField)~System.Nullable{System.Int32}">
            <summary>
            Implicitly converts a SequenceIdField to an integer (may be null).
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.SequenceIdField.op_Implicit(System.String)~Segmint.Core.HL7.Types.SequenceIdField">
            <summary>
            Implicitly converts a string to a SequenceIdField.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.SequenceIdField.op_Implicit(Segmint.Core.HL7.Types.SequenceIdField)~System.String">
            <summary>
            Implicitly converts a SequenceIdField to a string.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.Types.StringField">
            <summary>
            Represents an HL7 String (ST) field - basic string data type.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.StringField.DataType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.StringField.MaxLength">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.StringField.#ctor(System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.StringField"/> class.
            </summary>
            <param name="value">The initial value.</param>
            <param name="maxLength">The maximum allowed length.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="P:Segmint.Core.HL7.Types.StringField.Value">
            <summary>
            Gets the string value of this field.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.StringField.ValidateValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.StringField.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.StringField.op_Implicit(System.String)~Segmint.Core.HL7.Types.StringField">
            <summary>
            Implicitly converts a string to a StringField.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.StringField.op_Implicit(Segmint.Core.HL7.Types.StringField)~System.String">
            <summary>
            Implicitly converts a StringField to a string.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.Types.TelephoneField">
            <summary>
            Represents an HL7 Extended Telecommunication Number (XTN) field.
            Supports phone numbers, fax numbers, email addresses, and other telecommunications.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TelephoneField.PhoneNumberRegex">
            <remarks>
            Pattern:<br/>
            <code>^[+]?[\\d\\s\\-\\(\\)\\.]+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '+' atomically, optionally.<br/>
            ○ Match a character in the set [()-.\d\s] greedily at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TelephoneField.EmailRegex">
            <remarks>
            Pattern:<br/>
            <code>^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [%+-.0-9A-Z_a-z] atomically at least once.<br/>
            ○ Match '@'.<br/>
            ○ Match a character in the set [-.0-9A-Za-z] greedily at least once.<br/>
            ○ Match '.'.<br/>
            ○ Match a character in the set [A-Za-z] atomically at least twice.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TelephoneField.DataType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.TelephoneField.MaxLength">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.TelephoneField.UseCode">
            <summary>
            Gets or sets the telecommunications use code (PH, FX, MD, CP, etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TelephoneField.EquipmentType">
            <summary>
            Gets or sets the telecommunications equipment type (PH, FX, MD, CP, etc.).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TelephoneField.EmailAddress">
            <summary>
            Gets or sets the email address.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TelephoneField.CountryCode">
            <summary>
            Gets or sets the country code.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TelephoneField.AreaCode">
            <summary>
            Gets or sets the area/city code.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TelephoneField.PhoneNumber">
            <summary>
            Gets or sets the phone number.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TelephoneField.Extension">
            <summary>
            Gets or sets the extension.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TelephoneField.Text">
            <summary>
            Gets or sets any text representation.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TelephoneField.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.TelephoneField"/> class.
            </summary>
            <param name="value">The initial HL7 formatted value.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TelephoneField.CreatePhone(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a telephone field for a phone number.
            </summary>
            <param name="phoneNumber">The phone number.</param>
            <param name="areaCode">The area code (optional).</param>
            <param name="extension">The extension (optional).</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.TelephoneField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TelephoneField.CreateEmail(System.String,System.Boolean)">
            <summary>
            Creates a telephone field for an email address.
            </summary>
            <param name="emailAddress">The email address.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.TelephoneField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TelephoneField.CreateFax(System.String,System.String,System.Boolean)">
            <summary>
            Creates a telephone field for a fax number.
            </summary>
            <param name="faxNumber">The fax number.</param>
            <param name="areaCode">The area code (optional).</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.TelephoneField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TelephoneField.ParseFromHL7String(System.String)">
            <summary>
            Parses the components from an HL7 formatted string.
            </summary>
            <param name="value">The HL7 formatted string.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TelephoneField.UpdateRawValue">
            <summary>
            Updates the raw HL7 value from the component values.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TelephoneField.ValidateValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.TelephoneField.ToHL7String">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.TelephoneField.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.TelephoneField.op_Implicit(System.String)~Segmint.Core.HL7.Types.TelephoneField">
            <summary>
            Implicitly converts a string to a TelephoneField.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TelephoneField.op_Implicit(Segmint.Core.HL7.Types.TelephoneField)~System.String">
            <summary>
            Implicitly converts a TelephoneField to a string.
            </summary>
            <param name="field">The TelephoneField.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TelephoneField.ToDisplayString">
            <summary>
            Gets a formatted display string for this telephone number.
            </summary>
            <returns>A human-readable representation of the telephone number.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Types.TextField">
            <summary>
            Represents an HL7 Text (TX) field - variable length text data.
            Maximum length of 65,536 characters.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TextField.DataType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.TextField.MaxLength">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.TextField.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.TextField"/> class.
            </summary>
            <param name="value">The initial text value.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TextField.Value">
            <summary>
            Gets the text value of this field.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TextField.ValidateValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.TextField.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.TextField.op_Implicit(System.String)~Segmint.Core.HL7.Types.TextField">
            <summary>
            Implicitly converts a string to a TextField.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TextField.op_Implicit(Segmint.Core.HL7.Types.TextField)~System.String">
            <summary>
            Implicitly converts a TextField to a string.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.Types.TimestampField">
            <summary>
            Represents an HL7 Timestamp (TS) field.
            Format: YYYY[MM[DD[HHMM[SS[.SSSS]]]]][+/-ZZZZ]
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TimestampField.DataType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.TimestampField.MaxLength">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.TimestampField.Value">
            <summary>
            Gets or sets the value of this timestamp field.
            Returns DateTime if set with DateTime, otherwise returns string.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.TimestampField"/> class.
            </summary>
            <param name="value">The initial timestamp value.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.TimestampField"/> class with a DateTime value.
            </summary>
            <param name="dateTime">The DateTime value to format as HL7 timestamp.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.#ctor(System.DateTime,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.TimestampField"/> class with a DateTime value.
            </summary>
            <param name="dateTime">The DateTime value to format as HL7 timestamp.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.#ctor(System.DateTime,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.TimestampField"/> class with a DateTime value.
            </summary>
            <param name="dateTime">The DateTime value to format as HL7 timestamp.</param>
            <param name="includeFraction">Whether to include fractional seconds.</param>
            <param name="includeTimezone">Whether to include timezone information.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.ToDateTime">
            <summary>
            Gets the DateTime value of this timestamp field.
            </summary>
            <returns>The parsed DateTime, or null if the value cannot be parsed.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.ParseDateTime(System.String)">
            <summary>
            Parses a timestamp string into a DateTime value.
            </summary>
            <param name="value">The timestamp string to parse.</param>
            <returns>The parsed DateTime, or null if the value cannot be parsed.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.SetToNow(System.Boolean,System.Boolean)">
            <summary>
            Sets this field to the current date and time.
            </summary>
            <param name="includeFraction">Whether to include fractional seconds.</param>
            <param name="includeTimezone">Whether to include timezone information.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.SetToUtcNow(System.Boolean,System.Boolean)">
            <summary>
            Sets this field to the current UTC date and time.
            </summary>
            <param name="includeFraction">Whether to include fractional seconds.</param>
            <param name="includeTimezone">Whether to include timezone information.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.SetValue(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Sets this field to a DateTime value.
            </summary>
            <param name="dateTime">The DateTime value to set.</param>
            <param name="includeFraction">Whether to include fractional seconds.</param>
            <param name="includeTimezone">Whether to include timezone information.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.ValidateValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.FormatDateTime(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Formats a DateTime as an HL7 timestamp string.
            </summary>
            <param name="dateTime">The DateTime to format.</param>
            <param name="includeFraction">Whether to include fractional seconds.</param>
            <param name="includeTimezone">Whether to include timezone information.</param>
            <returns>The HL7-formatted timestamp string.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.ToDisplayString">
            <summary>
            Returns a formatted display string for this timestamp.
            </summary>
            <returns>A human-readable representation of the timestamp.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.Now">
            <summary>
            Creates a new TimestampField with the current date and time.
            </summary>
            <returns>A new TimestampField set to the current date and time.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.Today">
            <summary>
            Creates a new TimestampField with today's date (time set to midnight).
            </summary>
            <returns>A new TimestampField set to today's date.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.FromDate(System.DateTime)">
            <summary>
            Creates a new TimestampField from a specific date.
            </summary>
            <param name="date">The date to create the timestamp from.</param>
            <returns>A new TimestampField set to the specified date.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.op_Implicit(System.DateTime)~Segmint.Core.HL7.Types.TimestampField">
            <summary>
            Implicitly converts a DateTime to a TimestampField.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.op_Implicit(Segmint.Core.HL7.Types.TimestampField)~System.Nullable{System.DateTime}">
            <summary>
            Implicitly converts a TimestampField to a DateTime (may be null).
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.op_Implicit(System.String)~Segmint.Core.HL7.Types.TimestampField">
            <summary>
            Implicitly converts a string to a TimestampField.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimestampField.op_Implicit(Segmint.Core.HL7.Types.TimestampField)~System.String">
            <summary>
            Implicitly converts a TimestampField to a string.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.Types.TimingQuantityField">
            <summary>
            Represents an HL7 Timing Quantity (TQ) field.
            Used for medication dosing timing and frequency information.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.NumberRegex">
            <remarks>
            Pattern:<br/>
            <code>^[0-9]+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.TimeRegex">
            <remarks>
            Pattern:<br/>
            <code>^[0-9]{8}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9] exactly 8 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TimingQuantityField.DataType">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.TimingQuantityField.MaxLength">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Types.TimingQuantityField.Quantity">
            <summary>
            Gets or sets the quantity.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TimingQuantityField.Interval">
            <summary>
            Gets or sets the interval.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TimingQuantityField.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TimingQuantityField.StartDateTime">
            <summary>
            Gets or sets the start date/time.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TimingQuantityField.EndDateTime">
            <summary>
            Gets or sets the end date/time.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TimingQuantityField.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TimingQuantityField.Condition">
            <summary>
            Gets or sets the condition.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TimingQuantityField.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TimingQuantityField.Conjunction">
            <summary>
            Gets or sets the conjunction.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Types.TimingQuantityField.OrderSequencing">
            <summary>
            Gets or sets the order sequencing.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Types.TimingQuantityField"/> class.
            </summary>
            <param name="value">The initial HL7 formatted value.</param>
            <param name="isRequired">Whether this field is required.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.CreateDaily(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a timing quantity field for daily dosing.
            </summary>
            <param name="quantity">The quantity per dose.</param>
            <param name="timesPerDay">The number of times per day.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.TimingQuantityField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.CreateHourly(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a timing quantity field for hourly dosing.
            </summary>
            <param name="quantity">The quantity per dose.</param>
            <param name="hoursInterval">The interval in hours.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.TimingQuantityField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.CreatePRN(System.String,System.String,System.Boolean)">
            <summary>
            Creates a timing quantity field for PRN (as needed) dosing.
            </summary>
            <param name="quantity">The quantity per dose.</param>
            <param name="condition">The condition for administration.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.TimingQuantityField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.CreateOnceDaily(System.String,System.String,System.Boolean)">
            <summary>
            Creates a timing quantity field for once-daily dosing.
            </summary>
            <param name="quantity">The quantity per dose.</param>
            <param name="time">The time of day (optional).</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.TimingQuantityField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.CreateBID(System.String,System.Boolean)">
            <summary>
            Creates a timing quantity field for BID (twice daily) dosing.
            </summary>
            <param name="quantity">The quantity per dose.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.TimingQuantityField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.CreateTID(System.String,System.Boolean)">
            <summary>
            Creates a timing quantity field for TID (three times daily) dosing.
            </summary>
            <param name="quantity">The quantity per dose.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.TimingQuantityField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.CreateQID(System.String,System.Boolean)">
            <summary>
            Creates a timing quantity field for QID (four times daily) dosing.
            </summary>
            <param name="quantity">The quantity per dose.</param>
            <param name="isRequired">Whether this field is required.</param>
            <returns>A new <see cref="T:Segmint.Core.HL7.Types.TimingQuantityField"/> instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.ParseFromHL7String(System.String)">
            <summary>
            Parses the components from an HL7 formatted string.
            </summary>
            <param name="value">The HL7 formatted string.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.UpdateRawValue">
            <summary>
            Updates the raw HL7 value from the component values.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.ValidateValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.ToHL7String">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.Clone">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.op_Implicit(System.String)~Segmint.Core.HL7.Types.TimingQuantityField">
            <summary>
            Implicitly converts a string to a TimingQuantityField.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.op_Implicit(Segmint.Core.HL7.Types.TimingQuantityField)~System.String">
            <summary>
            Implicitly converts a TimingQuantityField to a string.
            </summary>
            <param name="field">The TimingQuantityField.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Types.TimingQuantityField.ToDisplayString">
            <summary>
            Gets a formatted display string for this timing quantity.
            </summary>
            <returns>A human-readable representation of the timing quantity.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Validation.BaseValidator`1">
            <summary>
            Base class for all HL7 validators.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.BaseValidator`1.SupportedTypes">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.Validate(`0)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.CreateIssue(Segmint.Core.HL7.Validation.ValidationSeverity,Segmint.Core.HL7.Validation.ValidationType,System.String,System.String,System.String)">
            <summary>
            Creates a validation issue for the specified parameters.
            </summary>
            <param name="severity">The severity level.</param>
            <param name="type">The validation type.</param>
            <param name="code">The error code.</param>
            <param name="description">The description.</param>
            <param name="location">The location.</param>
            <returns>A new ValidationIssue instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.SyntaxError(System.String,System.String,System.String)">
            <summary>
            Creates a syntax error issue.
            </summary>
            <param name="code">The error code.</param>
            <param name="description">The description.</param>
            <param name="location">The location.</param>
            <returns>A new ValidationIssue instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.SemanticError(System.String,System.String,System.String)">
            <summary>
            Creates a semantic error issue.
            </summary>
            <param name="code">The error code.</param>
            <param name="description">The description.</param>
            <param name="location">The location.</param>
            <returns>A new ValidationIssue instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.ClinicalWarning(System.String,System.String,System.String)">
            <summary>
            Creates a clinical warning issue.
            </summary>
            <param name="code">The warning code.</param>
            <param name="description">The description.</param>
            <param name="location">The location.</param>
            <returns>A new ValidationIssue instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.InterfaceError(System.String,System.String,System.String)">
            <summary>
            Creates an interface error issue.
            </summary>
            <param name="code">The error code.</param>
            <param name="description">The description.</param>
            <param name="location">The location.</param>
            <returns>A new ValidationIssue instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.ValidateRequired(Segmint.Core.HL7.HL7Field,System.String)">
            <summary>
            Validates that a required field is not empty.
            </summary>
            <param name="field">The field to validate.</param>
            <param name="location">The field location.</param>
            <returns>A validation issue if the field is empty, null otherwise.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.ValidateMaxLength(Segmint.Core.HL7.HL7Field,System.String)">
            <summary>
            Validates that a field's length does not exceed the maximum.
            </summary>
            <param name="field">The field to validate.</param>
            <param name="location">The field location.</param>
            <returns>A validation issue if the field exceeds max length, null otherwise.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.ValidateNoControlCharacters(Segmint.Core.HL7.HL7Field,System.String)">
            <summary>
            Validates that a field does not contain HL7 control characters.
            </summary>
            <param name="field">The field to validate.</param>
            <param name="location">The field location.</param>
            <returns>A validation issue if control characters are found, null otherwise.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.ValidatePattern(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Validates that a string value matches a regular expression pattern.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="pattern">The regex pattern.</param>
            <param name="location">The field location.</param>
            <param name="errorCode">The error code.</param>
            <param name="description">The error description.</param>
            <returns>A validation issue if the pattern doesn't match, null otherwise.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.ValidateAllowedValues(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String)">
            <summary>
            Validates that a value is in a list of allowed values.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="allowedValues">The allowed values.</param>
            <param name="location">The field location.</param>
            <param name="errorCode">The error code.</param>
            <param name="description">The error description.</param>
            <returns>A validation issue if the value is not allowed, null otherwise.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.ValidateRange(System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String)">
            <summary>
            Validates that a numeric value is within a specified range.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="location">The field location.</param>
            <param name="errorCode">The error code.</param>
            <param name="description">The error description.</param>
            <returns>A validation issue if the value is out of range, null otherwise.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.ValidateReasonableDate(System.DateTime,System.String)">
            <summary>
            Validates that a date value is within a reasonable range.
            </summary>
            <param name="date">The date to validate.</param>
            <param name="location">The field location.</param>
            <returns>A validation issue if the date is unreasonable, null otherwise.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.ValidateBirthDate(System.DateTime,System.String)">
            <summary>
            Validates that a birth date is reasonable for a living person.
            </summary>
            <param name="birthDate">The birth date to validate.</param>
            <param name="location">The field location.</param>
            <returns>A validation issue if the birth date is unreasonable, null otherwise.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.CollectIssues(Segmint.Core.HL7.Validation.ValidationIssue[])">
            <summary>
            Collects all non-null validation issues from the provided issues.
            </summary>
            <param name="issues">The validation issues to collect.</param>
            <returns>A list of non-null validation issues.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.CreateResult(Segmint.Core.HL7.Validation.ValidationIssue[])">
            <summary>
            Creates a validation result with the specified issues.
            </summary>
            <param name="issues">The validation issues.</param>
            <returns>A new ValidationResult instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.BaseValidator`1.CreateResult(System.Collections.Generic.IEnumerable{Segmint.Core.HL7.Validation.ValidationIssue})">
            <summary>
            Creates a validation result with the specified issues.
            </summary>
            <param name="issues">The validation issues.</param>
            <returns>A new ValidationResult instance.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Validation.DefaultValidationConfiguration">
            <summary>
            Default validation configuration.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.DefaultValidationConfiguration.EnabledValidationTypes">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Validation.DefaultValidationConfiguration.MaxIssues">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Validation.DefaultValidationConfiguration.StopOnFirstError">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Validation.DefaultValidationConfiguration.MinimumSeverity">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Validation.DefaultValidationConfiguration.InterfaceRules">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Validation.DefaultValidationConfiguration.ClinicalRules">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Validation.DefaultValidationConfiguration.IsValidationTypeEnabled(Segmint.Core.HL7.Validation.ValidationType)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Validation.DefaultValidationConfiguration.ShouldReportSeverity(Segmint.Core.HL7.Validation.ValidationSeverity)">
            <inheritdoc />
        </member>
        <member name="T:Segmint.Core.HL7.Validation.ValidationContext">
            <summary>
            Validation context implementation.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationContext.Configuration">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationContext.CurrentPath">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationContext.Data">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationContext.#ctor(Segmint.Core.HL7.Validation.IValidationConfiguration,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Validation.ValidationContext"/> class.
            </summary>
            <param name="configuration">The validation configuration.</param>
            <param name="currentPath">The current validation path.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationContext.CreateChild(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationContext.AddData(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationContext.GetData``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationContext.HasData(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Segmint.Core.HL7.Validation.CompositeValidator">
            <summary>
            Composite validator that orchestrates all validation types.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.CompositeValidator.#ctor(Segmint.Core.HL7.Validation.IValidationConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Segmint.Core.HL7.Validation.CompositeValidator"/> class.
            </summary>
            <param name="configuration">The validation configuration.</param>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.CompositeValidator.FieldValidators">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Validation.CompositeValidator.SegmentValidators">
            <inheritdoc />
        </member>
        <member name="P:Segmint.Core.HL7.Validation.CompositeValidator.MessageValidators">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Validation.CompositeValidator.RegisterFieldValidator(Segmint.Core.HL7.Validation.IFieldValidator)">
            <summary>
            Registers a field validator.
            </summary>
            <param name="validator">The field validator to register.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.CompositeValidator.RegisterSegmentValidator(Segmint.Core.HL7.Validation.ISegmentValidator)">
            <summary>
            Registers a segment validator.
            </summary>
            <param name="validator">The segment validator to register.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.CompositeValidator.RegisterMessageValidator(Segmint.Core.HL7.Validation.IMessageValidator)">
            <summary>
            Registers a message validator.
            </summary>
            <param name="validator">The message validator to register.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.CompositeValidator.ValidateField(Segmint.Core.HL7.HL7Field)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Validation.CompositeValidator.ValidateSegment(Segmint.Core.HL7.HL7Segment)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Validation.CompositeValidator.ValidateMessage(Segmint.Core.HL7.Messages.HL7Message)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Validation.CompositeValidator.ValidateMessage(Segmint.Core.HL7.Messages.HL7Message,System.Collections.Generic.IEnumerable{Segmint.Core.HL7.Validation.ValidationType})">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Validation.CompositeValidator.ValidateHL7String(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Segmint.Core.HL7.Validation.CompositeValidator.RegisterDefaultValidators">
            <summary>
            Registers default validators.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.CompositeValidator.FilterIssues(System.Collections.Generic.IEnumerable{Segmint.Core.HL7.Validation.ValidationIssue},System.Collections.Generic.HashSet{Segmint.Core.HL7.Validation.ValidationType})">
            <summary>
            Filters issues based on configuration.
            </summary>
            <param name="issues">The issues to filter.</param>
            <param name="enabledTypes">The enabled validation types.</param>
            <returns>Filtered issues.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.CompositeValidator.ValidateHL7Syntax(System.String)">
            <summary>
            Validates basic HL7 syntax.
            </summary>
            <param name="hl7String">The HL7 string to validate.</param>
            <returns>A list of syntax validation issues.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.CompositeValidator.ParseHL7Message(System.String)">
            <summary>
            Parses an HL7 message string into a message object.
            </summary>
            <param name="hl7String">The HL7 string to parse.</param>
            <returns>The parsed message, or null if parsing fails.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.CompositeValidator.CreateADTMessage(System.String)">
            <summary>
            Creates an ADT message based on trigger event.
            </summary>
            <param name="triggerEvent">The trigger event.</param>
            <returns>The ADT message.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Validation.IValidator`1">
            <summary>
            Defines the contract for HL7 validators.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.IValidator`1.SupportedTypes">
            <summary>
            Gets the validation types supported by this validator.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.IValidator`1.Validate(`0)">
            <summary>
            Validates the specified object.
            </summary>
            <param name="item">The object to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.IValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the specified object asynchronously.
            </summary>
            <param name="item">The object to validate.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Validation.IFieldValidator">
            <summary>
            Defines the contract for field validators.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.IFieldValidator.SupportedFieldTypes">
            <summary>
            Gets the field types supported by this validator.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.IFieldValidator.CanValidate(Segmint.Core.HL7.HL7Field)">
            <summary>
            Determines whether this validator can validate the specified field.
            </summary>
            <param name="field">The field to check.</param>
            <returns>True if this validator can validate the field, false otherwise.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Validation.ISegmentValidator">
            <summary>
            Defines the contract for segment validators.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ISegmentValidator.SupportedSegmentIds">
            <summary>
            Gets the segment IDs supported by this validator.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ISegmentValidator.CanValidate(Segmint.Core.HL7.HL7Segment)">
            <summary>
            Determines whether this validator can validate the specified segment.
            </summary>
            <param name="segment">The segment to check.</param>
            <returns>True if this validator can validate the segment, false otherwise.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Validation.IMessageValidator">
            <summary>
            Defines the contract for message validators.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.IMessageValidator.SupportedMessageTypes">
            <summary>
            Gets the message types supported by this validator.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.IMessageValidator.CanValidate(Segmint.Core.HL7.Messages.HL7Message)">
            <summary>
            Determines whether this validator can validate the specified message.
            </summary>
            <param name="message">The message to check.</param>
            <returns>True if this validator can validate the message, false otherwise.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Validation.ICompositeValidator">
            <summary>
            Defines the contract for composite validators that can validate multiple types.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ICompositeValidator.FieldValidators">
            <summary>
            Gets the field validators.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ICompositeValidator.SegmentValidators">
            <summary>
            Gets the segment validators.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ICompositeValidator.MessageValidators">
            <summary>
            Gets the message validators.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ICompositeValidator.ValidateField(Segmint.Core.HL7.HL7Field)">
            <summary>
            Validates an HL7 field.
            </summary>
            <param name="field">The field to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ICompositeValidator.ValidateSegment(Segmint.Core.HL7.HL7Segment)">
            <summary>
            Validates an HL7 segment.
            </summary>
            <param name="segment">The segment to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ICompositeValidator.ValidateMessage(Segmint.Core.HL7.Messages.HL7Message)">
            <summary>
            Validates an HL7 message.
            </summary>
            <param name="message">The message to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ICompositeValidator.ValidateMessage(Segmint.Core.HL7.Messages.HL7Message,System.Collections.Generic.IEnumerable{Segmint.Core.HL7.Validation.ValidationType})">
            <summary>
            Validates an HL7 message with specified validation types.
            </summary>
            <param name="message">The message to validate.</param>
            <param name="validationTypes">The types of validation to perform.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ICompositeValidator.ValidateHL7String(System.String)">
            <summary>
            Validates an HL7 message string.
            </summary>
            <param name="hl7String">The HL7 message string to validate.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Validation.IValidationConfiguration">
            <summary>
            Defines the contract for validation configuration.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.IValidationConfiguration.EnabledValidationTypes">
            <summary>
            Gets the enabled validation types.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.IValidationConfiguration.MaxIssues">
            <summary>
            Gets the maximum number of issues to report.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.IValidationConfiguration.StopOnFirstError">
            <summary>
            Gets a value indicating whether to stop validation on first error.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.IValidationConfiguration.MinimumSeverity">
            <summary>
            Gets the minimum severity level to report.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.IValidationConfiguration.InterfaceRules">
            <summary>
            Gets the interface-specific validation rules.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.IValidationConfiguration.ClinicalRules">
            <summary>
            Gets the clinical validation rules.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.IValidationConfiguration.IsValidationTypeEnabled(Segmint.Core.HL7.Validation.ValidationType)">
            <summary>
            Determines whether a specific validation type is enabled.
            </summary>
            <param name="validationType">The validation type to check.</param>
            <returns>True if the validation type is enabled, false otherwise.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.IValidationConfiguration.ShouldReportSeverity(Segmint.Core.HL7.Validation.ValidationSeverity)">
            <summary>
            Determines whether an issue should be reported based on its severity.
            </summary>
            <param name="severity">The severity level to check.</param>
            <returns>True if the issue should be reported, false otherwise.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Validation.IValidationContext">
            <summary>
            Defines the contract for validation context.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.IValidationContext.Configuration">
            <summary>
            Gets the validation configuration.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.IValidationContext.CurrentPath">
            <summary>
            Gets the current validation path.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.IValidationContext.Data">
            <summary>
            Gets the context data.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.IValidationContext.CreateChild(System.String)">
            <summary>
            Creates a child context for a specific location.
            </summary>
            <param name="location">The location identifier.</param>
            <returns>A new validation context for the specified location.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.IValidationContext.AddData(System.String,System.Object)">
            <summary>
            Adds data to the context.
            </summary>
            <param name="key">The data key.</param>
            <param name="value">The data value.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.IValidationContext.GetData``1(System.String)">
            <summary>
            Gets data from the context.
            </summary>
            <typeparam name="T">The type of data to retrieve.</typeparam>
            <param name="key">The data key.</param>
            <returns>The data value, or default if not found.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.IValidationContext.HasData(System.String)">
            <summary>
            Determines whether the context has data for the specified key.
            </summary>
            <param name="key">The data key.</param>
            <returns>True if the context has data for the key, false otherwise.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Validation.ValidationSeverity">
            <summary>
            Represents the severity level of a validation issue.
            </summary>
        </member>
        <member name="F:Segmint.Core.HL7.Validation.ValidationSeverity.Info">
            <summary>
            Informational message or suggestion.
            </summary>
        </member>
        <member name="F:Segmint.Core.HL7.Validation.ValidationSeverity.Warning">
            <summary>
            Warning that should be addressed but doesn't prevent processing.
            </summary>
        </member>
        <member name="F:Segmint.Core.HL7.Validation.ValidationSeverity.Error">
            <summary>
            Error that prevents successful processing.
            </summary>
        </member>
        <member name="F:Segmint.Core.HL7.Validation.ValidationSeverity.Critical">
            <summary>
            Critical error that indicates severe compliance issues.
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.Validation.ValidationType">
            <summary>
            Represents the type of validation that detected an issue.
            </summary>
        </member>
        <member name="F:Segmint.Core.HL7.Validation.ValidationType.Syntax">
            <summary>
            Syntax validation (HL7 format compliance).
            </summary>
        </member>
        <member name="F:Segmint.Core.HL7.Validation.ValidationType.Semantic">
            <summary>
            Semantic validation (field requirements, data types).
            </summary>
        </member>
        <member name="F:Segmint.Core.HL7.Validation.ValidationType.Interface">
            <summary>
            Interface validation (vendor-specific rules).
            </summary>
        </member>
        <member name="F:Segmint.Core.HL7.Validation.ValidationType.Clinical">
            <summary>
            Clinical validation (medical appropriateness).
            </summary>
        </member>
        <member name="F:Segmint.Core.HL7.Validation.ValidationType.Transport">
            <summary>
            Transport validation (network framing).
            </summary>
        </member>
        <member name="T:Segmint.Core.HL7.Validation.ValidationIssue">
            <summary>
            Represents a single validation issue found during validation.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationIssue.Severity">
            <summary>
            Gets or sets the severity of this issue.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationIssue.Type">
            <summary>
            Gets or sets the type of validation that detected this issue.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationIssue.Code">
            <summary>
            Gets or sets the error code for this issue.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationIssue.Description">
            <summary>
            Gets or sets the human-readable description of this issue.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationIssue.Location">
            <summary>
            Gets or sets the location where this issue was found.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationIssue.SegmentId">
            <summary>
            Gets or sets the segment ID where this issue was found.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationIssue.FieldNumber">
            <summary>
            Gets or sets the field number where this issue was found.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationIssue.ComponentNumber">
            <summary>
            Gets or sets the component number where this issue was found.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationIssue.ActualValue">
            <summary>
            Gets or sets the actual value that caused the issue.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationIssue.ExpectedValue">
            <summary>
            Gets or sets the expected value or format.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationIssue.Suggestions">
            <summary>
            Gets or sets suggested fixes for this issue.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationIssue.Context">
            <summary>
            Gets or sets additional context information.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationIssue.DetectedAt">
            <summary>
            Gets or sets the timestamp when this issue was detected.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationIssue.Create(Segmint.Core.HL7.Validation.ValidationSeverity,Segmint.Core.HL7.Validation.ValidationType,System.String,System.String,System.String)">
            <summary>
            Creates a new validation issue.
            </summary>
            <param name="severity">The severity level.</param>
            <param name="type">The validation type.</param>
            <param name="code">The error code.</param>
            <param name="description">The description.</param>
            <param name="location">The location.</param>
            <returns>A new ValidationIssue instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationIssue.SyntaxError(System.String,System.String,System.String)">
            <summary>
            Creates a syntax error.
            </summary>
            <param name="code">The error code.</param>
            <param name="description">The description.</param>
            <param name="location">The location.</param>
            <returns>A new ValidationIssue instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationIssue.SemanticError(System.String,System.String,System.String)">
            <summary>
            Creates a semantic error.
            </summary>
            <param name="code">The error code.</param>
            <param name="description">The description.</param>
            <param name="location">The location.</param>
            <returns>A new ValidationIssue instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationIssue.ClinicalWarning(System.String,System.String,System.String)">
            <summary>
            Creates a clinical warning.
            </summary>
            <param name="code">The warning code.</param>
            <param name="description">The description.</param>
            <param name="location">The location.</param>
            <returns>A new ValidationIssue instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationIssue.InterfaceError(System.String,System.String,System.String)">
            <summary>
            Creates an interface error.
            </summary>
            <param name="code">The error code.</param>
            <param name="description">The description.</param>
            <param name="location">The location.</param>
            <returns>A new ValidationIssue instance.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationIssue.WithLocation(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Sets the segment and field location for this issue.
            </summary>
            <param name="segmentId">The segment ID.</param>
            <param name="fieldNumber">The field number.</param>
            <param name="componentNumber">The component number (optional).</param>
            <returns>This ValidationIssue instance for method chaining.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationIssue.WithValues(System.String,System.String)">
            <summary>
            Sets the actual and expected values for this issue.
            </summary>
            <param name="actualValue">The actual value.</param>
            <param name="expectedValue">The expected value.</param>
            <returns>This ValidationIssue instance for method chaining.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationIssue.WithSuggestion(System.String)">
            <summary>
            Adds a suggestion for fixing this issue.
            </summary>
            <param name="suggestion">The suggestion text.</param>
            <returns>This ValidationIssue instance for method chaining.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationIssue.WithContext(System.String,System.Object)">
            <summary>
            Adds context information for this issue.
            </summary>
            <param name="key">The context key.</param>
            <param name="value">The context value.</param>
            <returns>This ValidationIssue instance for method chaining.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationIssue.ToString">
            <summary>
            Gets a formatted string representation of this issue.
            </summary>
            <returns>A formatted string representation.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Validation.ValidationResult">
            <summary>
            Represents the result of a validation operation.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationResult.Issues">
            <summary>
            Gets the list of validation issues found.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationResult.IsValid">
            <summary>
            Gets a value indicating whether the validation was successful (no errors or critical issues).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationResult.TotalIssues">
            <summary>
            Gets the total number of issues found.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationResult.CriticalCount">
            <summary>
            Gets the number of critical issues.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationResult.ErrorCount">
            <summary>
            Gets the number of error issues.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationResult.WarningCount">
            <summary>
            Gets the number of warning issues.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationResult.InfoCount">
            <summary>
            Gets the number of info issues.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationResult.Errors">
            <summary>
            Gets all errors (critical and error severity).
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationResult.Warnings">
            <summary>
            Gets all warnings.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationResult.Infos">
            <summary>
            Gets all info messages.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationResult.Stats">
            <summary>
            Gets validation statistics.
            </summary>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationResult.AddIssue(Segmint.Core.HL7.Validation.ValidationIssue)">
            <summary>
            Adds a validation issue to the result.
            </summary>
            <param name="issue">The validation issue to add.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationResult.AddIssues(System.Collections.Generic.IEnumerable{Segmint.Core.HL7.Validation.ValidationIssue})">
            <summary>
            Adds multiple validation issues to the result.
            </summary>
            <param name="issues">The validation issues to add.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationResult.Merge(Segmint.Core.HL7.Validation.ValidationResult)">
            <summary>
            Merges another validation result into this one.
            </summary>
            <param name="other">The other validation result to merge.</param>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationResult.GetIssuesBySeverity(Segmint.Core.HL7.Validation.ValidationSeverity)">
            <summary>
            Filters issues by severity.
            </summary>
            <param name="severity">The severity to filter by.</param>
            <returns>Issues with the specified severity.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationResult.GetIssuesByType(Segmint.Core.HL7.Validation.ValidationType)">
            <summary>
            Filters issues by validation type.
            </summary>
            <param name="type">The validation type to filter by.</param>
            <returns>Issues with the specified validation type.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationResult.GetIssuesByLocation(System.String,System.Nullable{System.Int32})">
            <summary>
            Filters issues by location.
            </summary>
            <param name="segmentId">The segment ID to filter by.</param>
            <param name="fieldNumber">The field number to filter by (optional).</param>
            <returns>Issues at the specified location.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationResult.GetSummary">
            <summary>
            Gets a summary of the validation results.
            </summary>
            <returns>A formatted summary string.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationResult.Success">
            <summary>
            Creates a successful validation result.
            </summary>
            <returns>A new ValidationResult instance with no issues.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationResult.WithIssue(Segmint.Core.HL7.Validation.ValidationIssue)">
            <summary>
            Creates a validation result with a single error.
            </summary>
            <param name="issue">The validation issue.</param>
            <returns>A new ValidationResult instance with the specified issue.</returns>
        </member>
        <member name="M:Segmint.Core.HL7.Validation.ValidationResult.WithIssues(System.Collections.Generic.IEnumerable{Segmint.Core.HL7.Validation.ValidationIssue})">
            <summary>
            Creates a validation result with multiple issues.
            </summary>
            <param name="issues">The validation issues.</param>
            <returns>A new ValidationResult instance with the specified issues.</returns>
        </member>
        <member name="T:Segmint.Core.HL7.Validation.ValidationStats">
            <summary>
            Represents validation statistics.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationStats.TotalIssues">
            <summary>
            Gets or sets the total number of issues.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationStats.CriticalCount">
            <summary>
            Gets or sets the number of critical issues.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationStats.ErrorCount">
            <summary>
            Gets or sets the number of error issues.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationStats.WarningCount">
            <summary>
            Gets or sets the number of warning issues.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationStats.InfoCount">
            <summary>
            Gets or sets the number of info issues.
            </summary>
        </member>
        <member name="P:Segmint.Core.HL7.Validation.ValidationStats.IsValid">
            <summary>
            Gets or sets a value indicating whether the validation was successful.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IdentifierRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IdentifierRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IdentifierRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IdentifierRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IdentifierRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IdentifierRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IdentifierRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IdentifierRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IdentifierRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IdentifierRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NamespaceRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the NamespaceRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.NamespaceRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NamespaceRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NamespaceRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NamespaceRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NamespaceRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NamespaceRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NamespaceRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NamespaceRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.OidRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the OidRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.OidRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.OidRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.OidRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.OidRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.OidRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.OidRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.OidRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.OidRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphaNumericPattern_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AlphaNumericPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AlphaNumericPattern_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphaNumericPattern_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphaNumericPattern_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphaNumericPattern_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AlphaNumericPattern_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphaNumericPattern_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphaNumericPattern_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AlphaNumericPattern_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PhoneNumberRegex_4">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the PhoneNumberRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.PhoneNumberRegex_4.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberRegex_4.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PhoneNumberRegex_4.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberRegex_4.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PhoneNumberRegex_4.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberRegex_4.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberRegex_4.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberRegex_4.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailRegex_5">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the EmailRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.EmailRegex_5.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_5.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailRegex_5.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_5.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailRegex_5.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_5.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_5.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_5.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumberRegex_6">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the NumberRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.NumberRegex_6.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumberRegex_6.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumberRegex_6.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumberRegex_6.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NumberRegex_6.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumberRegex_6.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumberRegex_6.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NumberRegex_6.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TimeRegex_7">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the TimeRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.TimeRegex_7.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TimeRegex_7.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TimeRegex_7.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TimeRegex_7.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TimeRegex_7.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TimeRegex_7.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TimeRegex_7.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TimeRegex_7.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiLetters">
            <summary>Supports searching for characters in or not in "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_160FF03FEFFFF87FEFFFF07">
            <summary>Supports searching for characters in or not in " -.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_2068FF03FEFFFF87FEFFFF07">
            <summary>Supports searching for characters in or not in "%+-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_20FF03FEFFFF87FEFFFF07">
            <summary>Supports searching for characters in or not in "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_40FF030000000000000000">
            <summary>Supports searching for characters in or not in ".0123456789".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_60FF03FEFFFF07FEFFFF07">
            <summary>Supports searching for characters in or not in "-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
    </members>
</doc>
