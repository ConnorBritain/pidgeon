#!/bin/bash

# Segmint .NET Development Script
# Provides common development commands for CLI-based .NET development

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Project root
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$PROJECT_ROOT"

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if .NET is installed
check_dotnet() {
    if ! command -v dotnet &> /dev/null; then
        log_error ".NET 8 SDK is not installed!"
        log_info "Install from: https://dotnet.microsoft.com/download/dotnet/8.0"
        exit 1
    fi
    
    log_info "Using .NET version: $(dotnet --version)"
}

# Development commands
cmd_setup() {
    log_info "Setting up development environment..."
    check_dotnet
    
    log_info "Restoring NuGet packages..."
    dotnet restore
    
    log_success "Development environment ready!"
}

cmd_build() {
    log_info "Building solution..."
    dotnet build --configuration Debug --verbosity minimal
    log_success "Build completed successfully!"
}

cmd_clean() {
    log_info "Cleaning solution..."
    dotnet clean
    log_success "Solution cleaned!"
}

cmd_test() {
    log_info "Running tests..."
    dotnet test --logger console --verbosity normal
}

cmd_test_watch() {
    log_info "Starting test watcher..."
    dotnet watch --project tests/Segmint.Tests test
}

cmd_run_cli() {
    log_info "Running Segmint CLI..."
    dotnet run --project src/Segmint.CLI -- "$@"
}

cmd_format() {
    log_info "Formatting code..."
    dotnet format
    log_success "Code formatted!"
}

cmd_create_field() {
    local field_name="$1"
    if [[ -z "$field_name" ]]; then
        log_error "Usage: ./dev.sh create-field <FieldTypeName>"
        exit 1
    fi
    
    local file_path="src/Segmint.Core/HL7/Types/${field_name}Field.cs"
    
    if [[ -f "$file_path" ]]; then
        log_warning "Field type $field_name already exists!"
        exit 1
    fi
    
    log_info "Creating field type: $field_name"
    
    cat > "$file_path" << EOF
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

namespace Segmint.Core.HL7.Types;

/// <summary>
/// Represents an HL7 ${field_name} field.
/// </summary>
public class ${field_name}Field : HL7Field
{
    /// <inheritdoc />
    public override string DataType => "TODO"; // Update with actual HL7 data type
    
    /// <summary>
    /// Initializes a new instance of the <see cref="${field_name}Field"/> class.
    /// </summary>
    /// <param name="value">The initial value.</param>
    /// <param name="isRequired">Whether this field is required.</param>
    public ${field_name}Field(string? value = null, bool isRequired = false)
        : base(value, isRequired)
    {
    }
    
    /// <summary>
    /// Gets the typed value of this field.
    /// </summary>
    public string Value => RawValue; // TODO: Update return type as needed
    
    /// <inheritdoc />
    protected override void ValidateValue(string value)
    {
        // TODO: Implement field-specific validation
        base.ValidateValue(value);
    }
    
    /// <inheritdoc />
    public override HL7Field Clone()
    {
        return new ${field_name}Field(RawValue, IsRequired);
    }
    
    /// <summary>
    /// Implicitly converts a string to a ${field_name}Field.
    /// </summary>
    public static implicit operator ${field_name}Field(string value)
    {
        return new ${field_name}Field(value);
    }
    
    /// <summary>
    /// Implicitly converts a ${field_name}Field to a string.
    /// </summary>
    public static implicit operator string(${field_name}Field field)
    {
        return field.Value;
    }
}
EOF
    
    log_success "Created field type: $file_path"
    log_info "Don't forget to update the DataType property and add specific validation!"
}

cmd_create_segment() {
    local segment_name="$1"
    if [[ -z "$segment_name" ]]; then
        log_error "Usage: ./dev.sh create-segment <SegmentName>"
        exit 1
    fi
    
    local file_path="src/Segmint.Core/HL7/Segments/${segment_name}Segment.cs"
    
    if [[ -f "$file_path" ]]; then
        log_warning "Segment $segment_name already exists!"
        exit 1
    fi
    
    log_info "Creating segment: $segment_name"
    
    cat > "$file_path" << EOF
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

using Segmint.Core.HL7.Types;

namespace Segmint.Core.HL7.Segments;

/// <summary>
/// Represents an HL7 ${segment_name} segment.
/// </summary>
public class ${segment_name}Segment : HL7Segment
{
    /// <inheritdoc />
    public override string SegmentId => "${segment_name}";
    
    /// <summary>
    /// Initializes a new instance of the <see cref="${segment_name}Segment"/> class.
    /// </summary>
    public ${segment_name}Segment()
    {
    }
    
    /// <inheritdoc />
    protected override void InitializeFields()
    {
        // TODO: Add fields according to HL7 specification
        // Example:
        // AddField(new StringField("", isRequired: true));  // Field 1
        // AddField(new IdentifierField("", isRequired: false)); // Field 2
    }
    
    /// <inheritdoc />
    public override HL7Segment Clone()
    {
        var clone = new ${segment_name}Segment();
        // TODO: Copy field values
        return clone;
    }
}
EOF
    
    log_success "Created segment: $file_path"
    log_info "Don't forget to implement InitializeFields() with the proper HL7 field definitions!"
}

cmd_roadmap() {
    log_info "Opening NETROADMAP.md for reference..."
    if command -v code &> /dev/null; then
        code NETROADMAP.md
    elif command -v nano &> /dev/null; then
        nano NETROADMAP.md
    else
        cat NETROADMAP.md
    fi
}

cmd_status() {
    log_info "=== Segmint .NET Development Status ==="
    echo
    
    log_info "Solution structure:"
    find src -name "*.cs" | head -10
    if [[ $(find src -name "*.cs" | wc -l) -gt 10 ]]; then
        echo "... and $(( $(find src -name "*.cs" | wc -l) - 10 )) more files"
    fi
    echo
    
    log_info "Test status:"
    if dotnet test --nologo --verbosity quiet > /dev/null 2>&1; then
        log_success "All tests passing!"
    else
        log_warning "Some tests failing - run './dev.sh test' for details"
    fi
    echo
    
    log_info "Build status:"
    if dotnet build --nologo --verbosity quiet > /dev/null 2>&1; then
        log_success "Solution builds successfully!"
    else
        log_warning "Build errors - run './dev.sh build' for details"
    fi
}

cmd_help() {
    echo "Segmint .NET Development Script"
    echo
    echo "Usage: ./dev.sh <command> [arguments]"
    echo
    echo "Commands:"
    echo "  setup              Set up development environment"
    echo "  build              Build the solution"
    echo "  clean              Clean build artifacts"
    echo "  test               Run all tests"
    echo "  test-watch         Run tests in watch mode"
    echo "  run-cli [args]     Run the CLI with arguments"
    echo "  format             Format code"
    echo "  create-field <name> Create a new HL7 field type"
    echo "  create-segment <name> Create a new HL7 segment"
    echo "  roadmap            View the development roadmap"
    echo "  status             Show development status"
    echo "  help               Show this help"
    echo
    echo "Examples:"
    echo "  ./dev.sh setup"
    echo "  ./dev.sh build"
    echo "  ./dev.sh test"
    echo "  ./dev.sh run-cli --help"
    echo "  ./dev.sh create-field Timestamp"
    echo "  ./dev.sh create-segment MSH"
}

# Main command dispatcher
case "${1:-help}" in
    "setup")
        cmd_setup
        ;;
    "build")
        cmd_build
        ;;
    "clean")
        cmd_clean
        ;;
    "test")
        cmd_test
        ;;
    "test-watch")
        cmd_test_watch
        ;;
    "run-cli")
        shift
        cmd_run_cli "$@"
        ;;
    "format")
        cmd_format
        ;;
    "create-field")
        cmd_create_field "$2"
        ;;
    "create-segment")
        cmd_create_segment "$2"
        ;;
    "roadmap")
        cmd_roadmap
        ;;
    "status")
        cmd_status
        ;;
    "help"|*)
        cmd_help
        ;;
esac