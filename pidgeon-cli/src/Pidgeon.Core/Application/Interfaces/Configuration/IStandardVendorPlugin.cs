// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

using Pidgeon.Core.Domain.Configuration.Entities;
using Pidgeon.Core.Generation;

namespace Pidgeon.Core.Application.Interfaces.Configuration;

/// <summary>
/// Interface for standard-specific vendor pattern analysis and detection.
/// Each healthcare standard (HL7, FHIR, NCPDP) implements this to provide vendor intelligence.
/// Enables multi-standard vendor detection while maintaining plugin architecture.
/// </summary>
public interface IStandardVendorPlugin
{
    /// <summary>
    /// Healthcare standard this plugin handles (e.g., "HL7v23", "FHIRv4", "NCPDP_SCRIPT").
    /// </summary>
    string Standard { get; }

    /// <summary>
    /// Human-readable name for this plugin.
    /// </summary>
    string DisplayName { get; }

    /// <summary>
    /// Priority for plugin selection when multiple plugins could handle a message.
    /// Higher values = higher priority.
    /// </summary>
    int Priority { get; }

    /// <summary>
    /// Determines if this plugin can analyze the given message content.
    /// </summary>
    /// <param name="messageContent">Raw message content to analyze</param>
    /// <returns>True if this plugin can handle the message</returns>
    bool CanAnalyze(string messageContent);

    /// <summary>
    /// Analyzes a collection of messages to infer vendor patterns.
    /// Creates standard-specific field patterns, message structures, and deviations.
    /// </summary>
    /// <param name="messages">Collection of messages to analyze</param>
    /// <param name="options">Analysis configuration options</param>
    /// <returns>Inferred vendor configuration with standard-specific patterns</returns>
    Task<Result<VendorConfiguration>> AnalyzeVendorPatternsAsync(
        IEnumerable<string> messages, 
        InferenceOptions options);

    /// <summary>
    /// Calculates confidence that a message was generated by a specific vendor.
    /// Uses standard-specific analysis (field patterns, structures, deviations).
    /// </summary>
    /// <param name="messageContent">Message content to analyze</param>
    /// <param name="vendorConfig">Vendor configuration to match against</param>
    /// <returns>Confidence score (0.0-1.0) that message matches vendor</returns>
    Task<Result<double>> CalculateVendorConfidenceAsync(
        string messageContent, 
        VendorConfiguration vendorConfig);

    /// <summary>
    /// Detects all vendor patterns in a message and returns ranked candidates.
    /// Provides vendor detection with confidence scores for message routing.
    /// </summary>
    /// <param name="messageContent">Message content to analyze</param>
    /// <param name="knownVendors">Known vendor configurations to match against</param>
    /// <returns>Ranked list of vendor matches with confidence scores</returns>
    Task<Result<IReadOnlyList<VendorMatch>>> DetectVendorCandidatesAsync(
        string messageContent, 
        IReadOnlyList<VendorConfiguration> knownVendors);

    /// <summary>
    /// Validates that a vendor configuration is compatible with this standard.
    /// Ensures vendor patterns make sense for the specific healthcare standard.
    /// </summary>
    /// <param name="vendorConfig">Vendor configuration to validate</param>
    /// <returns>Validation result with any standard-specific issues</returns>
    Task<Result<ConfigurationValidationResult>> ValidateVendorConfigurationAsync(
        VendorConfiguration vendorConfig);

    /// <summary>
    /// Gets baseline vendor configurations that ship with this standard plugin.
    /// Provides out-of-the-box vendor intelligence for common EHR systems.
    /// </summary>
    /// <returns>Collection of baseline vendor configurations</returns>
    Task<Result<IReadOnlyList<VendorConfiguration>>> GetBaselineVendorConfigurationsAsync();

    /// <summary>
    /// Extracts standard-specific metadata from a message for vendor fingerprinting.
    /// Each standard has different key fields for vendor detection.
    /// </summary>
    /// <param name="messageContent">Message content to analyze</param>
    /// <returns>Standard-specific vendor signature information</returns>
    Task<Result<VendorSignature>> ExtractVendorSignatureAsync(string messageContent);
}

/// <summary>
/// Represents a potential vendor match with confidence scoring.
/// Used for ranking vendor detection results across standards.
/// </summary>
public record VendorMatch
{
    /// <summary>
    /// Vendor configuration that matched.
    /// </summary>
    public required VendorConfiguration VendorConfiguration { get; init; }

    /// <summary>
    /// Confidence score for this match (0.0-1.0).
    /// </summary>
    public required double Confidence { get; init; }

    /// <summary>
    /// Standard that detected this vendor match.
    /// </summary>
    public required string Standard { get; init; }

    /// <summary>
    /// Specific reasons this vendor was detected.
    /// Useful for debugging and user feedback.
    /// </summary>
    public List<string> MatchReasons { get; init; } = new();

    /// <summary>
    /// Standard-specific details about the match.
    /// Can contain HL7 segments, FHIR resources, NCPDP fields, etc.
    /// </summary>
    public Dictionary<string, object> MatchDetails { get; init; } = new();
}

/// <summary>
/// Registry for managing standard-specific vendor plugins.
/// Provides unified access to vendor intelligence across all healthcare standards.
/// </summary>
public interface IStandardVendorPluginRegistry
{
    /// <summary>
    /// Registers a standard-specific vendor plugin.
    /// </summary>
    /// <param name="plugin">Plugin to register</param>
    void RegisterPlugin(IStandardVendorPlugin plugin);

    /// <summary>
    /// Gets all registered vendor plugins.
    /// </summary>
    /// <returns>Collection of all vendor plugins</returns>
    IReadOnlyList<IStandardVendorPlugin> GetAllPlugins();

    /// <summary>
    /// Gets vendor plugins that can handle a specific message.
    /// Returns plugins ordered by priority (highest first).
    /// </summary>
    /// <param name="messageContent">Message content to analyze</param>
    /// <returns>Ordered list of compatible plugins</returns>
    IReadOnlyList<IStandardVendorPlugin> GetPluginsForMessage(string messageContent);

    /// <summary>
    /// Gets vendor plugin for a specific standard.
    /// </summary>
    /// <param name="standard">Standard name (e.g., "HL7v23", "FHIRv4")</param>
    /// <returns>Plugin for the standard, or null if not found</returns>
    IStandardVendorPlugin? GetPluginForStandard(string standard);

    /// <summary>
    /// Gets all vendor plugins that support a specific standard family.
    /// </summary>
    /// <param name="standardFamily">Standard family (e.g., "HL7", "FHIR", "NCPDP")</param>
    /// <returns>Plugins supporting the standard family</returns>
    IReadOnlyList<IStandardVendorPlugin> GetPluginsForStandardFamily(string standardFamily);
}